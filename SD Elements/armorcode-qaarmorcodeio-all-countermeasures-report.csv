Phase,Task ID,Task Title,Priority,Description,Completion Status,Tags,Problem ID,Problem Title,Risk Rating,Business Unit,Application,Project,Project Attributes,Issue Tracker Tickets,Why is this Countermeasure included?
Testing,T1039,Test that homoglyphs are distinguishable in the application's output,5,"Some glyphs, pictures, or icons can be semantically distinct to a program while appearing very similar or identical to a human user. These are referred to as homoglyphs. For example, in some fonts, the lowercase ""l"" (ell) and uppercase ""I"" (eye) may look identical while they have different character codes. A program can recognize that they are different, but these characters can be displayed in exactly the same way to a user. This can also occur between different character sets. For example, the upper case Latin ""A"" and upper case Greek ""A"" are treated as distinct by programs but may be displayed in exactly the same way to a user.

Adversaries can exploit this visual similarity for attacks such as phishing, such as by providing a link to an attacker-controlled hostname that looks like a hostname that the victim trusts. In a different use of homoglyphs, an adversary may create a backdoor username that is visually similar to the username of a regular user, which then makes it more difficult for a system administrator to detect the malicious username while reviewing logs.

Use the following guidelines for testing whether homoglyphs are distinguishable in output:

- Identify important areas of the application such as information pages and log pages that display sensitive information like names and identifiers.
    - Pay more attention to the areas that display data that is provided by users.
- On behalf of a user, submit some data to be shown in the identified areas, once using regular characters, and a second time using homoglyph characters.
    - For example, you can use characters from different Unicode character sets that look identical.
- Make sure the data shown in the application is distinguishable in those two cases. Otherwise, this test __fails__.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1039/",Incomplete,,P1013,Insufficient Visual Distinction of Homoglyphs Presented to User,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Requirements,T271,Prevent access to Android components if they do not need external communication,6,"Failing to restrict access to an Android component or failing to validate the source of a received Intent in Android can result in undesirable consequences, since components can freely send Intents to other components when the target components are exported.

Any component can send an explicit Intent to another exported component. In particular, if content providers make wrong assumptions about the source of the Intent they run the risk of providing information to an unauthorized caller.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/926
) - http://cwe.mitre.org/data/definitions/939
)

Android allows components to receive requests from other components. This includes components such as activity, service, content provider, and broadcast receiver.

- If the component does not need to be launched by external callers, or does not need external communication by means of Intents, set the `android:exported` property for the component to `false` in Android manifest file.
    - See the details in the note below for specific components.
    - Go through all <activity>, <activity-alias>, <service>, <provider> and <receiver> nodes in the Android manifest file and set `android:exported` to `false`.

- Remove **intent filters** if the component is not exported.
    - In Android 11 and earlier, having intent filters makes the component exported by default if `android:exported` is not specified.
    - If your app targets Android 12 and later and contains activities, services, or broadcast receivers that use intent filters, you must explicitly declare the `android:exported` attribute for these app components, othewise your app can't be installed on a device that runs Android 12.

- __Pay special attention to the content providers and make sure they are not exported if not needed.__


__Note__: 

See the Android API guide [App Manifest](http://developer.android.com/guide/topics/manifest/manifest-intro.html), or the links below.

[activity](http://developer.android.com/guide/topics/manifest/activity-element.html): Whether or not the activity can be launched by components of other applications : ""true"" if it can be, and ""false"" if not.

- If ""false"", the activity can be launched only by components of the same application or applications with the same user ID (UID).

[service](http://developer.android.com/guide/topics/manifest/service-element.html): Whether or not components of other applications can invoke the service or interact with it : ""true"" if they can, and ""false"" if not.

- If ""false"", only components of the same application or applications with the same user ID can start the service or bind to it.

[receiver](http://developer.android.com/guide/topics/manifest/receiver-element.html): Whether or not the broadcast receiver can receive messages from sources outside its application : ""true"" if it can, and ""false"" if not.
    
- If ""false"", the only messages the broadcast receiver can receive are those sent by components of the same application or applications with the same UID.

[provider](http://developer.android.com/guide/topics/manifest/provider-element.html): Whether the content provider is available for other applications to use:
    
- true: The provider is available to other applications. Any application can use the provider's content URI to access it, subject to the permissions specified for the provider.
- false: The provider is not available to other applications. Set `android:exported=""false""` to limit access to the provider to your applications. Only applications that have the same UID as the provider will have access to it.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T271/",Incomplete,,P759,Improper authorization of source of an Android Intent,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer) AND
• Changes to inbound/outbound interfaces (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• Changes to inbound/outbound interfaces (Hidden Answer)"
Testing,T412,Test that use of Android third-party keyboards is managed,4,"Android third party keyboards can capture the entire text that is entered using them, including sensitive data and user passwords. They can then send this data over the network with sufficient permissions. Most keyboards ask for network permissions to improve user experience. Therefore, it is not uncommon for a keyboard to request Internet access permission.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/200
) - http://cwe.mitre.org/data/definitions/201
)

Use the following guidelines for testing that Android third-party keyboards are managed:

- Identify input boxes that can be used to enter confidential or sensitive data, such as editable text boxes asking for passwords or personal information.

- Install and use a third-party keyboard that is not well-known and is not in your application's whitelist.  Consult developers for the whitelist.

- Depending on the application's policy, if you do not receive a warning that states the risks or the action is not terminated, this test __fails__.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T412/",Incomplete,,P770,Leak of sensitive data through Android third party keyboards,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Requirements,T50,Use indirect object reference maps if accessing files,8,"The application's authorization process is bypassed by an attacker who is able to retrieve user records. This occurs when a key used to identify a user's record is exploited by an attacker to look up information on its owner. The authorization process does not properly check whether the malicious user has permission to perform this action because the key being exploited belongs to an authorized user, and the malicious user has likely been legitimately authenticated by the system.

An example of this is when a system uses sequential, or other guessable, session IDs that allow one user to easily switch to another user's session and view or modify their data.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/639
) - http://cwe.mitre.org/data/definitions/932
)

Always use indirect references for accessing a specific object, such as a database record or a file. This practice prevents IDOR (Insecure Direct Object Reference) attacks.

Direct object references use a direct ID such as an actual file name like `""file=statement1.pdf""` in the URL parameters. Alternatively, indirect object references provide a separate identifier that the application later translates into an actual ID, such as `""file=a""`, where `'a'` is later translated to `'statement1.pdf'`.

Direct object references introduce a weakness that allows attackers to change the URL and access objects that should be off limits, such as `""file=../config.xml""`. An indirect object reference makes this attack impossible because the application can only provide access to a certain set of objects, such as all files in a particular directory or a predefined list of individual database records.

This control applies specifically to resources that require access control. Publicly accessible static content that is normally stored on web servers does not necessarily need this protection.

If direct object references must be facilitated, such as a filename, restrict the path to a single directory and ensure that users cannot escape out of that directory. Use a combination of allowlist validation on the filename and operating system access controls to enforce this. For example, a user should not be able to access: `""../../sensitive_folder/sensitive.file""`.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T50/",Incomplete,testv,P524,Access Control Bypass Through User-Controlled Keys,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T854,Verify that tapjacking and UI misrepresentation are prevented in Android,5,"In a class of attacks known as tapjacking, touchjacking, cloak & dagger, or UI misrepresentation in Android, an attacker displays a layer that fully or partially hides a lower hidden window using a malicious application. When a user types in a text field or clicks a button, they are actually interacting with a hidden application without being aware of it. Using the covered window behind the scene and a user's own actions, attackers can change an application's permissions, or perform a transaction.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/451
)

Use the following guidelines in Android for verifying that tapjacking and UI misrepresentation is prevented:

- Verify that `.setFilterTouchesWhenObscured()` is set to `true` on important [Views](https://developer.android.com/reference/android/view/View.html#setFilterTouchesWhenObscured(boolean)) with critical functions. 

__Note:__ 

- For a more advanced and elaborate test, you can create an application with an overlay window or toast that passes the taps through to a lower layer and test if the application accepts such taps. You will then be able to test the behavior in various versions of Android. 

- Set `android:clickable` and `android:focusable` to `false` for the overlay windows to pass the taps and touches.

- For more information, see [android:clickable](https://developer.android.com/reference/android/view/View.html#attr_android:clickable) in the _View_ documentation for Android developers.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T854/",Incomplete,,P341,Tapjacking and UI Misrepresentation in Android,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Activities,T1915,Perform network vulnerability assessment,8,"Without proper network vulnerability assessment, many known network vulnerabilities such as unnecessary open ports, dangerous services, or improperly configured components may remain unnoticed unless a major exploit happens.

Use the following guidelines for establishing effective vulnerability assessment practices:

- Implement vulnerability scanning tools that are capable of constantly updating newly discovered vulnerabilities to be scanned
- Develop and document vulnerability scanning process and activities including but not limited to:
    - Criteria for selecting vulnerability scanning targets and frequencies
    - Identification of severity levels based on asset criticality
    - Vulnerabilities that require remediation
    - Functions, ports, protocols that should not be accessible to users or devices
    - Improperly configured or incorrectly operating information flow control mechanisms
- Follow change management processes for vulnerability scanning activities
- Scan for vulnerabilities in the information system and hosted applications
- Analyze vulnerability scan reports and remove false positive vulnerability findings 
- Develop vulnerability reporting templates and share information obtained from the vulnerability scanning process with appropriate personnel 
- Correlate vulnerability scanning information to determine the presence of multi-vulnerability / multi-hop attack vectors.
- Prioritize vulnerability remediation activities and remediate legitimate vulnerabilities in accordance with risk assessment process
- Employ automated mechanisms to compare the results of vulnerability scans over time to determine trends in information system vulnerabilities

__Notes:__

- This countermeasure will not transition to 'Complete' unless its corresponding scan is completed with __zero 'High' and zero 'Critical' findings__.
- In addition, if this task is transitioned to 'Complete', it will __reopen if a scan has not been run with its results imported into SD Elements within its predefined time threshold__.

### China Cybersecurity Law (Article 21) – Multi-Level Protection Scheme (MLPS)

The *”Multi-level Protection Scheme (MLPS)”*, a supporting regulation to Article 21 of the Chinese cybersecurity framework, requires all network operators to perform a maturity assessment to classify the security of networks and implement technical measures to ensure the network is free from interference, damage, or unauthorized access. 

Network Operators refer to owners and administrators of networks and network service providers. The compliance procedure for multi-level protection is based on five protection levels – each level has its own general and extended requirements. 

**Follow these guidelines to perform a multi-level maturity assessment and achieve compliance with MLPS**

1. Specify the grading method and process for cybersecurity multi-level protection. Generate a systems inventory, define boundaries and grade all internal systems based on business importance, data type, and data volume, among others.

2. Conduct a self-assessment to determine which of the five protection levels the systems fall into and the security control measures that need to be adhered to. For Level 2 or above, consult with a qualified external expert to conduct an additional verification. If the expert finds unfulfilled items, take remedial action by implementing technical measures, improving management policies, and so on.

3. Submit grading documentation, assessment results, external expert reviews, and approval from authorities (where applicable), to an independent expert recognized by the MLPS for examination and verification. For Level 2 or above, file a record with the local Ministry of Public Security (MPS) within 10 working days of the review to obtain the filing certification. This marks the completion of the grading process.

4. Ensure continuous compliance with MLPS by conducting periodic reviews of systems and applications. Level 2 networks need to be reassessed every two years, Level 3 annually, Level 4 every 6 months and Level 5 based on the time period selected by the local regulatory ministry.

For more information, refer to the [KPMG guide on MLPS 2.0] (https://assets.kpmg/content/dam/kpmg/cn/pdf/en/2019/05/mlps-insights-strategies.pdf).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1915/",Incomplete,,P1438,Lack of network vulnerability assessment,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project AND
• New transactions / use cases (Hidden Answer)"
Development,T162,Validate pathname before retrieving local resources,5,"Many file operations are intended to take place within a restricted directory. By using special elements such as "".."" and ""/"" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. This is called ""path traversal"".

**Relative path traversal** uses relative path names, such as ""../"", which in most modern operating systems is interpreted as the parent directory of the current location. **Absolute path traversal** uses absolute pathnames, such as ""/usr/local/bin"", which may be useful in accessing unexpected files.

Also, in many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of an attack. For example, the software may add "".txt"" to any pathname to limit the attacker to text files, but a null injection may remove this restriction.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/22
) - http://cwe.mitre.org/data/definitions/932
)

When attempting to retrieve a local resource based on a user input, validate the pathname to ensure that the resulting resource is within the intended workspace.

This validation is most commonly essential when the application receives a remote message/request that can contain references to a local resource, such as a local file or image that will be shown to the user. A remote attacker might be able to control the resource location and cause the application to retrieve and/or execute potentially unsafe resources from outside the user's authorized territory.

A recommended approach is to wrap all access points to local resources in the application with a security control function that calculates the final location of the resource by resolving all the relative paths. Then validate that the final location of the resource falls within the approved white-listed locations within the workspace of the program. See the How-to's section for more details.

__Note:__

The temporary directory of the system might be shared between several programs. Due to easy and unrestricted access by other applications, access to this directory must be prohibited, or the workspace must be restricted to a hardened sub-directory that limits access permissions to just your application.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T162/",Incomplete,,P116,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Requirements,T5,Use minimum standards for passwords,5,"The application does not enforce creating passwords with enough complexity, increasing the chance of a brute-force attack. These attacks use trial and error to guess account passwords and take less effort for simple passwords.

It is mandatory that users have strong passwords because an authentication feature is only as strong as its credentials.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/521
)

During user registration and password resets, ensure that __passwords meet the minimum standards__. These standards are generally outlined in an enterprise security policy.

Additionally, compliance regulations, such as PCI-DSS and PA-DSS, may require more specific password restrictions. The enterprise security policy must meet the minimum requirements of the relevant compliance drivers. See __Additional Requirements__ for more information about the minimum requirements of different regulations.

If your organization does not have a security policy about password requirements, refer to a standard such as the [SANS Password Policy](http://www.sans.org/security-resources/policies/Password_Policy.pdf) and the UK's Centre for the Protection of National Infrastructure (CPNI) guide on [simplifying password management](https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/458857/Password_guidance_-_simplifying_your_approach.pdf).

These standards generally include a combination of the following:

- Requiring a minimum __length__ for passwords.
    - User-selected passwords are usually more predictable than randomly-selected ones, so it's better to use more characters for them. NIST [specifies](https://pages.nist.gov/800-63-3/sp800-63b.html) that passwords should be at least 8 characters for user-selected values, and 6 characters for randomly-selected ones. There is no consensus on limiting the maximum password length to any specific number but it is plausible to target a number that is large enough to give the users the required flexibility for picking reasonably long and secure passphrases, and small enough to avoid exhausting system resources (or potentially facilitating DOS attacks). For example, ASVS [recommends](https://github.com/OWASP/ASVS/blob/v4.0.3/4.0/en/0x11-V2-Authentication.md) using a max password length of 128 characters.
- Requiring a minimum password __complexity__.
    - Enforce at least one numerical, one upper case, one lower case, and if required one special character.
    - Highly complex passwords are unnecessary if other protections, such as secure storage and protective monitoring (account lockout, throttling, etc.), exist.

- Enforcing password __expiration__.
    - The user will be asked to pick a new password after a predetermined period.
    - If there is no regulatory obligation for this requirement, some standards do not recommend it as it increases the burden on users and discourages them from selecting effective passwords.

- Restricting the use of __previous passwords__.
    - Compare the new password against 3 to 5 old (stored) passwords.
    - If there is no regulatory obligation, some standards recommend a password change only if there is an indication or suspicion of compromise.

- Restricting the use of __dictionary words__ for passwords.
    - This includes words similar to dictionary words.

- Checking passwords against __known common weak password databases__.
    - These lists include passwords that meet the minimum length and character requirements, but are common and predictable, such as ""P@SSw0rd"".

- Restricting the use of __context-specific words__ such as usernames or service names.

For more information, refer to [NIST 800-63-B](https://pages.nist.gov/800-63-3/sp800-63b.html#appA) and the UK's CPNI guide on [simplifying password management](https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/458857/Password_guidance_-_simplifying_your_approach.pdf).

### Prevent the use of pwned passwords

Pwned Passwords are hundreds of millions of passwords previously exposed in data breaches. Attackers often use such databases in their exploits. 

Detect the use of pwned password by using a service like Troy Hunt’s Have I Been Pwned (HIBP). 

Reference:
https://haveibeenpwned.com/Passwords

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T5/",Incomplete,,P408,Password Requirements Are Weak,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authentication > Authentication Features > Authentication Method > Uses passwords AND
• NOT Application General > Components > Components In Development > Mobile app AND
• Changes to authentication (Hidden Answer)"
Activities,T1383,"Separate development, test, and operational environments",9,"Using the same environment for software in production, development and testing cause security issues such as accessing sensitive data in production, debugging and editing data in development and testing and other unauthorized accesses. Also, unwanted changes and mistakes can cause damages to the system that can affect the software in production.

Follow these guidelines to segregate development environments:

1. Establish two or more environments (e.g., dedicated networks) in which development and testing activities can be performed separately.
2. Isolate the development and test environments from production environments, and from each other by hosting development and test systems on a separate, standalone network, or segregating the network using a virtual local area network (VLAN) and a firewall.
3. Protect source code used in development environments by employing malware detection and protection mechanisms.
4. Remove all unnecessary sensitive information (e.g., authentication details, developer comments in HTML or JavaScript or sensitive information about the organization) before deploying source code on the production environment.
5. Use access controls to prevent development staff from making unauthorized changes to production environments.
6. Applying strict version control over development software by using configuration management, recording access in a log, and archiving old versions of software regularly.
7. Use filtering or blocking methods to prevent malicious mobile code from being downloaded into development environments.
8. Use integrity-checking software and configuration management tools to protect source code in development environments (including software under development, business information used in the development process, and important system documentation).
9. If access to externally-generated application source code is not possible, maintain a copy of the code in [escrow](/library/glossary/G99/) by a trusted external party. Verify with the third party and software supplier that the code is checked regularly to ensure it is up-to-date and works correctly.
10. Provide dedicated development endpoints on non-production networks for implementing all development-related countermeasures, and provide separate endpoints on production networks for typical enterprise tasks.
11. Prevent differences between environments. If needed, document the difference between the development/test environment and production environment to ease the release deployment process.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1383/",Complete,,P1191,Deploying software in production on the same environment as development and testing,9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Testing,T241,Verify that third party libraries use secure settings and the latest patches,10,"An entire system can become vulnerable under the following conditions:

- Using software, modules, or libraries with known vulnerabilities.
- Neglecting to patch third party libraries or software.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/937
) - http://cwe.mitre.org/data/definitions/1035
) - http://cwe.mitre.org/data/definitions/1395
)

Complete the following steps to ensure that there are no outstanding security patches for third party libraries, and that the libraries and tools are configured for the most secure settings:

1. Obtain a list of all third party libraries used by the application, including version numbers.
    - If you are not familiar with the code structure, you might need to ask a developer to compile this list for you.

2. Research vendor pages for the third party libraries to see if there are any outstanding security vulnerabilities.

    This test __fails__ if there are outstanding security vulnerabilities without any workarounds.

3.  Research vendor pages for the most secure settings of the libraries, or any weaknesses reported caused by misconfiguration of the tools/software.
    - Check the system settings.

    This test __fails__ if they are different from recommended settings.

__Note__: If vulnerability information is unavailable from the vendor, consider using a third party service such as the Common Vulnerability Exposures (CVE) database to research if there are known vulnerabilities for the third party libraries. The following sources can be used to locate security advisories and details about required patch levels for most commonly available products/libraries:

- [Security Focus Vulnerability Database](http://www.securityfocus.com/vulnerabilities) (where advisories are categorized by vendor > Product > Version)
- [National Vulnerability Database (NVD)](http://web.nvd.nist.gov/view/vuln/search).
- [Common Vulnerability Enumerator (by MITRE Foundation)](http://cve.mitre.org/cve/).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T241/",Incomplete,Test:TRH,P728,Insufficient patching or use of insecure third party software/libraries,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Changes to servers/frameworks and/or configuration (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Testing,T2123,Verify that Android Security Provider gets checked to be up-to-date,4,"Android relies on a security `Provider` to provide secure network communications. However, from time to time, vulnerabilities are found in the default security provider. If you do not update a device's security provider, your application would be exposed to these vulnerabilities.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/1035
)

Use the following guidelines for verifying that the network communication security provider is updated:

- Verify that `installIfNeeded()` is called as part of the app's startup process.
- Verify that `GooglePlayServicesRepairableException` is caught and handled properly by informing the user to update/enable Google Play services.
- Verify that `GooglePlayServicesNotAvailableException` is caught and handled properly by informing the user to update/enable of Google Play services. 
- Verify that the application is terminated upon unsuccessful execution of `installIfNeeded()` method.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2123/",Incomplete,,P1535,Lack of Verification of Up-to-date Android Security Provider,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)"
Architecture & Design,T340,Use an account and identity management system,7,"Users can access data or perform actions without authorization when access control checks are not applied consistently, or at all. This can lead to a wide range of weaknesses that can cause information exposure, denial of service (DoS), and the execution of arbitrary code.

Granting privileges directly to users instead of assigning privileges at the group or role level increases the complexity of access management as the number of users grows. High access management complexity may increase the opportunity for a principal to inadvertently receive or retain excessive privileges.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/285
) - http://cwe.mitre.org/data/definitions/732
) - http://cwe.mitre.org/data/definitions/862
) - http://cwe.mitre.org/data/definitions/863
) - http://cwe.mitre.org/data/definitions/935
)

Develop, set up, or use an account management system that enables the organization of user accounts, as well as service accounts (non-human accounts for software processes and devices that use the system).

Such a system provides the capability to:

- Add, remove, disable, modify and activate accounts in accordance with organization-defined procedures or conditions.
- Identify and select the types of accounts used to support organizational mission/business functions.
- Assign account managers for accounts.
- Manage authenticators and combinations of authenticators, such as passwords, tokens, symmetric keys, private keys, biometrics, physical keys, and key cards.
- Define roles or groups of accounts (if applicable), and establish conditions for membership.
- Assign permissions to individual accounts, to roles, or to groups of accounts.
- Manage approvals by organization-defined personnel or roles when a request to create accounts is received.
- Monitor the use of accounts.
    - Verify the user identity before modifying any authentication factor.
- Notify account managers within a time-period proper for each situation when:
    - Accounts are no longer required.
    - Users are terminated or transferred.
    - Individual information system usage or need-to-know changes for an individual.
- Authorize access to the information system based on:
    - A valid access authorization.
    - Intended system usage.
    - Other attributes as required by the organization or associated missions/business functions.
- Review accounts for compliance with account management requirements with a frequency mandated by your organization.
    - Implementing an automatic report generation mechanism may help with the reviewing process.
- Establish a process for reissuing shared/group account credentials (if deployed) when accounts are removed from the group.
- Train users about security practices that will keep their accounts safe. This includes choosing strong authentication factors, protecting passwords, avoiding password reuse, and avoiding phishing attacks.

- Deny all access by __default__.

__Note__: Default authenticators (passwords) that are used for installation of the system should be modified after the first installation. Unused default accounts that are only necessary for installation should be removed after the first installation of the system.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T340/",Incomplete,,P182,Improper Access Control (Authorization),6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Generic services (Hidden Answer) AND
• Has authentication (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Generic services (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• Has authentication (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• Has authentication (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Has authentication (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Has authentication (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Has authentication (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Development,T189,Minimize the use of unmanaged (native) code,8,"When a managed application, such as one written in Java or .NET, makes calls to unmanaged (native) code, the application is exposed to weaknesses in that code, even if those weaknesses cannot occur in a managed environment.

Many safety features that programmers may take for granted simply do not apply to native code. The languages used to implement native code may be susceptible to buffer overflows and other security vulnerabilities. Native code is not protected by the security features enforced by the runtime environment, such as strong typing and array bounds checking.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/633
)

Use the following guidelines when using *unmanaged code*:

Unmanaged code, sometimes referred to as *native code*, is the code that executes outside of a managed runtime system.

* Whenever possible, replace the functionality of unmanaged code with a managed equivalent.
* Use a managed wrapper function that exposes underlying unmanaged code.
    * Sanity-check and scrub all data sent to / from the unmanaged code.
* Ensure the latest security updates have been applied to the unmanaged code.
* Ensure in unmanaged code, memory is securely allocated, freed and used.

There are two important reasons why *unmanaged code* must be avoided:

* Contrary to applications that run within a managed environment, such as those written using Java and .NET, *unmanaged code* is not protected from serious vulnerabilities that include buffer overflows and memory corruption.
    * Attackers can leverage these vulnerabilities to inject and execute arbitrary code on a target system.
* *Unmanaged code* may execute within a different threading model than the managed code.
    * In this situation, the performance of such an application will degrade and be much more susceptible to denial of service attacks.

### Discover and remove illegal syscalls in Android O

Rework your application to avoid calling illegal syscalls.

In Android O, the system crashes an application that uses an illegal syscall. This is due to Android O applying a Secure Computing (SECCOMP) filter to all apps. The SECCOMP filter is installed into the *zygote* process, from which all Android applications are derived. The syscalls allowed by SECCOMP are:

* All the syscalls exposed through bionic (see below for more information). This list can be found [here](https://android.googlesource.com/platform/bionic/+/a89864a/libc/SYSCALLS.TXT).
* Syscalls that permit Android to boot.
* Syscalls used by popular Android apps for the sake of backward compatibility.

On the other hand, Android O's SECCOMP blocks certain syscalls such as swapon/swapoff because they are implicated in previous security attacks, and the key control syscalls because they serve no use in apps. The SECCOMP filter blocks 17 of the 271 syscalls in arm64, and 70 of the 364 syscalls in arm.

####What is SECCOMP?
SECCOMP is a computer security tool built in Linux and consequently Android. SECCOMP allows processes (apps in Android) to enter a secure state in which they cannot access syscalls except for `read` and `write` (from/to open file descriptors), `exit()`, and `sigreturn()`. Any other syscall causes the process to terminate using the `SIGKILL` and `SIGSYS` calls.

####What is bionic? 
Bionic is a standard C runtime library for Android. It includes `libc`, `libm`, `libpthread`, and `libdl`.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T189/",Incomplete,,P730,Direct Use of Unsafe Unmanaged Code,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Language and Framework > Programming Language > Java AND
• New transactions / use cases (Hidden Answer)"
Activities,T1920,Conduct security architecture and design reviews before starting code development,8,"Lack of security architecture and design activities result in insecure information systems.

Use the following guidelines for establishing effective security architecture and design reviews:
Use a defense in-depth approach to design the security architecture of the information and information systems.

- Define security-relevant hardware, software, firmware, and common security services
- Develop a top-level conceptual security architecture for the business risk, including information, access control, incident response, and application security.
- Define physical architecture and map with conceptual security architecture covering platform, hardware, network, file, database, and server security
- Develop component architecture and map with physical architecture complying with security standards.
- Define operational security architecture covering configuration, patch management, logging, monitoring, change management, and security testing
- Ensure the formal top-level security architecture and design specifications are consistent with the information security policy, standards, and procedures.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1920/",Incomplete,,P1432,Lack of security architecture and design activities,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Testing,T2140,Test that APIs do not expose sensitive information,7,"Information exposure can be resultant or primary. Resultant exposure includes path disclosure in a PHP script error, and primary exposure includes timing discrepancies in crypto. Because there are many types of weaknesses that lead to information exposure, their severity can range widely depending on the type of information that is revealed.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/200
) - http://cwe.mitre.org/data/definitions/201
) - http://cwe.mitre.org/data/definitions/215
) - http://cwe.mitre.org/data/definitions/526
)

Test that only legitimate data is exposed through APIs. 

In particular, ensure that responses from APIs match your customers' needs and there is no excessive information in the response. Review if APIs return any sensitive data and [PII](/library/glossary/G8/), and make sure these responses do not pose any security risk.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2140/",Incomplete,,P96,Information Exposure,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Application General > Components > Components In Development > Web service AND
• Changes to servers/frameworks and/or configuration (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Activities,T1370,Identify and track common software weaknesses and threats,10,"Software can be a target for many attacks which can go unnoticed until a major compromise happens. To reduce the risk of a high-impact vulnerability being exploited, it is important to proactively identify and assess software threats and vulnerabilities, implement mitigation and controls based on priority, and have a feedback loop that learns from these identified vulnerabilities and prevents future occurrences.

Follow these guidelines to identify and assess common software weaknesses:

1. Complete the SD Elements project survey to identify common software design weaknesses and threats relevant to your application, such as CWE, OWASP Top 10, and SANS Top 25.
2. Review internal sources for common software vulnerabilities (such as previously known design weaknesses) and solutions. Add relevant vulnerabilities as customized Weaknesses and Countermeasures in the tool.
3. Create a new release project for each production release, including [Key change survey considerations](/library/glossary/G68/).
4. Schedule regular assessments to include the impact of the software changes and new vulnerabilities.
5. Make sure your instance of SD Elements is updated to the latest version. If applicable, implement [Open-source component controls](/library/glossary/G69/).
6. Review the Risk Dashboard to assess changes to the scope of risk policies and determine risk criteria.
7. Create an inventory of the assessment results and record the results and decisions after each regular assessment.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1370/",Deferred,,P1187,Lack of a process for identifying and assessing threats,9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Activities,T1921,Track and manage usage of third-party and commercial off the shelf (COTS) hardware or software,10,"Using code from untrusted sources may result in malicious code injection and intellectual protection violations. Also, lack of proper monitoring an tracking of external libraries and dependencies may leave known vulnerabilities unnoticed unless a major breach occurs.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/1395
)

Use the following guidelines to properly integrate third-party and commercial off the shelf (COTS) hardware or software components and solutions:

- Acquire components from reputable sources, check firmware signatures, and verify signed file hashes (digital signatures) to ensure the hardware and software are not modified;
- Conduct risk assessments and threat modeling (architecture review) for all solutions involving a third-party component;
- Follow the principle of least privilege in providing third-party components access to internal resources;
- Monitor (log and audit) the communication of components in isolation to ensure that they do not exhibit suspicious behavior.
- Follow upgrade recommendations for newer versions, especially when a security flaw is reported. Only update from known sources after checking the software/firmware signature;
- Securely configure third-party components, avoid using pre-configured defaults, and disable all unnecessary accounts and features. Unnecessary components include unused storage capacities, sensors, communication ports, transmitters, emailing capabilities, and messaging capabilities;
- Create a list of all components that document the component ID, vendor, revision level, capabilities, and security risks. Update this list regularly.
- Follow [open-source component controls](/library/glossary/G69/) for proper management of open-source components.
- If you are integrating third-party services into your application, follow these steps:
    - Authenticate the third-party services and use only secure channels for communication.
    - Securely remove integrations that are no longer needed.

__Notes:__

- This countermeasure will not transition to 'Complete' unless its corresponding scan is completed with __zero 'High' and zero 'Critical' findings__.
- In addition, if this countermeasure is transitioned to 'Complete', it will __reopen if a scan has not been run with its results imported into SD Elements within its predefined time threshold__.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1921/",Incomplete,,P1433,Lack of third-party software code or dependencies management,10,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Development,T404,Avoid setting broad paths and domains on session cookies,4,"When setting a session cookie, we can specify values, such as the name and value of the cookie, as well as its path and domain. The domain that is specified should be the same or a parent of the original domain that the response comes from.

For example, if we have sent a request to _mydomain.domains.com_, the website can request setting the cookie to _domains.com_. In that case, the cookie values will be sent along with any request sent to _domain.com_ and not only _mydomain.domains.com_. 

Therefore a page on _anotherdomain.domains.com_ will also have access to that cookie (both for reading or modification) which opens the door to various vulnerabilities, such as the ones enabled by cross site scripting on _anotherdomain.domains.com_. Similarly if the path is set to ""/"", the cookies are available to the entire domain rather than a particular directory on the domain.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/79
) - http://cwe.mitre.org/data/definitions/811
)

- When setting cookies, restrict the path and domain values to the minimum value that is needed.

- Avoid enabling cookies to parent domains and broad paths if it's not needed. For example, if you are setting a cookie for _A.domains.com_, do not set the domain to _domains.com_ because _B.domains.com_ will also have access to those cookies.

- If the request path is '/sales', do not set the path to ""/"", which makes the cookies available to the entire domain rather than a particular directory ('/sales') on the domain.

- Every time that you write a session cookie, you can specify values such as the name, value, as well as path and domain. The domain that is specified should be the same, or a parent of the original domain that the response comes from.

- Avoid setting a broad domain or path.
    - For example, if we have sent a request to _mydomain.domains.com_, the website can request setting the cookie for _domains.com_.
    - In this case, the cookie values will be sent along with any requests to _domain.com_, and not only _mydomain.domains.com_.
    - Therefore, a page on _anotherdomain.domains.com_ will also have access to the cookies (both for reading or modification).
    - Similarly, if the path is set to ""/"", the cookies are available to the entire domain rather than a particular directory on the domain.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T404/",Incomplete,,P767,Setting broad domains or paths on session cookies,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Session Management > Has Session Management > Yes AND
• Changes to session management (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Session Management > Has Session Management > Yes AND
• New transactions / use cases (Hidden Answer)"
Development,T562,"Consider Doze, Standby, and battery saving limitations when developing Android applications",2,"The Android operating system limits the resources available to applications in power-saving modes, such as Standby and Doze. If the application has time-critical operations, or if it cannot safely recover from such modes, critical functions of the application can be threatened, especially those that need to be triggered at specific times.

Follow these guidelines to secure the application in Doze/Standby or battery saving modes:

- Identify time-critical functions of the app, and develop those functions in a way that is not affected by those modes.
    - Android offers two types of power saving modes: [Doze and Standby](https://developer.android.com/training/monitoring-device-state/doze-standby.html).
    - The application goes to Doze mode after being idle for a significant amount of time. When the device is not moving, the screen is off, and the device is not charging. 
    - Some features are limited or disabled in Doze/Standby modes, such as network access, WakeLocks, alarms, and syncs.

- The most significant security risk of Doze mode is missing time critical triggers.
    - If the app is using `AlarmManager`, use `setAndAllowWhileIdle()` or `setExactAndAllowWhileIdle()` functions instead of `setExact()` or `setWindow()`.

- Review the design of the app and check if the app depends on any of the restricted features:
    - This includes sync adapters, job schedulers, network connectivity, alarms, and WakeLocks.
- Make sure none of the time-critical functions are designed in a way that are affected by the temporary unavailability of those features.

 - In particular, determine how the unavailability of network services affects the app.
    - Try to use downstream messaging if continuous connectivity is needed. For example, try to use Google Cloud Messaging (GCM) in cases of time-critical notifications.

- In Android O and later, background services that run without active components will have execution limitations on getting implicit broadcasts, use of other services, and receiving location updates.
    - Analyze these limitations to check that they will not affect your app. See the Android documentation on [behavior changes in Android O](https://developer.android.com/about/versions/oreo/android-8.0-changes.html#all-apps).

- If Doze can affect the core functionality of the app, consider whitelisting it from power-saving.
    - See the whitelisting section in the [Android documentation](https://developer.android.com/training/monitoring-device-state/doze-standby.html#whitelisting-cases). 

While it is unlikely that the details of Doze can affect your app development, [see this video](https://www.youtube.com/watch?v=HBPQZEU_ofg) for more information about light and extended Doze mode.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T562/",Incomplete,,P802,Negative impact of Doze/Standby/Battery Saving Modes on Time-critical Functions of Android Applications,2,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)"
Testing,T2328,Verify if proper policies exist for processing sensitive personal data,10,"Lack of a process for collecting and protecting sensitive data can result in confidentiality and integrity issues for the data. Collecting unnecessary sensitive data can cause data exposure to attackers and not providing efficient protection methods can result in number of security issues including data misuse and identity thefts.

Verify whether any of the following items exists as evidence of processing sensitive personal data properly:

- Processing policies 
- Data classifications for sensitive personal information
- Scripts and procedures for handling sensitive data 
- Appropriate consents 
- Legal opinions

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2328/",Incomplete,,P1180,Lack of process for collecting and protecting sensitive data,10,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Testing,T430,Test that the number of concurrent sessions for each account is limited,4,"Managing account security is substantially harder for a system that does not provide session monitoring capabilities over concurrent sessions, or does not limit the number of concurrent sessions. In these cases, user and system accounts can be shared among multiple users (potentially unauthorized users).

In addition, in constrained environments where each user session exclusively locks limited resources, a lack of proper concurrent session control may cause resource starvation denial of service (DoS).

Test that the number of concurrent sessions for each account is properly limited based on the organization-defined requirements.

In particular test that:

- The **maximum** number of concurrent sessions is properly set for specific accounts or account types.
- The system takes **proper actions** when the limit for an account is reached.
    - For example, it terminates the previously available session, or asks the user to choose between the sessions.
- Verify the functionality of the **session control management panel** if one is implemented based on organization-defined requirements.

The session control management panel (optionally) enables users to:

- Check the details of active sessions at any time.
- Manually terminate sessions remotely.
- Track previous and current sessions history (logbook) by recording multiple client details, such as login date and time, user-agent (browser type), IP address, or idle time.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T430/",Incomplete,,P775,Lack of Concurrent Session Control,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Session Management > Has Session Management > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to session management (Hidden Answer)"
Requirements,T615,Check your mobile application's integrity and installation source,3,"Missing support for verification of the integrity of important configuration files can cause serious damage to the system if attackers can circumvent access control measures (or use an insider's help) to change the content of those files.

Similar to configuration files, there are other forms of critical data at rest, or in transit, which decide the behavior of the system and pose the same type of risk.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/353
) - http://cwe.mitre.org/data/definitions/354
) - http://cwe.mitre.org/data/definitions/494
)

Where possible inside your application, verify its installation source and integrity to make sure that the app runs only when it's installed from a trusted source and is tamper-free. In other words:

1. Check the installation source for the application. For example, in an Android environment, check whether the application is installed from a permitted source such as _Google Play Store_.
2. Create a certificate for the application (sign the application) during its release, and verify the installation certificate at runtime.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T615/",Incomplete,,P752,Missing support for integrity checks on important data and configuration files,3,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Testing,T519,Test that input validation is done on all forms of input,5,"When software fails to validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.

Also, allowing external control of system or configuration settings without validating the external input can disrupt service, or cause an application to behave in unexpected, and potentially malicious ways. This is more serious if the application runs with higher level privileges than the external users.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/15
) - http://cwe.mitre.org/data/definitions/20
)

Use the following guidelines for input validation:

- Create a comprehensive list of all input fields and input items for the application.

- For each input field or input item, identify the acceptance criteria of the input value, such as types of characters used, and length or size of the input.

- Test each input field or input item with unacceptable values to make sure it is validated correctly in the code.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T519/",Incomplete,,P95,Improper Input Validation,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• New/modified user input OR changes to how user input is used (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Testing,T657,Test that your mobile application checks its integrity and installation source,3,"Missing support for verification of the integrity of important configuration files can cause serious damage to the system if attackers can circumvent access control measures (or use an insider's help) to change the content of those files.

Similar to configuration files, there are other forms of critical data at rest, or in transit, which decide the behavior of the system and pose the same type of risk.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/353
) - http://cwe.mitre.org/data/definitions/354
) - http://cwe.mitre.org/data/definitions/494
)

Use the following guidelines for testing that your mobile app checks its integrity and installation source:

1. Install your application on a mobile device without using the default application store. Test that your application detects that it is not installed from the default source and changes its behavior according to the requirements.
2. Change the application slightly and create a new installation file. Install the application on a mobile device, and try to run it. If the application runs normally and there are no runtime integrity check errors, this test fails.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T657/",Incomplete,,P752,Missing support for integrity checks on important data and configuration files,3,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Development,T186,Use recommended settings and the latest patches for third party libraries and software,10,"An entire system can become vulnerable under the following conditions:

- Using software, modules, or libraries with known vulnerabilities.
- Neglecting to patch third party libraries or software.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/937
) - http://cwe.mitre.org/data/definitions/1035
) - http://cwe.mitre.org/data/definitions/1395
)

Regularly reviewing and addressing the security vulnerabilities reported for third party software will decrease the risk of a compromise. For any third party libraries or software being used in the system: 

- Upgrade to the latest version, or apply the latest security patches.
- Look for documentation on their security weaknesses and configure them with their most secure settings.
- Modify any of the defaults that need to be changed.
- Avoid using components with known vulnerabilities.

It is essential to review all How-tos for this countermeasure, as each one applies to a different platform or library being used.

Most third party library and framework vendors publish security bulletins for their products directly using their website. Additionally, the following sources can be used to locate security advisories and details about required patch levels for most commonly available products and libraries:

- [Security Focus Vulnerability Database](http://www.securityfocus.com/vulnerabilities)
    - Advisories are categorized by Vendor > Product > Version.
- [National Vulnerability Database (NVD)](http://web.nvd.nist.gov/view/vuln/search)
- [Common Vulnerability Enumerator (by MITRE Foundation)](http://cve.mitre.org/cve/)

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T186/",Incomplete,,P728,Insufficient patching or use of insecure third party software/libraries,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Changes to servers/frameworks and/or configuration (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Development,T275,Avoid sending sensitive data using implicit Intents or Broadcasts,6,"Any application can register to accept Android implicit Intents and broadcasts. This is done by declaring to handle them through defining intent filters in the Android manifest file. Making wrong assumptions about the channel end-point creates an opportunity for an unauthorized receiver to access sensitive data if it is sent using these methods.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/923
) - http://cwe.mitre.org/data/definitions/927
) - http://cwe.mitre.org/data/definitions/941
)

Implicit Intents and broadcasts could be received by an audience that you are not aware of. Use the following guidelines to avoid sending sensitive data using implicit Intents or Broadcasts:

- Use explicit Intents that are based on the receiver's specification of class or component to communicate sensitive information.

- Never send sensitive information in broadcasts.
    - Do not use sticky broadcasts because it is not possible to protect them by permissions.

- If you need to broadcast between your own applications:
    - Protect broadcasts by using permissions.
    - Set the protection level of permissions to signature so that it is only available to your own applications.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T275/",Incomplete,,P738,Insufficient Restriction of Intent Receivers in Android,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer) AND
• Changes to inbound/outbound interfaces (Hidden Answer)"
Requirements,T839,Follow best practices for securely using Android autofill framework,4,"The auto-complete function of a browser, operating system, or platform may cache sensitive information, such as credit card numbers. The cached data from auto-complete may be accessed by unauthorized actors, such as another application or other users on the same computer.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/524
) - http://cwe.mitre.org/data/definitions/525
)

Autofill is a new framework introduced in Android O. In this framework, views provide autofill types and values to autofill services, and the autofill services send suggestions back to the view. The view handles the autofill values that the framework sends to it and provides suggestions back to the users.

If you are building an autofill service:

- Securely store user data.
    - Avoid using shared locations and storing data in `SharedPreferences` so that data is directly accessible to other applications, such as in `MODE_WORLD_READABLE` mode.
- Encrypt values of sensitive data fields before storing them.
- Require authentication before providing access to sensitive and important data fields.

If you are using autofill services, such as by having any views that could be autofilled or share data with autofill services:

- Avoid enabling autofill on the view if the view mainly contains sensitive data.
- If you enable autofill, set `.setDataIsSensitive(true)` on all the nodes with sensitive data.
    - While the value is true by default, there is a chance that you set this to false in a loop or by a similar method.
- For more information on setting the `.setDataIsSensitive(true)` value for custom views, click [here](https://developer.android.com/guide/topics/text/autofill.html).
- For an example of setting the `.setDataIsSensitive(true)` value for custom views, click [here](https://github.com/googlesamples/android-AutofillFramework). Take note of `child.setDataIsSensitive(!item.sanitized);` in this example.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T839/",Incomplete,,P695,Information Leak Through Auto-Complete,3,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• Changes to inbound/outbound interfaces (Hidden Answer) AND
• This is a software project (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• New/modified user input OR changes to how user input is used (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Development,T45,Log potential critical security events,5,"When security-critical events are not logged properly, or when the logs are unreliable, malicious behavior can be more difficult to detect and may hinder forensic analysis after a successful attack. 

For example, failed login attempts should always be logged, and logs are unreliable if they can be modified or deleted without authorization.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/778
)

Use the following guidelines for logging security events that may be critical:

- Create a security-specific log to record **critical security events**.
- Keep these logs **separate** from other non-security logs.
- Log any errors or exceptions in the application that might help to detect intrusions, violations, and malicious activities.

Always log the following events:

* **Input validation** failures, such as protocol violations, unacceptable encodings, or invalid parameter names and values.
    * For example, log deserialization exceptions and failures, such as wrongly formatted string, unexpected incoming type, or nested arrays. These failures can be an indicator of a malicious data injection attack.
* **Output validation** failures, such as database record set mismatch, or invalid data encoding.
* **Backend TLS connection failures.**
* **Authentication** successes and failures.
* **Authorization**  successes and failures, especially for sensitive information.
 ***Permissions*** or access control changes, including updates to existing permissions.
* **Session management** failures, such as cookie session ID value modification
* **Application errors** and **system events**, such as syntax and runtime errors, connectivity problems, performance issues, third party service error messages, file system errors, file upload virus detection, and configuration changes.
* **Start-up and shut-down** processes and **logging initialization** for applications and related systems, including all starting, stopping or pausing.
* **Legal and other opt-ins**, such as permissions for mobile phone capabilities, terms of use, terms and conditions, personal data usage consent, and permission to receive marketing communications.
* **High-risk feature** usage, including the following:
    * Network connections.
    * Addition or deletion of users.
    * Changes to privileges.
    * Assigning users to tokens.
    * Adding or deleting tokens.
    * Use of systems administrative privileges.
    * Access by application administrators.
    * All actions by users with administrative privileges.
    * Access to payment cardholder data.
    * Use of data encrypting keys.
    * Key changes.
    * Creation and deletion of system-level objects.
    * Data import and export, including screen-based reports.
    * Submission of user-generated content, especially file creation.

Logging the following events is optional depending on your business requirements:

* Sequencing failure.
* Excessive use.
* Data changes.
* Fraud and other criminal activities.
* Suspicious, unacceptable or unexpected behavior.
* Modifications to configuration.
* Application code file or memory changes.

For more information about logging events and attributes, see the [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html).

__Note:__ If you log data based on user input, enforce an upper limit to the length of each log entry to make sure it is within an expected range. Otherwise, it is possible to cause a denial of service (DoS) condition by filling the target disks with log data.

The Guide to Computer Security Log Management (NIST SP 800-92) provides valuable information on how to design a suitable log and auditing system. The document describes the following types of useful logs:

 - Client requests and server responses.
 - Successful and failed authentication attempts, account changes and other account information.
 - Number of transactions in a certain period, or other usage information about an account.
 - Specific operational actions, such as application startup and shutdown, application failures, and major changes to application configurations.

### OWASP API Guidelines for Log Monitoring

Actively monitor logs with automated monitoring tools to make an effective incident response process. 

A log file should be well-formatted and contain all the important activities and major incidents to be integrated with SIEMs, other dashboards, and monitoring and alerting tools. Using automated monitoring tools helps you diagnose flaws and remediate damages faster and lower the system downtime. 

For more information about logging and monitoring, see the [OWASP API Security Top 10 Insufficient Logging & Monitoring Cheat Sheet](https://apisecurity.io/encyclopedia/content/owasp/api10-insufficient-logging-and-monitoring.htm).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T45/",Incomplete,,P619,Insufficient Logging or Insufficient Protection of Logs,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Requires security logging (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T383,Test that access to the items on the Android lock screen is adequately restricted,4,"The application does not authenticate functionality that requires a provable user identity, or consumes a significant amount of resources.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/306
)

Follow these guidelines to test that the notification area only shows public information and enables publicly accessible actions:
 
- Work with developers or application designers to figure out the types of information shown in the notification area.

- Create situations in which those notifications are shown.

- Test if any private information is shown on the lock screen.
    - This test __fails__ if any private information is shown.

- Test that custom critical actions are not enabled in the locked mode.
    - For example, it should not be possible to reply to messages in locked mode.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T383/",Incomplete,,P203,Missing Authentication for Critical Functions,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Has authentication (Hidden Answer) AND
• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Architecture & Design,T15,Centralize authorization,9,"Users can access data or perform actions without authorization when access control checks are not applied consistently, or at all. This can lead to a wide range of weaknesses that can cause information exposure, denial of service (DoS), and the execution of arbitrary code.

Granting privileges directly to users instead of assigning privileges at the group or role level increases the complexity of access management as the number of users grows. High access management complexity may increase the opportunity for a principal to inadvertently receive or retain excessive privileges.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/285
) - http://cwe.mitre.org/data/definitions/732
) - http://cwe.mitre.org/data/definitions/862
) - http://cwe.mitre.org/data/definitions/863
) - http://cwe.mitre.org/data/definitions/935
)

Use the following guidelines for centralizing authorization:

- Centralize authorization into a __single module, layer, or location__.
    - All views, application programming interfaces (APIs), and other interfaces should pass through the same security code to ensure authorization is consistent.

- Avoid hard-coding authorization logic into the presentation layers, especially for web applications.
    - This makes authorization maintenance more complex and inconsistent because it leads to a risk of duplicating authorization features.
    - In certain conditions, attackers can exploit these inconsistencies and bypass authorization checks entirely.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T15/",Incomplete,,P182,Improper Access Control (Authorization),6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Generic services (Hidden Answer) AND
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Generic services (Hidden Answer) AND
• The application is a generic server application (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application is a generic server application (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Requirements,T2122,Update Android Security Provider,4,"Android relies on a security `Provider` to provide secure network communications. However, from time to time, vulnerabilities are found in the default security provider. If you do not update a device's security provider, your application would be exposed to these vulnerabilities.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/1035
)

To protect against vulnerabilities found in the Android Security Provider, Google Play services, if enabled, automatically updates a device's security provider to protect against known exploits, once in a while. Call Google Play services' methods in your app to ensure that it's running on a device that has the latest updates to protect against known exploits.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2122/",Incomplete,,P1535,Lack of Verification of Up-to-date Android Security Provider,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)"
Development,T853,Prevent tapjacking and UI misrepresentation in Android,5,"In a class of attacks known as tapjacking, touchjacking, cloak & dagger, or UI misrepresentation in Android, an attacker displays a layer that fully or partially hides a lower hidden window using a malicious application. When a user types in a text field or clicks a button, they are actually interacting with a hidden application without being aware of it. Using the covered window behind the scene and a user's own actions, attackers can change an application's permissions, or perform a transaction.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/451
)

Use the following guidelines in Android for preventing tapjacking and other deceptions that misrepresent the UI:

- Ensure that a user sees the current window instead of a covering layer for Views with sensitive information and critical actions when they click on a button. To do this:
    - Use `.setFilterTouchesWhenObscured(true)` of [View](https://developer.android.com/reference/android/view/View.html#setFilterTouchesWhenObscured(boolean)) class to make sure that taps and touches are not passed to the View when the window is obscured by other dialogs, toasts, or visible layers.


__Notes:__ 

- Be aware that covering or overlay windows can absorb clicks or pass them through, which allows for malicious applications to trick users into clicking on a button while the click is passed on to a lower layer.
    - For more information, see [Security](https://developer.android.com/reference/android/view/View.html#Security) in the _View_ documentation for Android developers.

- You can use [TYPE_APPLICATION_OVERLAY](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_OVERLAY) in API level 26 to display important windows on top of most other windows.

- Most 'cloak and dagger' and 'UI misrepresentation' vulnerabilities are fixed after Android 7.0. Android O has made changes to [the behavior of alert windows](https://developer.android.com/about/versions/oreo/android-8.0-changes.html#all-aw).

- See the [Cloak and Dagger](http://cloak-and-dagger.org/) web page for more information about how this class of vulnerabilities is exploited in various versions of Android.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T853/",Incomplete,,P341,Tapjacking and UI Misrepresentation in Android,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T175,Test that the client validates digital certificates,7,"If a system does not follow the chain of trust of an X509 certificate to a root Certificate Authority (CA), the certificate is not trustworthy. Certificate trust comes from a chain of intermediate CAs and ends with a root CA.

A certificate chain of trust is only secure if all components of the chain are properly checked and validated. The client might completely miss or improperly follow the chain of trust, and validate host-specific data, certificate expiration, or certificate revocation. This will allow an attacker to persuade the client to trust a malicious SSL certificate, essentially allowing a man-in-the-middle attack, among others.

The certificate validation process should also include checking that the certificate is not revoked or expired (certificate's revocation status).

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/295
) - http://cwe.mitre.org/data/definitions/296
) - http://cwe.mitre.org/data/definitions/297
) - http://cwe.mitre.org/data/definitions/298
) - http://cwe.mitre.org/data/definitions/299
)

Use the following test to determine whether a server properly performs certificate validation (verification of the chain of trust), revocation-status verification, and subject authentication:

- Create an X509 certificate, such as an OpenSSL package, that is self-signed and not signed by a recognized certificate authority without defining the root as trusted on the server.

- Create a certificate with an expired date.

- Create a certificate with a key pair that its public key is not configured on the server.

- Create a certificate and include it in the certificate revocation list on the server.
    - Or use another method by which the server checks the certificate revocation status such as OCSP.

- Create a certificate with a subject that is not defined as a valid user on the server.

Use the above certificates (as client certificates) and attempt to connect to the server and authenticate.
    
    - This test __fails__ if authentication is successful in any of the cases above.

In addition, create a valid certificate and try to log into the system.

This test __fails__ if the latency introduced by the authentication unit is not tolerable for the system.

## Black-box testing

In black-box testing, you will need to use a proxy to replace the destination's TLS/SSL certificate.

1. Set up a proxy that can intercept TLS/SSL traffic by decoding the TLS/SSL. 
    - For example, the Burp Suite or Charles proxies.

2. Set the proxy to listen in on the access point, and enable TLS/SSL decoding using self-signed certificate replacement.

3. Set the client to use the proxy by choosing the access point and the port to be used.

4. If the client does not support proxies:
    - You can use a proxifier to redirect traffic through the setup proxy.
    - Or you set up transparent proxy mode and force network traffic by setting the proxy on the routing gateway of the network.

5. This test fails if the application continues to operate without giving errors and all functions continue working. 

6. Check the TLS/SSL connections logged in the proxy.
    - This test __fails__ if the connections are fully established, and data is being sent.
    - Otherwise, this test passes.

## Resources

- [Burp Suite](https://portswigger.net/burp/)
- [Charles](https://www.charlesproxy.com/documentation/)

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T175/",Incomplete,,P716,Certificate Validation Issues,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authentication > Requires Server-to-Server Authentication > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Testing,T90,Test idle session timeout,3,"Inactive and unattended sessions can allow unauthorized users to access resources without permission. If a session expiration feature is not used, accounts that have not been logged out of can be at risk of being hijacked, even if the user is only away temporarily.

The Web Application Security Consortium (WASC) explains that ""... insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.""

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/613
) - http://cwe.mitre.org/data/definitions/930
) - http://cwe.mitre.org/data/definitions/936
)

Use the following guidelines to test whether an idle session timeout feature is implemented properly:

1. Authenticate into the application or device.
2. Do not use this session for the stipulated number of minutes (such as 30 minutes).
3. Use the same session to go to an access-controlled data or function.

This test __fails__ if you can access the data or function without being logged out automatically.

**Note:** You may need to clear your cache before testing this.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T90/",Incomplete,,P504,Insufficient Session Expiration,3,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Session Management > Has Session Management > Yes AND
• Changes to session management (Hidden Answer)"
Testing,T310,Verify that WebView is securely used (Android),6,"Using a WebView component in an application without sufficient protection mechanisms, and without disabling the redundant functionality, could bring web application vulnerabilities to a client application. For example, A WebView component without the proper safeguards could make a mobile application vulnerable to cross-site scripting (XSS) and injections.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/829
) - http://cwe.mitre.org/data/definitions/830
)

Follow these steps to verify that Android WebView is securely used:

- Test that **JavaScript is disabled** when it is not absolutely needed.
    - Provide an address of a page containing JavaScript content and check the results. 

- Work with developers to verify that **caches are deleted** after sensitive data is handled.

- Work with developers to make sure that **access to local files** is prevented.

- If JavaScript is needed, and if access to local objects through JavaScript is enabled, verify that the JavaScript code comes only from your local project (**your own APK**).
 
- If a **whitelist** is implemented, test that access to any addresses outside the whitelist is denied.

-  Verify that **mixed-content policy** is set to `MIXED_CONTENT_NEVER_ALLOW` using `setMixedContentMode()`.
    - Unless there is a justification for not doing so.
    
    This test __fails__ if the policy is not set.

- Verify that **third party cookies** are disabled if they are not needed (`setAcceptThirdPartyCookies()`).

    This test __fails__ if they are enabled, but not needed.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T310/",Incomplete,,P761,Use of WebView without sufficient protection,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Mobile Technologies > Mobile Components > Uses a WebView component AND
• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Mobile Technologies > Mobile Components > Uses a WebView component AND
• Platform and Language > Platform/Operating System > Platform > Android AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Architecture & Design,T18,Make authorization decisions using full context,9,"The application does not perform enough authorization checks in its backend layers because there isn't enough information passed from its frontend layers. In this case, malicious users may have access to actions they should not have.

For example, when a web application restricts access to a page called `myapp/admin_users`, once running code leaves the view layer, it may lose the context needed to continue making authorization decisions. 

Consider the following example:

- A user calls `myapp/admin_users?action=delete`.
- The application checks if the user has permission to access the `admin_users` page.
- If the user has permission, then the code from `admin_page` hands execution over to a module called `admin_model`. 
- The `admin_model` is de-coupled from view logic, and no longer has authorization data on the user.
- The application cannot check if the user has permission to use the delete action.

Many applications do not perform any authorization checks at this stage. This allows users with access to `admin_users` to perform actions that should be restricted, such as modifying or deleting data.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/285
) - http://cwe.mitre.org/data/definitions/862
)

Authorization decisions must be made using full security context:

- Software architecture partitioned into separate layers or tiers must propagate enough contextual data so that the dependent layer can make a correct security decision.
    - For example, a web application that decouples view logic from model logic may need to access the end user's permissions so that it can make authorization decisions.
    - In this case, ensure that the model can access a user's permission data.

- In a multi-tiered enterprise application, a web service on a separate server may need contextual data about the end user to make authorization decisions.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T18/",Incomplete,,P692,Insufficient Authorization Checks Due to Lack of Information,9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Testing,T577,Verify that parameter tampering is prevented in web services,5,"When software fails to validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.

Also, allowing external control of system or configuration settings without validating the external input can disrupt service, or cause an application to behave in unexpected, and potentially malicious ways. This is more serious if the application runs with higher level privileges than the external users.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/15
) - http://cwe.mitre.org/data/definitions/20
)

Use the following guidelines to verify the prevention of parameter tampering:

- Verify that WSDL files apply constraints to its type and format.
- Verify that incoming data is restricted to strong types only to prevent parameter tampering.
- Check that the web service's schema is not loosely defined and only allows acceptable values. If not, this test __fails__.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T577/",Incomplete,,P95,Improper Input Validation,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Generic services (Hidden Answer) AND
• Protocols > Application Layer > Application Layer Protocols Used > Uses an HTTP-based protocol AND
• New/modified user input OR changes to how user input is used (Hidden Answer) AND
• This is a software project (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Application General > Components > Components In Development > Web service AND
• New/modified user input OR changes to how user input is used (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Requirements,T276,Validate the content of received Intents,6,"Not validating the content of a received intent in Android can result in undesirable consequences, since components can freely send Intents to other components when the target components are exported (When they are available to receive intents).

For example, when an Intent filter is defined in an Android application's manifest file to receive a specific type of Intent (for example a system broadcast such as low battery), any component can send an explicit Intent to that application. If the application assumes that it is receiving a low battery notification, without proper verification of the Intent's content, it will perform an unintended action.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/925
)

When an Intent filter is defined in your application to receive a specific type of Intent any component can send explicit Intents to your application. For example, this can happen for a system broadcast, such as low battery.

Therefore, the application must validate the type and content of received Intents in the following way:

- Check the Intent's action to see if it conforms to the action specified by your Intent filter.
    - For example, if you are waiting for a shut-down Intent, check if the Intent's action matches shut-down.
    - Arbitrary components cannot set Intent action to one of the system actions.

- Check the content and data received by the Intent.
    - Never use the data before a sanity check and input validation.

- Explicitly validate paths when receiving input through Intents, and when using them to access files on storage.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T276/",Incomplete,,P758,Improper validation of content of an Android Intent,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer) AND
• Changes to inbound/outbound interfaces (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• Changes to inbound/outbound interfaces (Hidden Answer)"
Development,T61,Disable default accounts or change all default passwords,9,"Third party systems such as servers and libraries may have default passwords and accounts associated with them. Users may be able to use these default accounts to authenticate into those systems.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/276
)

Use the following guidelines to disable or delete default accounts, or change all default passwords that are shipped with the product or created as part of the installation process:

- Delete user accounts that are not needed as part of the installation process, after installation, after deployment, or manually.

- Some application frameworks and other third-party packages contain databases and configuration files with default accounts and passwords. 
    - For user accounts that are needed for continuous administration or functioning of the application, ensure that all of the libraries have default passwords changed to strong alternatives.
    - Administrators may miss changing some passwords prior to deployment because configuration files aren't covered in a typical hardening process.

- The application must change, or remove, development and test accounts and passwords before they become active. 
    - Initiate a procedure through the installer that forces administrative users to change all default passwords for any accounts created and managed during or after installation.

- Don't use default authentication credentials or keys for built-in accounts to protect the storage and transmission of sensitive data.

- Implement mechanisms to prevent unauthorized access, exposure, or modification of critical assets, where limiting access is not possible. For example, due to the architecture of the solution or the execution environment in which the software is executed.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T61/",Incomplete,,P693,Use of Default Passwords and Accounts,9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authentication > Requires Server-to-Server Authentication > Yes AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authentication > Authentication Features > Authentication Method > Uses passwords AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Has authentication (Hidden Answer) AND
• Changes to authentication (Hidden Answer)"
Requirements,T151,Use cryptographically secure random numbers,7,"Applications rely on creating random values that can't be easily guessed for security reasons. If an attacker figures out these values, they can be used to impersonate a legitimate user to access sensitive information.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/329
) - http://cwe.mitre.org/data/definitions/330
) - http://cwe.mitre.org/data/definitions/1241
)

Only use cryptographically secure random numbers for security purposes. For example, session ID numbers must be random numbers or strings that cannot be guessed by attackers.

Most programming languages come with simple random number tools, such as rand() in C, which don't have enough entropy. In many cases, these Pseudo Random Number Generators (PRNGs) use a predictable value to seed a predictable sequence of random numbers, such as the system time. 

Use methods for the generation of cryptographic keys and other material (such as IVs), which have entropy that meets the minimum effective strength requirements of the cryptographic primitives and keys

Provide sufficient entropy in related processes, where cryptographic keys are generated through processes that require direct user interaction, such as through the entry of a passphrase or the use of __random__ user interaction with the software. Specifically:

 - Enforce an input domain that is able to provide sufficient entropy for any methods used for generating keys directly from a password/passphrase , so that the total possible inputs are at least equal to that of the equivalent bit strength of the key being generated (e.g., a 32-hex-digit input field for an AES128 key).

- Make sure that a work factor of at least 10,000 is applied where the passphrase is passed through an industry-standard key-derivation function, such as PBKDF2 or bcrypt, which extends the work factor for any attempt to brute-force the passphrase value. 

Most programming languages also provide cryptographically secure random number generators, which have passed security tests for pseudo-randomness. For example, the SecureRandom class in Java or Microsoft CryptoAPI. Use these libraries instead.

A typical case of using cryptographically secure random number generators could be generating v4 GUIDs. Details are mentioned in the additional requirement **ASVS Requirements - GUID v4 algorithm.** 

**Note**: The SHA1PRNG algorithm that is widely used for random number generation is no longer considered cryptographically strong and should be avoided in critical applications.

### ASVS Requirements - GUID v4 algorithm

Use a GUID v4 algorithm and a cryptographically-secure pseudo-random number generator (CSPRNG) to generate random globally unique identifiers (GUIDs), also known as universally unique identifiers (UUIDs). 

Since the GUID v4 is not cryptographically secure, it is recommended to use a CSPRNG to achieve both uniqueness and cryptographically secure pseudo-randomness. CSPRNGs are designed to meet the strict requirements for security and randomness, including unpredictability, resistance to tampering, and non-repeatability.

##References
[Recommendation for Random Number Generation Using Deterministic Random Bit Generators](https://csrc.nist.gov/publications/detail/sp/800-90a/rev-1/final)

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T151/",Incomplete,,P228,Use of Insufficiently Random Values,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > More Features > Miscellaneous > Generates random numbers AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Session Management > Has Session Management > Yes AND
• Changes to session management (Hidden Answer)"
Development,T279,Avoid dynamically loading any code without proper security considerations,8,"Some programming languages and platforms allow dynamic loading of code/classes/libraries/modules. However, dynamic loading of code increases code complexity and adds to the risks of code injection and code tampering especially when the code files are on shared resources that are accessible to other applications (for example when files are stored in a shared external storage of an Android device) or when they are transferred over an unsecured network.

A dynamically loaded module would run under your application's privileges and may perform malicious activities.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/545
)

While dynamic loading of code is possible in some programming languages and frameworks like Java and Android, it is recommended that you avoid this capability as it increases the code complexity and makes your application dependent on an external resource. However, If you have to load any module dynamically, consider the following recommendations:

- Avoid loading modules from shared locations, such as from an external storage.

- Avoid loading modules through unencrypted networks. Otherwise, files in transit would be at risk of manipulation.

- If you have to load a class from an external location, generate a signature of the class (binary) and check the signature before loading the class to verify that the integrity of the class is maintained.

### Dynamic class loading in Android

Where possible in Android applications, avoid loading dynamic classes from outside your application APK.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T279/",Incomplete,,P434,Unsecure Use of Dynamic Code/Class Loading,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > External Dependencies > External Code/Data > Uses dynamic code/library loading AND
• New transactions / use cases (Hidden Answer)"
Development,T286,"Make sure username rules are consistent among the registration system, authentication system, and application",5,"A principal in software security is the entity that is being authenticated. The Principal's name (usually user name) is communicated to other components in the system after a successful authentication. For instance, it could be stored in a session variable for web applications. The way a principal's name is handled by the authentication system should be consistent with the way it is stored and handled by other components of the application.

If the authentication system and other subsystems of the application have different methods and rules for handling usernames, the identity of the principal after authentication could be mapped to another principal. For example,if subsystems scrub usernames in different ways, a user can log in as 'supervisor<space>' and get access to the 'supervisor' account if the authentication system removes the spaces after the name before saving the authenticated name in a session variable.

This could also happen between the registration system and the authentication system. For example, the registration system may allow variations of user names which are different by spaces, while the authentication system may scrub the username after a successful login.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/287
) - http://cwe.mitre.org/data/definitions/303
) - http://cwe.mitre.org/data/definitions/930
) - http://cwe.mitre.org/data/definitions/935
)

Make sure that the user registration system, authentication system, and the application share the same rules and procedures for handling usernames. The goal is to prevent a situation in which a user registers as ""John  "", and logs into a system, but the system trims the username to ""John"" and all other subsystems give access-rights that ""John"" has to this user.

Use the following guidelines for rules and procedures that handle usernames: 

- Write down username rules adopted by the registration system, the authentication system, and the application and __make sure that those rules are consistent__. For example, usernames should consist of letters and numbers and should not have spaces or special characters at the end.

- If you are implementing an application's registration/authentication system instead of using another system, __make sure the rules above are implemented__. When registering users, validate the provided username to make sure that it conforms to the predefined rules. For example, make sure that both 'admin ' (note the space) and 'admin' cannot be registered if you do not allow spaces at the end.

- Write down __any changes that should be made to the username__ by the authentication/registration system to make it comply with the rules above. For example, identify if the authentication system would remove special characters or scrub usernames before or after authentication. __Make sure that two valid usernames in the application will not map into one single username__ after those changes.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T286/",Incomplete,,P741,Inconsistent handling of principal's name by authentication system and application,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Has authentication (Hidden Answer) AND
• Changes to authentication (Hidden Answer)"
Testing,T287,"Test that usernames are handled consistently by registration system, authentication system and application",5,"A principal in software security is the entity that is being authenticated. The Principal's name (usually user name) is communicated to other components in the system after a successful authentication. For instance, it could be stored in a session variable for web applications. The way a principal's name is handled by the authentication system should be consistent with the way it is stored and handled by other components of the application.

If the authentication system and other subsystems of the application have different methods and rules for handling usernames, the identity of the principal after authentication could be mapped to another principal. For example,if subsystems scrub usernames in different ways, a user can log in as 'supervisor<space>' and get access to the 'supervisor' account if the authentication system removes the spaces after the name before saving the authenticated name in a session variable.

This could also happen between the registration system and the authentication system. For example, the registration system may allow variations of user names which are different by spaces, while the authentication system may scrub the username after a successful login.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/287
) - http://cwe.mitre.org/data/definitions/303
) - http://cwe.mitre.org/data/definitions/930
) - http://cwe.mitre.org/data/definitions/935
)

- Try to register two slightly different usernames that are different in having special characters or spaces at the ends (You can use Firefox Tamper Data plugin to modify the username and add spaces to its end). For example, try to register 'Joe<space>' and 'Joe'. Continue to the next step.

    (Note that based on the application's username policy this could also be a failure point for this test. If the policy does not allow slightly different usernames and you have been able to create two similar usernames this test fails. For example, if you can register Joe@something.com and Joe<space>@something.com as two valid user-IDs although the requirements of the application do not allow such cases, this test fails).

- Try to log into the system using both usernames. If after authentication you have been assigned the same username in both cases this test fails.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T287/",Incomplete,,P741,Inconsistent handling of principal's name by authentication system and application,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Has authentication (Hidden Answer) AND
• Changes to authentication (Hidden Answer)"
Requirements,T295,Avoid storing unencrypted confidential data without access control mechanisms,7,"Storage devices, such as memory cards, disks, and USB devices are normally accessible by other users and processes. For example, Android external storage could be available to all the running apps. If any sensitive data is stored in clear text on these devices, attackers could potentially read the data, if proper access control mechanisms are not implemented.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/312
) - http://cwe.mitre.org/data/definitions/315
) - http://cwe.mitre.org/data/definitions/921
) - http://cwe.mitre.org/data/definitions/922
) - http://cwe.mitre.org/data/definitions/934
)

Consider the following guidelines for saving confidential data on mobile/client devices or in shared locations on the server:

- Generally there are two types of confidential data that you may identify:
    1. Application's secrets such as keys, proprietary data and other information that belongs to you (usually shared among all instances of the application)
    2. User-specific sensitive data

- Encrypt all these sensitive data before writing them into files on storage. Never use shared storage for storing unencrypted sensitive data that you don't want to be accessible by other processes.
    - You can implement wrappers for data storage and retrieval functions in order to make the encryption and decryption transparent. The major benefit of these wrappers is their ability to transparently encrypt/decrypt data. For example, your application can read or write a normal stream without knowing about the underlying cryptography. This can be most helpful when adding encryption into an existing application, as it would not require changes beyond wrapping the stream functions.

- Encrypt these sensitive data before writing storing them in the local databases.
    - For mobile devices, these platform databases could be accessible on rooted or jail-broken ROMs. Therefore your application's secrets may be accessed by a hacker that owns the device.

- Use a secure key storage mechanism (such as keystores or keychains) for storing keys, certificates, and/or passwords.

Examples of applications that need to store sensitive information are a browser that saves user passwords locally, or an offline password management solution.

### Serialized objects

Do not store serialized objects with fields that contain confidential data, in an unencrypted format. Data in serialized objects is easy to extract and read without additional protection such as encryption.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T295/",Incomplete,,P209,Cleartext Storage of Sensitive Information without Access Control Mechanisms,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T305,Verify that your application dynamically loads code only from secure locations,8,"Some programming languages and platforms allow dynamic loading of code/classes/libraries/modules. However, dynamic loading of code increases code complexity and adds to the risks of code injection and code tampering especially when the code files are on shared resources that are accessible to other applications (for example when files are stored in a shared external storage of an Android device) or when they are transferred over an unsecured network.

A dynamically loaded module would run under your application's privileges and may perform malicious activities.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/545
)

Use the following guidelines to verify that an application only loads code dynamically from secure locations:

- Work with developers, or use automatic code scanning tools, to find instances of dynamic loading of any code in the application.

- Verify that you do not load code from unverified resources.

- Verify that code is not loaded from shared locations and is not loaded through unencrypted networks.
    - For example, any external storage.

- If you have to load a class from an external location, make sure the class is signed and the application validates the signature before loading the class.

### Verifying dynamic class loading in Android

In Android applications, verify that if possible, dynamic modules are only loaded from your application's APK.


See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T305/",Incomplete,,P434,Unsecure Use of Dynamic Code/Class Loading,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > External Dependencies > External Code/Data > Uses dynamic code/library loading AND
• New transactions / use cases (Hidden Answer)"
Testing,T346,Test that the integrity of important configuration and data files are checked,4,"Missing support for verification of the integrity of important configuration files can cause serious damage to the system if attackers can circumvent access control measures (or use an insider's help) to change the content of those files.

Similar to configuration files, there are other forms of critical data at rest, or in transit, which decide the behavior of the system and pose the same type of risk.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/353
) - http://cwe.mitre.org/data/definitions/354
) - http://cwe.mitre.org/data/definitions/494
)

Follow these guidelines for testing file integrity:

- Work with developers/designers to identify the files or data fields that are protected against alteration attacks.
    - This checks their integrity.
    - These files may include configuration files that contain parameters of a controller or authentication parameters of the system.

- This test __fails__ if files that need an integrity check are ignored.
    - These files include those that are loaded from unprotected or unsecure places.
    - While there are no specific guidelines about how to choose which files to check, a strong risk assessment can help highlight which files to focus on.

- Change the content of one or more files flagged as integral, and then try to use the functions/tools that use those files.

This test __fails__ if the system proceeds without any error messages indicating the absence of integrity.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T346/",Incomplete,,P752,Missing support for integrity checks on important data and configuration files,3,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Requirements,T427,Implement previous login (access) notification,4,"Unless the application provides enough information about previous login attempts, users will not be aware of any malicious login activities related to their accounts. 

These malicious activities may include attempts at guessing passwords, or structured brute force attacks on accounts. These may lead to the prolonged use of account services by attackers without any knowledge from the account owners.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/287
) - http://cwe.mitre.org/data/definitions/304
)

For users who have successfully logged on (accessed) a system, implement a mechanism to inform them of the following details for a configurable number of previous logins (accesses):

- Date
- Time
- Location

This countermeasure applies to logins to a system component by either a human user interface or other non-human interfaces (such as devices, processes, services).

Based on an organization's policies and requirements, inform the user of:

1. The number of unsuccessful login attempts since the last successful login/access, upon successful login.
2. The number of successful logins, unsuccessful login attempts, or both during a certain period.
3. Changes to security-related characteristics/parameters of the user's account during a certain period.
    
    - Send out the notification to a trusted user-provided email address, phone number, or other contact methods.

    **Note:** For items 2 and 3, the system does not need to wait for a successful login to notify the user.


4. The organization-defined additional information, upon successful login. For example:
    - Location of the last login.
    - IP addresses from which network logins occurred.
    - Device identifiers (such as type of the operating system, browser, device).
    - Local logins.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T427/",Incomplete,,P774,Inadequate Login Activity Monitoring and Notification,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Has authentication (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)"
Testing,T428,Test that the system provides previous login (access) notifications,4,"Unless the application provides enough information about previous login attempts, users will not be aware of any malicious login activities related to their accounts. 

These malicious activities may include attempts at guessing passwords, or structured brute force attacks on accounts. These may lead to the prolonged use of account services by attackers without any knowledge from the account owners.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/287
) - http://cwe.mitre.org/data/definitions/304
)

Use the following guidelines for testing that a system has a feature to provide notifications about previous logins or accesses.

This test __fails__ if the system does not provide the following information about logins and accesses (according to the application's design choices and organizational policies):

1. The number of unsuccessful access attempts since the last successful access, when successfully logging on.

2. The number of successful accesses, unsuccessful access attempts, or both, during a defined period of time.

3. Changes to security-related characteristics/parameters of the user's account during a configurable time period. 

    - The notification is sent to a trusted user-provided destination, such as an email address or phone number.
    - **Note:** For items 2 and 3, the system does not have to wait until a successful login to notify the user.

4. Any organization-defined additional information upon successful login.
    - Such as location, IP address, and device identifier.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T428/",Incomplete,,P774,Inadequate Login Activity Monitoring and Notification,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Has authentication (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)"
Testing,T446,Verify that only standard libraries are used for cryptography,8,"Using a non-standard algorithm or an algorithm with wrong parameters is unsafe because a determined attacker may be able to break it and compromise data. Moreover, techniques to break these algorithms may be well-known and widely available.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/325
) - http://cwe.mitre.org/data/definitions/327
) - http://cwe.mitre.org/data/definitions/934
) - http://cwe.mitre.org/data/definitions/1240
) - http://cwe.mitre.org/data/definitions/1279
)

Use the following guidelines for verifying that you only use standard libraries for cryptography:

- Create a list of libraries used for cryptography, including:
    - Encryption
    - Signature generation/verification
    - Key generation
    - Message digest generation

- Verify that only standard libraries are used, and no outstanding vulnerabilities are reported for those libraries.

### Checking the cryptography libraries that are used with Android native code

Verify that unstable cryptographic libraries that are not part of NDK APIs including OpenSSL or BoringSSL cryptography libraries such as `libssl.so` or `libcrypto.so` are not used. Verify that all the cryptography libraries that are linked against, are reported to be reliable and stable.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T446/",Incomplete,,P224,Use of weak cryptographic algorithms or unsecure algorithm practices,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T897,Test if the unmanaged code is used securely,8,"When a managed application, such as one written in Java or .NET, makes calls to unmanaged (native) code, the application is exposed to weaknesses in that code, even if those weaknesses cannot occur in a managed environment.

Many safety features that programmers may take for granted simply do not apply to native code. The languages used to implement native code may be susceptible to buffer overflows and other security vulnerabilities. Native code is not protected by the security features enforced by the runtime environment, such as strong typing and array bounds checking.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/633
)

Perform the following two steps:

1. Make sure the unmanaged API prevent the callers from performing dangerous functions. For example, if the API exposes protected information, uses files, interfaces, or threading then the managed code wrapping must require the necessary permissions before entering the unmanaged code. This test fails if The unmanaged code exposes dangerous functions (API) and managed code does not prevent the caller from accessing those functions.

2. The unmanaged code must not consume parameters with untrusted sources. This can be exploited to launch buffer overflow attacks. The underlying managed wrapper must also perform the parameter validation to ensure no unintended calls can be performed. Again, if the unmanaged code consumes parameters from untrusted sources and the managed wrapper does not perform parameter validation then this test fails.

For more information see the [**secure coding guidelines for unmanaged code**](https://docs.microsoft.com/en-us/dotnet/framework/security/secure-coding-guidelines-for-unmanaged-code) by Microsoft.

### Test if illegal syscalls exist in an Android O application

If your application in Android O is crashed by the system because of an illegal syscall then this test fails. You need to rework your application and do away with the illegal syscalls shown in the logs. The log shows the illegal syscall as follows:
```
signal 31 (SIGSYS), code 1 (SYS_SECCOMP), fault addr --------
```

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T897/",Incomplete,,P730,Direct Use of Unsafe Unmanaged Code,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Language and Framework > Programming Language > Java AND
• New transactions / use cases (Hidden Answer)"
Activities,T1367,Identify and classify critical assets,9,"Not having a secure process for identifying critical assets can result in keeping valuable assets without special protection and management. This makes it difficult to prevent damages to the valuable assets such as critical information and technologies or to recover easily from incidents.

Follow these guidelines to properly classify your software assets during the SDLC:

*If your organization has an established asset classification process, adopt that process and go to __Step 4__.*

1. Establish an asset classification model or scheme that applies across the organization.
2. Use the asset classification model to structure varying levels of confidentiality of information (e.g., restricted, confidential, internal use, and public). Each classification level must have a description, taking into account the potential business impact from the loss of confidentiality of information, and examples to guide future classification efforts.
3. Describe what the handling requirements are for each level of classification at each stage of the application lifecycle, and explain how to handle conflicting classifications (e.g., use the worst case scenario or highest classification level).
4. Update the security policies and standards to state that information must protected in line with its assigned level of classification.
5. Review each significant application with its owner to assign a classification level. Ensure the owner sign-off on the agreed classification level, and that the classification level is re-assessed at least annually (and when major changes happen to the application).
6. Ensure that your asset classification process documents all [Key Asset Attributes](/library/glossary/G66/). 
7. Record your applications (assets) in an inventory or equivalent (e.g. a database, specialized software).
8. Review what applications are accessed or used by customers, service providers, and external suppliers and mark them as externally accessed or used assets on your inventory. Ensure that they understand the requirements to protect data according to its classification and your requirements. Update existing agreements as required, and ensure that new agreements contain the appropriate data handling requirements. 
9. Communicate the asset classification model and its handling requirements widely across the organization (e.g., as part of communications and training of all staff using assets).

**Note:** You can use an analysis technique to identify critical assets. Some examples include:

- Mission Impact Analysis (MIA)
- Functional Dependency Network Analysis (FDNA)
- Mission Threat Analysis
- Refer to NIST Special Publication 800-160 or in other publications such as EMVCo, ISO, or ANSI for more analysis techniques.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1367/",Incomplete,,P1172,Lack of a process for identifying critical assets,9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Activities,T1366,Identify applicable compliance regulations,10,"Not having a process for identifying applicable compliance regulation can result in having a product which is not complying with its applicable regulations and the owners of the product can get fined or go out of business by the order of authorities. 

As compliance regulation requirements are mostly made for protecting users privacy and security, it is essential to follow their guidelines and build a better secure applications.

Follow these guidelines to identify and manage applicable compliance regulations:

1. Identify and communicated legal and regulatory requirements affecting information security to [Key security and compliance stakeholders](/library/glossary/G64/).
2. Establish a process for ensuring compliance with [Key legal and regulatory requirements affecting information security](/library/glossary/G65/).
3. Discover laws and regulations that affect information security. For example, follow industry watchdog groups that provide updates on new regulations, changes to existing rules and results of litigation (case law or precedent).
4. Review the information security implications of discovered statutes and regulations, and identify potential legal/regulatory non-compliance (e.g., perform a risk assessment of compliance with laws and regulations). Re-assess regularly or when new legislation or regulatory requirements come into effect.
5. Track and remediate areas of legal and regulatory non-compliance. Involve [Key security and compliance stakeholders](/library/glossary/G64/), and update information security standards/procedures to accommodate any necessary changes.
6. Document the compliance process and request sign-off by executive management. 
7. Maintain the compliance process up-to-date (i.e., annually reviewed).

### New applicable laws and regulations

Check these items whenever you discover new laws and regulations that are applicable to your organization's privacy responsibilities:

- Subscribe to information bulletins, newsletters, mailing lists, or similar updated communications from law firms or compliance reporting services.
- Attend privacy-related events (e.g. webinars, conferences, industry gatherings, seminars, think-tanks, etc.).
- Keep records of new rules and regulations (e.g. laws and amendments to laws).
- Gather legal opinions regarding new laws and jurisdictional developments.
- Create documentation regarding internal decisions about new laws and regulations, including any implementation status or justification for declining such implementation.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1366/",Not Applicable,,P1171,Lack of a process for identifying applicable compliance regulation,10,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Activities,T1376,"Provide and maintain guidance on secure installation, maintenance, and configuration of all software components",7,"The application lacks the guidance needed for securely installing and configuring the software ranging from the security parameters and options, all the way to the information required for changing default passwords.

Provide details on how to validate the version of your software and clearly indicate for which versions of the software guidance is written.

Provide guidance on:

1) How to implement and operate the software securely.

- Detailed instructions on how to configure all available security options and parameters of the software.
- Where the software utilizes other systems for maintenance of tracking data, such as a log server, provide clear and sufficient guidance on the correct and complete setup and/or integration of the software with the log storage system. 
- Where third-party or execution-environment features are relied upon for the security of the transmitted data, provide clear and sufficient guidance on how to configure such features are included in the software implementation guidance made available to stakeholders
- Where cryptographic methods provided by third-party software or aspects of the execution environment or platform on which the application is run are relied upon for the protection of sensitive data, provide clear and sufficient detail for correctly configuring these methods during the installation, initialization, or first use of the software in the implementation guidance.

2) How to set configuration options of the execution environment and system components.

- Clear and sufficient guidance for enabling any software security controls, features, or functions where user input or interaction is required to be mapped to this control correctly.
- Clear and sufficient guidance for disabling or changing any authentication credentials or keys for built-in accounts where user input or interaction is required.
- Clear and sufficient guidance for the process of configuring the retention period of sensitive data (transient and persistent) where user input or interaction is required.
- Clear and sufficient guidance on the process of configuring protection methods where user input or interaction is required.
- When any mitigation relies on features of the execution environment, provide guidance to the software users to enable those settings as part of the install process.
- Clear and sufficient guidance for configuring authentication mechanisms where the software recommends, suggests, relies on, or otherwise facilitates the use of additional mechanisms (such as third-party VPNs, remote desktop features, and so on) to facilitate secure non-console access to the system on which the software is executed or directly to the software itself.

3) How to implement security updates.

- Inform users of the software updates, and provide clear and sufficient guidance on how they may be obtained and installed.

4) How and where to report security issues.

This guidance is necessary even when the specific setting either:

- Cannot be controlled by the software once the software is installed by the customer.
- Is the responsibility of the customer and not the software vendor. 
    - Specifically outline that identification and authentication parameters must not be shared between individuals, programs, or in any way that prevents the unique identification of each access to a critical asset.

5) Does not instruct the user to disable security settings or parameters within the installed environment, such as anti-malware software or firewall or other network-level protection systems.

6) Does not instruct the user to execute the software in a privileged mode higher than what is required by the software.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1376/",Incomplete,,P1181,"Lack of guidance on secure installation, maintenance and configuration of all software components",7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Activities,T1377,Establish and maintain a bi-directional communication channel for receiving security reports and sending security notifications,8,"Without a defined communication channel between a software vendor and stakeholders (customers, end-users, installers, etc.), the stakeholders are not notified of new critical security issues in a timely manner. This puts them at risk since they can not take proper actions (e.g., mitigate the risk before an official patch, or install the patch as soon as possible).

Also, if the notification is not detailed enough or does not provide the stakeholders with required measures they have to take, stakeholders cannot calculate the risk and react accordingly.

If there is no defined point of contact for stakeholders to report the security issues they encounter, the software vendor may miss the an issue and cannot provide a fix in a timely manner.

Follow these guidelines to establish two-way security intelligence sharing channels with vendors and the security community:

1. Establish a process to continuously gather and analyze [Cyber Threat Intelligence (CTI)](/library/glossary/G91/).
2. Collect and analyze threat-related information from a range of [internal sources of CTI](/library/glossary/G92/).
3. Establish and maintain a bi-directional communication channel, inbound from external and internal intelligence information sources and outbound to customers, installers, and other stakeholders to receive security updates and reports on security issues and recommendations.
4. Establish [CTI communication channels](/library/glossary/G93/) used to exchange security information, with guidelines for utilizing them, to all relevant stakeholders (including public users). Stakeholders may use these channels to receive security notifications or submit their security issues. 
5. Notify all stakeholders (e.g., customers, end-users, installers) promptly of the details of a new vulnerability including its potential impact and criticality, schedule of a patch release, and alternative mitigation options before fixes are ready.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1377/",Incomplete,,P1182,Lack of a communication channel for reporting security issues,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Activities,T1387,Ensure the security of products acquired through the supply chain and contractors,7,"Not having a secure process for outsourcing any part of application development can result in acquiring unsecure products and services from supply chain and contractors. This can cause number damages to security of the application including its data confidentiality and availability of the services.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/1395
)

Follow these guidelines to acquire software securely:

1. Document a standard for selecting and acquiring software, with [key third party software considerations](/library/glossary/G106/).
2. Apply the considerations above to all software acquired throughout the organization, including operating system and virtualization software, enterprise software such as CRM applications, commercial-off-the-shelf software (COTS), and security software.
3. Acquire or subscribe to software from approved suppliers by implementing [vendor controls](/library/glossary/G78/).
4. Ensure that all acquired software is supported by maintenance arrangements.
5. Obtain the adequate number and type of licenses for planned use, and keep proof of ownership of software. 
6. Test all acquired software extensively before distribution, deployment and use. Identify security deficiencies by detailed inspection, malware testing, vulnerability scanning, reference to published sources, or by participating in user/discussion groups. If possible perform penetration and vulnerability tests to help identify and resolve security weaknesses. 
7. Mitigate the risk of security weaknesses in acquired software by requesting and obtaining external [attestations from trusted sources](/library/glossary/G107/).
8. Once the software has been acquired, update the asset register with its details.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1387/",Incomplete,,P1170,Lack of a secure process for outsourcing,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Testing,T2270,Test to confirm that password policies are configurable,5,"The application does not enforce creating passwords with enough complexity, increasing the chance of a brute-force attack. These attacks use trial and error to guess account passwords and take less effort for simple passwords.

It is mandatory that users have strong passwords because an authentication feature is only as strong as its credentials.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/521
)

Use the following guidelines to test whether password policies are configurable: 

__ Try to change the password configuration.__

The test __fails__ if the system does not allow administrators to change the following settings: 

* Password complexity
* Password age and expiry (minimum and maximum)
* Password history
* Optional dictionary of words that cannot be used as passwords

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2270/",Incomplete,,P408,Password Requirements Are Weak,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authentication > Authentication Features > Authentication Method > Uses passwords AND
• Changes to authentication (Hidden Answer)"
Testing,T2276,Test to confirm that authorization and authentication controls are in place for access to resources,7,"Users can access data or perform actions without authorization when access control checks are not applied consistently, or at all. This can lead to a wide range of weaknesses that can cause information exposure, denial of service (DoS), and the execution of arbitrary code.

Granting privileges directly to users instead of assigning privileges at the group or role level increases the complexity of access management as the number of users grows. High access management complexity may increase the opportunity for a principal to inadvertently receive or retain excessive privileges.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/285
) - http://cwe.mitre.org/data/definitions/732
) - http://cwe.mitre.org/data/definitions/862
) - http://cwe.mitre.org/data/definitions/863
) - http://cwe.mitre.org/data/definitions/935
)

Follow these guidelines to ensure that the system properly enforces user authentication/authorization: 

- The system is able to identify a user that can be a human, software process, or device.
    - This test __fails__ if the system cannot identify any type of user mentioned above.

- The system is able to authenticate a user and assign roles to them.
    - This test __fails__ if the system cannot authenticate users or assign a role to them

- Per any request made to access a resource, the system should check a user's permission before processing the request.
    - This test __fails__ if the system processes the request without checking a user's permission.

_ All interfaces or pages that require authentication should have logout functionality.
    - This test __fails__ if an interface or page with authentication requirements does not have logout functionality.

- Test to confirm the use of an access control mechanism for the system, such as Role-Based Access Control (RBAC).

- Test to confirm that publicly accessible content containing nonpublic information requires authentication and/or authorization.
    - This test __fails__ if nonpublic content is publicly accessible without authentication/authorization.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2276/",Incomplete,,P182,Improper Access Control (Authorization),6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Generic services (Hidden Answer) AND
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Generic services (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Generic services (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• Changes to authentication (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T2277,Test to confirm the use of an account and identity management system,7,"Users can access data or perform actions without authorization when access control checks are not applied consistently, or at all. This can lead to a wide range of weaknesses that can cause information exposure, denial of service (DoS), and the execution of arbitrary code.

Granting privileges directly to users instead of assigning privileges at the group or role level increases the complexity of access management as the number of users grows. High access management complexity may increase the opportunity for a principal to inadvertently receive or retain excessive privileges.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/285
) - http://cwe.mitre.org/data/definitions/732
) - http://cwe.mitre.org/data/definitions/862
) - http://cwe.mitre.org/data/definitions/863
) - http://cwe.mitre.org/data/definitions/935
)

Test to confirm that the account management system is capable of organizing user and service accounts (service accounts are used for software processes and devices). This test __fails__ if the answer to any of following questions is no:

- Can the system add, remove, disable, modify, and activate accounts in accordance with the organization's requirements and procedures?
- Can the system identify and select the types of accounts in use when there is an organizational need?
- Does the system assign account managers for each account?
- Does the system control and manage authenticators that can be any combination of passwords, tokens, and cryptographic keys?
- Can the system create conditions for accounts, assign roles to them, and create groups of accounts? 
- Can the system give permissions to accounts, roles, or groups of accounts? 
- Can the system verify account creation requests based on organizational roles?
- Does the system keep track of account usage and notify account managers within a proper period of time when:
    - Accounts are no longer required.
    - Users are terminated or transferred.
    - Knowledge of individual information system usage or individual account changes is needed.
- Does the system support information access authorization based upon:
    - Valid access authorization.
    - Intended system usage.
    - Attributes as required by the organization, associated missions or other business functions.
- Can the system analyze accounts for compliance with account management requirements that adhere to an organization-defined policy? 
- Can the system create a process for reissuing shared/group account credentials (if deployed) when accounts are removed from the group?
- Are default authenticators or passwords modified after the first installation of the system?
- Are default accounts that are only used for installation removed after the installation of the system?

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2277/",Incomplete,,P182,Improper Access Control (Authorization),6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Generic services (Hidden Answer) AND
• Has authentication (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Generic services (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• Has authentication (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• Has authentication (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Has authentication (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Has authentication (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Has authentication (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Requirements,T165,Do not rely on Unique Device ID values in security controls,9,"The authentication scheme or implementation uses key data elements that are assumed to be immutable (unchangeable), but can be controlled or modified by the attacker.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/302
) - http://cwe.mitre.org/data/definitions/807
) - http://cwe.mitre.org/data/definitions/863
)

Use the following guidelines for Unique Device ID (UDID) values:

- UDIDs, such as Serial Numbers, IMEI, and ICCID might be modified by an attacker. 
    - Do not rely on their values in security controls such as authentication, authorization, or any other technical control that considers them immutable.

- A UDID as a factor of authentication provides no additional security.
    - While it does not weaken the other factors, privacy factors, as well as least access principles suggest that the UDIDs should not to be used for authentication/authorization purposes.

**Note**: There are acceptable uses for UDIDs when it comes to business needs, such as using it as a hint that a user has changed their device. These uses can be considered as long as they are not relied on for security, and the privacy risks or impacts are justified.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T165/",Incomplete,,P199,Authentication Bypass by Assumed-Immutable Data,9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Has authentication (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Has authentication (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Requirements,T612,Detect rooted devices and assess the runtime environment with the aid of SafetyNet Attestation API,4,"If your application runs in an environment that does not check the integrity of the platform, it would be vulnerable to **bootkits** installed on the platform or **modifications** to the firmware of the platform.

A bootkit is an advanced malware that tampers with a system's boot process. It changes BIOS, firmware, master boot record (MBR), volume boot record (VBR), bootloader or any part of the system involved in the boot process and injects some malicious code that loads before the operating system (OS). Since the bootkits precede the OS and their components reside completely outside of the standard file systems, they get full control over the system and are hard to detect by typical means, such as anti-malware tools run by the operating system.

Platform integrity is also important if your application depends on the features provided by the firmware on the platform, especially security controls. An attacker may modify the firmware to circumvent some security controls. For example, on a game console, attackers can flash the firmware to remove code that checks the signatures on games installed on the platform, and can consequently run non-genuine versions of the game.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/353
)

At runtime in your application, check if the following requirements are satisfied for the Android environment that your application runs in:

- The application is not running in an emulator. 
- The device running your application has passed Android compatibility tests.
- Your application has not been modified by an unknown source.
- Your application is not running on a rooted device or a device with a custom ROM.
    - For more details on root detection, read the __Android: Root or Custom Build Detection__ Additional Requirements for this countermeasure.
- Your application is not debuggable.

For checking whether the application is debuggable, use [FLAG_DEBUGGABLE](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_DEBUGGABLE).

For the rest of the above items, use SafetyNet Attestation API. Android Framework provides a SafetyNet Attestation API that helps you assess the APK information of your application and the security and compatibility of the Android environment your application runs in. SafetyNet API examines both software and hardware information on the device.

To use SafetyNet API, follow these steps:

1. Create a Google Play Services API client.
2. Add SafetyNet API to the client.
3. Connect to Google Play Services API.
4. Obtain a single-use token (nonce).
5. Request a compatibility check from SafetyNet API using the nonce.
6. Read the compatibility check response.
7. Verify the compatibility check response and react accordingly if the integrity of the device is not approved.

For more information about using SafetyNet API, as well as code samples, see [Android's SafetyNet documentation](https://developer.android.com/training/safetynet/index.html).

### Android: Root or Custom Build Detection

In Android environment, detecting rooted devices and custom builds/ROMS is important to attest the integrity of the platform. There are many different ways of root detection on Android other than using the SafetyNet API. It is important to use as many of these methods as possible to reduce the risk of application modding.

# Checking existing files
One of the very common methods for root detection is checking the filesystem for the existence of files that are typically found on rooted devices.

Check for app packages of common rooting tools such as Superuser:

```
/system/app/Superuser.apk
```

Also, check for binaries that are usually installed once a device is rooted. For example, check for `su` binary at different locations. `su` is usually found in the following locations:

```
/sbin/su
/system/bin/su
/system/xbin/su
/system/xbin/busybox
/data/local/su
/data/local/xbin/su
```

# Executing `su`
Execute `su` using `Runtime.getRuntime.exec()`. This will throw an `IOException` if `su` is not in `PATH`. Also, try to execute other tools that are typically found on rooted devices like `busybox`.

# Checking running processes
`su` on Android depends on a background process called `daemonsu`. Check for the presence of this process. Its existence is a sign of a rooted device.

Running processes can be enumerated through:

- `ActivityManager.getRunningAppProcesses()` API, or
- the `ps` command, or
- walking through the `/proc` directory

#Checking installed app packages
Check for the existence of application packages that are normally found on rooted devices like:

```
com.thirdparty.superuser
eu.chainfire.supersu
com.noshufou.android.su
com.koushikdutta.superuser
com.zachspong.temprootremovejb
com.ramdroid.appquarantine
```

The Android package manager can be used to obtain a list of installed packages.

# Checking for writable partitions and system directories
In a normal Android environment, system and data directories are usually mounted as read-only. However, on a rooted device, you sometimes find them mounted with read-write permission.

Check for the permissions of system directories by trying to create a file in them.

# Checking `BUILD.TAGS`
One method for checking if the firmware is built customarily is to check for the existence of `test-keys` under `BUILD.TAGS`. If it exists, it is an indication of a custom Android image. Stock Android ROMs from Google are normally built with `release-keys` tag.

# Checking for OTA certificates
Stock Android builds normally use Google Over-The-Air (OTA) certificates for updating Android. Missing OTA certificates usually means that there is a custom ROM installed which is updated through other means. Check for the existence of:

```
/etc/security/otacerts.zip
```

Reference: [OWASP Mobile Security Testing Guide](https://www.owasp.org/index.php/OWASP_Mobile_Security_Testing_Guide)


See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T612/",Incomplete,,P809,Not Checking Boot/Platform Integrity,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• Changes to servers/frameworks and/or configuration (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Testing,T95,Test for the absence of 'Remember Me' features,4,"Inactive and unattended sessions can allow unauthorized users to access resources without permission. If a session expiration feature is not used, accounts that have not been logged out of can be at risk of being hijacked, even if the user is only away temporarily.

The Web Application Security Consortium (WASC) explains that ""... insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.""

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/613
) - http://cwe.mitre.org/data/definitions/930
) - http://cwe.mitre.org/data/definitions/936
)

Use the following guidelines to test for persistent sessions:

1. Inspect the login page for any ""remember me"" feature.

    ![image of remember me](https://preview.sdelements.com/static/screenshots/exampleRememberMe.jpg)  
*Example of a remember me functionality*  

2. Determine if this feature causes a user to stay logged in for a long time. This test __fails__ if the ""remember me"" feature causes a user to not be logged out of a session after a long time, or after closing the browser.

3. If remember me feature is needed, try to visit critical parts of the application such as pages for the change of passwords, change of profile, or pages for viewing personal data. If the application does not require re-authentication for performing those actions, this test fails.


See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T95/",Incomplete,,P504,Insufficient Session Expiration,3,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Session Management > Has Session Management > Yes AND
• Changes to session management (Hidden Answer)"
Requirements,T156,Validate certificate and its chain of trust properly,7,"If a system does not follow the chain of trust of an X509 certificate to a root Certificate Authority (CA), the certificate is not trustworthy. Certificate trust comes from a chain of intermediate CAs and ends with a root CA.

A certificate chain of trust is only secure if all components of the chain are properly checked and validated. The client might completely miss or improperly follow the chain of trust, and validate host-specific data, certificate expiration, or certificate revocation. This will allow an attacker to persuade the client to trust a malicious SSL certificate, essentially allowing a man-in-the-middle attack, among others.

The certificate validation process should also include checking that the certificate is not revoked or expired (certificate's revocation status).

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/295
) - http://cwe.mitre.org/data/definitions/296
) - http://cwe.mitre.org/data/definitions/297
) - http://cwe.mitre.org/data/definitions/298
) - http://cwe.mitre.org/data/definitions/299
)

Validate all certificates and their chains of trust, such as X509 certificates. Any application using __SSL__ or __public key infrastructure (PKI)__ based authentication must do the following at the very least:

 * Follow the chain of trust for certificate validation.
    * Verify that each node in the chain has a valid certificate by itself and has the authority to sign the child certificate.

 * Validate host specific data of certificates to make sure it matches the expected destination.
    * For instance, make sure the Common Name matches the expected value.

 * Validate the expiry date of the certificate.

 * Check certificate revocation.
    * Use certificate revocation lists (CRLs) or online certificate status protocol (OCSP).
 
 * Re-check certificate revocation periodically after the initial revocation check. 
    * You can do this by either:
        * Re-checking the revocation list for every connection (avoid caching).
        * Setting the cache to expire after a period of time (one week, or 24 hours in more security-sensitive environments).
 
 * Do not accept or initiate SSL connections for which the certificate misses one or more of the validation steps above.

__Note__: Authentication/SSL systems should be designed and implemented in a way that certificate validation, revocation status verification, and user authentication do not impose impeding latency on the system.

Libraries like OpenSSL or operating system interfaces might automatically perform certificate validation.

 * Ensure you review the specifications of the specific SSL library/interface and make sure that proper settings/parameters are used to activate all the checks listed above.

 * Handle all potential warnings and errors that might arise from any of these checks failing.

 * Use the latest versions of your library and check for vulnerabilities in the specific version of the library/interface that you are using that might be used to bypass the validation process.

As the number of certificate authorities grows, there is more and more risk associated with certificates. Forging valid certificates by compromised signing authorities and social engineering for impersonation during the certificate issuing process are becoming increasingly common. To reduce the risk associated with certificate-based trusting you may wish to include the following additional measures:

 * Only use reputable signing authorities for your own certificates.

 * Ensure that clients validate the specific signing authority your organization uses.
    * For example, by hard-coding and checking the fingerprint of the signing authorities.
 
 * Only use Extended Validation (EV) certificates and limit accepted certificates to EV certificates on the client side.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T156/",Incomplete,,P716,Certificate Validation Issues,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authentication > Requires Server-to-Server Authentication > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Testing,T405,Verify that broad paths and domains are not set on session cookies,4,"When setting a session cookie, we can specify values, such as the name and value of the cookie, as well as its path and domain. The domain that is specified should be the same or a parent of the original domain that the response comes from.

For example, if we have sent a request to _mydomain.domains.com_, the website can request setting the cookie to _domains.com_. In that case, the cookie values will be sent along with any request sent to _domain.com_ and not only _mydomain.domains.com_. 

Therefore a page on _anotherdomain.domains.com_ will also have access to that cookie (both for reading or modification) which opens the door to various vulnerabilities, such as the ones enabled by cross site scripting on _anotherdomain.domains.com_. Similarly if the path is set to ""/"", the cookies are available to the entire domain rather than a particular directory on the domain.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/79
) - http://cwe.mitre.org/data/definitions/811
)

Follow these guidelines to verify that the paths and domains of the cookies are not broader than required:

- Find the lines of code that set session cookies.

- Check if a path or domain is specified for the cookies.
    - If a path or domain is set, verify that the domain and path are not overly broad.
    - The path and domain must only enable the justifiable paths and domains to access the cookie.
    - For example, if the domain is _A.domains.com_, the domain must not be set to _domains.com_ without proper justification.

This test __fails__ if the domain and name are too broad.

You can also use the browser tools to check the path and domain of cookies (such as Chrome Developers tools).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T405/",Incomplete,,P767,Setting broad domains or paths on session cookies,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Session Management > Has Session Management > Yes AND
• Changes to session management (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Session Management > Has Session Management > Yes AND
• New transactions / use cases (Hidden Answer)"
Activities,T1894,Perform a vendor security assessment,9,"Without a proper vendor security assessment, a software vendor may be able to introduce various intentional or unintentional vulnerabilities, backdoors, or sensitive data disclosure to the software.

Follow these guidelines to perform a vendor security assessment:

1. Evaluate what type of data will be accessed by the vendor. Classify the data according to its importance to the business, and security risk. If a complete data or asset classification model is in place, list the security requirements for that type of data class. These requirements need to be translated into requirements for the vendor to comply.
2. Request recent independent evaluations of the vendor's security controls, such as a risk assessment, compliance audit report, or security attestation certificate. Use these sources as inputs for further assessment of the current level of the vendor's risk and its service or solution.
3. Perform a risk assessment of vendor using a [standard vendor security questionnaire](/library/glossary/G111/) to evaluate the overall level of security and risk. If the risk is low or deemed acceptable, proceed with the vendor selection. If an unacceptable risk is identified or if you are unsure, perform a detailed risk assessment of the vendor solution using a Threat and Risk Assessment (TRA) methodology.
4. Identify all significant risks, gaps, and vulnerabilities. Rank them based on their likelihood of being exploited, and potential impact.
5. Work with the vendor directly, or indirectly via the business or procurement function liaising with the vendor, to address all risks identified.
6. Once all identified risks have been mitigated to an acceptable level, establish [contract clauses](/library/glossary/G110/) to ensure that the vendor will maintain their current level of security (or better) over time, and inform the organization if a data breach is detected or suspected. 
7. Establish standard security clauses to be included in all supplier or vendor agreements. 
8. Document all remaining and residual risks in a risk register, and ensure that they are signed off by a senior business manager. Monitor these risks and review them annually.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1894/",Incomplete,,P1437,Lack of vendor security assessment,9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Deployment,T2425,Encrypt Kinesis streams on the server (Amazon Kinesis Data Streams),8,"Many communication channels can be sniffed, or eavesdropped on, by attackers during data transmission. For example, unencrypted network traffic in clear text can be sniffed by any attacker who has access to a network interface. This makes unsecured communication channels easy for attackers to exploit.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/311
) - http://cwe.mitre.org/data/definitions/319
) - http://cwe.mitre.org/data/definitions/930
) - http://cwe.mitre.org/data/definitions/934
) - http://cwe.mitre.org/data/definitions/1028
) - http://cwe.mitre.org/data/definitions/1029
)

Encrypt all Kinesis stream data with server-side encryption:

1. Select the stream in the Data Streams console.
2. Choose the __Configuration__ tab.
3. In the Encryption section, choose __Edit__.
4. Turn on the __Enable server-side encryption__ setting.
5. Choose the type of key:
    - Select __Use AWS managed CMK__ to use a key that Kinesis generates automatically and manages transparently. This choice simplifies application setup, because there's no need to configure key policies as long as the principals that need to access the Kinesis stream are part of the same AWS account.
    - Select __Use customer-managed CMK__ to use a KMS key that you own. This choice gives you the ability to revoke keys in the case of an intrusion, and to control other aspects of key policy. It also allows you to configure access for principals from another AWS account. However, more policy setup is required. Your Kinesis stream producers must have the `kms:GenerateDataKey` permission and your Kinesis stream consumers must have the `kms:Decrypt` permission. If you use a customer-managed key, make sure to verify that your application is successfully able to write and read to the stream. You can verify success by looking at the metrics `PutRecord.Success`, `PutRecords.Success`, and `GetRecords.Success` in CloudWatch.
6. Choose __Save changes__.

## Note
Kinesis encrypts data automatically, before it writes it to the Kinesis stream storage layer. You should __not__ perform manually encryption and decryption in the application layer unless absolutely necessary for an exceptional business case.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2425/",Incomplete,,P216,Clear Text and Unencrypted Transmission of Information,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure’s applicable rules and Project Survey criteria were met but it will be removed once the New Content Updates have been accepted.

"
Testing,T2427,Verify Kinesis streams are encrypted on the server (Amazon Kinesis Data Streams),8,"Many communication channels can be sniffed, or eavesdropped on, by attackers during data transmission. For example, unencrypted network traffic in clear text can be sniffed by any attacker who has access to a network interface. This makes unsecured communication channels easy for attackers to exploit.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/311
) - http://cwe.mitre.org/data/definitions/319
) - http://cwe.mitre.org/data/definitions/930
) - http://cwe.mitre.org/data/definitions/934
) - http://cwe.mitre.org/data/definitions/1028
) - http://cwe.mitre.org/data/definitions/1029
)

Verify all Kinesis stream data are protected with server-side encryption:

1. Select the stream in the Data Streams console.
2. Choose the __Configuration__ tab.
3. In the Encryption section, verify the __Enable server-side encryption__ setting is enabled.
5. As the type of key:
    - __Use AWS managed CMK__  should be selected to use a key that Kinesis generates automatically and manages transparently. 
    - __Use customer-managed CMK__ should be selected to use a KMS key that you own. 


## Note
Kinesis encrypts data automatically, before it writes it to the Kinesis stream storage layer. Verify __not__ perform manually encryption and decryption in the application layer unless absolutely necessary for an exceptional business case.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2427/",Incomplete,,P216,Clear Text and Unencrypted Transmission of Information,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure’s applicable rules and Project Survey criteria were met but it will be removed once the New Content Updates have been accepted.

"
Testing,T424,Test that copying is disabled on text fields with sensitive data (Android),4,"Sensitive data copied onto the clipboard can be accessed by other applications which normally can read the content of shared clipboard of Android devices.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/276
) - http://cwe.mitre.org/data/definitions/732
)

Follow these steps to test that copying to the clipboard is disabled for Android text fields with sensitive data:

1. Select a text field that handles sensitive data and is supposed to be protected against clipboard leaks.

2. Enter text into a text field. A text field that handles confidential data is best, such as a password text field.

3. Long-press and try to select/copy the text onto the clipboard. This should not be possible.

This test __fails__ if you can copy text from a password field onto a clipboard.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T424/",Incomplete,,P771,Leak of sensitive data through Android clipboard,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Development,T410,Manage use of Android third-party keyboards with sensitive data,4,"Android third party keyboards can capture the entire text that is entered using them, including sensitive data and user passwords. They can then send this data over the network with sufficient permissions. Most keyboards ask for network permissions to improve user experience. Therefore, it is not uncommon for a keyboard to request Internet access permission.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/200
) - http://cwe.mitre.org/data/definitions/201
)

Use the following guidelines for managing sensitive data with Android third-party keyboards:

- Check the active keyboard whenever sensitive data is entered into an Android device. For example, when entering data into an editable text box.

- If the keyboard is not an established and well-known Android keyboard (in an allowlist), disable the action or show a warning to make the user aware of the risks.

See the How-to for this countermeasure for more details.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T410/",Incomplete,,P770,Leak of sensitive data through Android third party keyboards,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Requirements,T447,Secure Android in-app purchases,3,"The software does not sufficiently verify the origin or authenticity of data in a way that causes it to accept invalid data.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/345
) - http://cwe.mitre.org/data/definitions/347
)

Follow these guidelines to secure use of in-app billing services:

1. ___Verify the signature provided with the response on the server:___ Google play's Developer Console, assigns an asymmetric key pair to each application (The private key will always remain with Google. You can see the application's public key through Developer Console application's details -> Services & APIs -> License Key. Read ['Securing Your Application'](http://developer.android.com/google/play/billing/billing_integrate.html#billing-security) for more detail). Google Play signs the response string (in JSON format) that is sent to your application. You need to send the signature along with the data to the server (if the application has a server component) to check the signature on the server and take the next steps only if the signature is valid (see the `verify()` method in `Security.java` that is shipped as sample (TrivialDrive) with `IInAppBillingService.aidl` and SDK package from Google. Change the function to do the verification on the server if possible).

2. ___Use a secure channel with a reliable handshake:___ Use a secure channel between the application and the server. For example, use a secure TLS/SSL channel.

3. ___Make the purchased items uniquely available to the application:___ Do not put the purchasable items and content in the APK file without proper security protection. It is recommended to put them on the server and download them to the application only after they are purchased. After you copy the content to the client, use an application-specific method to encrypt the content and save them on storage. For example use the UUID (Universal Unique Identifier) of the application with a key to encrypt data.

4. ___Verify the Order Id and the Developer Payload values:___ You provide a developer payload value with your request. When the response is returned to the application the payload value (developerPayload argument) and the unique ID of the order (orderID argument) are sent to your application (see the [In-app Billing Reference](http://developer.android.com/google/play/billing/billing_reference.html)). Verify these values along with the signature (on the server). 

5. Use secure random generators (`SecureRandom`) if you generate a random number for parts or whole of developerPayload. 

6. ___Obfuscate your application and protect the keys:___ Android documents recommend obfuscating the application. However note that any obfuscation method can be reversed, so while using this method do not solely rely on obfuscation. See this section on [obfuscating the code](http://developer.android.com/google/play/billing/billing_best_practices.html#obfuscate) and [ProGuard page](http://developer.android.com/tools/help/proguard.html). Also do not hard-code the public key in the application or leave it unprotected. If you check the signature on the server, you will not need the public key saved on the client.

7. ___Design and implement a scheme for disabling content:___ Design and implement means to disable any content that is purchased but revoked for any security or piracy reasons afterwards.

Read [this page](http://developer.android.com/google/play/billing/billing_best_practices.html) along with the above recommendations before starting to secure in-app-purchases in your application.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T447/",Incomplete,,P244,Insufficient Verification of Data Authenticity,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Development,T564,Follow best practices for sharing data between Android applications,6,"Writing sensitive data in shared locations or sharing data/files with a broader audience than is required can increase the risk of unintended data disclosure and data theft. For example, this risk is present when local applications on a device have access to shared locations or files.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/668
)

Follow these guidelines to secure data shared between Android applications:
 
 - __Use `Intent` objects when sharing a small amount of data__:
    - `Intent` objects are the primary mechanism to secure sharing small amounts of data between Android applications.
    - To learn how to send data along with `Intent` objects to another application, see the Android developer article [Sending Simple Data to Other Apps](https://developer.android.com/training/sharing/send.html).
    - Use explicit `Intent` objects and encrypt sensitive data when possible. There is no significant risk with `Intent` communication if the operating system is trusted, so encrypting data is optional.

 - __Use `ContentProvider` objects for sharing complex or large data__:
    - `ContentProvider` objects are the standard way to share complex data. The data is shared through a URI that points to the provider's namespace.
    - For general information about creating content providers, see the Android developer article [Creating a Content Provider](https://developer.android.com/guide/topics/providers/content-provider-creating.html)).
            
        - Define two separate permissions for reading and writing.
        - If the communication happens between two applications signed by the same key (they are both your applications), use `signature` as the value of `android:protectionLevel`.
        - Grant more granular permissions by using URI-based permissions. You can specify permissions on a subset of data, for example: `<grant-uri-permission android:path=""/shared_resources/"">`
        - You will need to grant permission to particular apps to read the data: `Context.grantUriPermission(""someApp"", address_link, intent.FLAG_GRANT_READ_URI_PERMISSION);`
        - Avoid SQL Injection attacks by using bind variables and parameterized methods such as `query()` and `update()` instead of concatenating user input to build the query strings. This recommendation for data querying methods remains the same for any content provider.

- __Use `FileProvider` objects for sharing files between applications__:
    - `FileProvider` is a type of content provider (subclass of `ContentProvider`).
    - For a detailed description of file sharing in Android, see the Android developer article [Setting Up File Sharing](https://developer.android.com/training/secure-file-sharing/setup-sharing.html).
    - The other applications that the file is shared with (each called a client) receive a content URI that hides the actual location of the file. Any permissions such as read/write are temporary and specific.
    - To implement this, you need to use getUriForFile and then grant temporary permission. For more information, see the [getUriForFile section](https://developer.android.com/reference/android/support/v4/content/FileProvider.html#getUriForFile(android.content.Context, java.lang.String, java.io.File)).

__Avoid__ these approaches to data sharing for any sensitive information:

- __Avoid using `MediaStore` objects for sensitive data__:
    - Some developers use [MediaStore](https://developer.android.com/training/sharing/send.html) for sharing files. The content of the files will be available to other applications.

- __Avoid writing files that contain sensitive or private data to a shared location and then passing the URI to the client application)__:
    - From Android 7.0 onward the operating system enforces the `StrictMode` API policy, which means that if an `Intent` containing a file URI leaves any app, the app will get a `FileUriExposedException` exception.
    - Use the `detectFileUriExposure()` method of the `android.os.StrictMode.VmPolicy.Builder` class to detect any event where your app exposes a `file://` Uri to another app. For more information about *StrictMode*, please see the How-tos section of this countermeasure.
- __Avoid using shared UIDs for data sharing__:
    - Shared UIDs have been known to cause non-deterministic behavior in the package manager and should be avoided if possible. If you are using shared UIDs to communicate between your apps, you should consider using instead standard cross-app communication mechanisms such as services and content providers.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T564/",Incomplete,,P803,Using insecure methods for sharing data with other Android applications,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Mobile Technologies > Android App Features > Shares data or files with other local applications AND
• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)"
Requirements,T7,Salt and hash stored passwords,6,"Not using a salt, or using a predictable salt, makes it easier for attackers to determine a password based on its hash. Dictionary-based attacks, such as rainbow tables, can bypass a weak salt using lists of known hash and salt pairs.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/759
) - http://cwe.mitre.org/data/definitions/760
)

To improve the security of hashed passwords, add a unique salt to each password and hash the result before storing it. A salt value is a set of random bytes added to original input before it is hashed.

### Best practices

__When generating or storing a salt__:

- __High entropy__: Use a secure random generator to generate unpredictable values. At the very least, salt values should be the same length as the output of the hash function. Do not use a username for a salt value.
- __Uniqueness__: Do not re-use salts between users or entries.
- __Storage__: Salts can be stored in the same table or place as the hashed passwords. Salt values do not need to be confidential. However, based on ASVS 4 (2.4.5) and NIST 800-63b, as defence-in-depth, consider storing it separately (e.g on an HSM device) to make brute-force attacks on the hashed passwords impractical in case a breach happens.

__When hashing passwords__:

- __Secure hash__: Use a secure hashing algorithm to prevent identical hashes (collision). Recommended hash functions are Argon2, BCrypt and SHA-2. **Avoid** using SHA-0 and SHA-1.
- __Slow hash__: Use slow hash algorithms because they take more time to calculate. This makes brute-force attacks more difficult to carry out. Make sure to hash values multiple times (iteratively), and hash a salted password at least a thousand times.

__Note__:
Without adequate authentication throttling, slow hashing can lead to denial of service (DoS) attacks.

__Implementation__: 

- Avoid integrating hashing functions into your code. Instead, use a field-tested library that performs the hashing and salting for you. __RFC2898__ introduces Password-Based Key Derivation Function 2 (PBKDF2), which is implemented by many libraries and vendors. We recommend using `PBKDF2-HMAC-SHA256`.

### Benefits of a salt
Using a randomized salt before hashing has two major benefits:

1. __Prevents rainbow attacks__: Rainbow attacks use a table of pre-calculated passwords and hashes to gain unauthorized entry. When a different salt is used for each user, rainbow attacks become more difficult and inefficient to use for an attacker. When unique salts are used to calculate a hash, identical passwords will not produce identical hashes.
2. __Increases complexity__: Salting a value increases the complexity of its hash, either by increasing its length or by adding special characters. This makes dictionary attacks much more time-consuming.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T7/",Incomplete,,P601,One-Way Hashes Do Not Have Strong Salts,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authentication > Authentication Features > Authentication Method > Uses passwords AND
• The application is a generic server application (Hidden Answer) AND
• Changes to authentication (Hidden Answer)"
Requirements,T10,Use server-to-server authentication,6,"Systems that communicate with one another may not be protected by authentication controls. This can allow an attacker to emulate one system and attack another without requiring any authentication credentials.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/521
)

Use the following guidelines for server-to-server authentication:

- The application must have a feature that authenticates servers.
    - For example, a presentation-tier server may need to authenticate a middle-tier server and vice-versa. 

- This control reduces the risk of attackers connecting directly to a server from the internal network.

- Server-to-server authentication is commonly done using __X509 certificate mutual authentication__.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T10/",Incomplete,,P703,Insufficient System-to-System Authentication,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authentication > Requires Server-to-Server Authentication > Yes AND
• Changes to authentication (Hidden Answer)"
Architecture & Design,T373,Design and regulate access to unauthenticated parts of the application,8,"An application/system can become unavailable for many reasons: an attack on the system (such as through a distributed denial of service attack, DDoS attack), improper allocation of resources, or over-reliance on a component that is likely to fail.

Some application vulnerabilities, such as allowing SQL injection, or cross-site scripting can increase the risk of denial of service. The weakness has two aspects: The system may not be protected against DoS attacks, and the system may not be well designed/implemented to continue to operate if its components fail (lack of a fallback mechanism).

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/400
) - http://cwe.mitre.org/data/definitions/410
) - http://cwe.mitre.org/data/definitions/730
)

Follow these guidelines to identify, specify and regulate access to unauthenticated parts of the application (an unauthenticated, or authentication-free, part of an application consists of all the resources in the application, such as pages and services for which authentication is not necessary):

- Create a white-list of services, pages, and directories that are accessible to the public.

- Make sure that the items on the list are clearly specified as this list will be used later for authentication and authorization purposes.

- Consider using light-weight technologies for those parts.
    - For example, simple HTML pages.

- Consider moving the non-authenticated parts of the application to another server (which may be subject to denial of service attacks, and usually receive a higher number of requests).
    - This may involve changes to the design of the application.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T373/",Incomplete,,P750,Denial of Service (DoS),7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Has authentication (Hidden Answer) AND
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Requirements,T536,Restrict the size of incoming messages in services,8,"An application/system can become unavailable for many reasons: an attack on the system (such as through a distributed denial of service attack, DDoS attack), improper allocation of resources, or over-reliance on a component that is likely to fail.

Some application vulnerabilities, such as allowing SQL injection, or cross-site scripting can increase the risk of denial of service. The weakness has two aspects: The system may not be protected against DoS attacks, and the system may not be well designed/implemented to continue to operate if its components fail (lack of a fallback mechanism).

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/400
) - http://cwe.mitre.org/data/definitions/410
) - http://cwe.mitre.org/data/definitions/730
)

Use the following guidelines for restricting the size of incoming messages in services:

- Limit the size of input messages that services accept to protect them against Denial of Service (DoS) attacks.
    - If services call other services as part of their operation, make sure the message sizes are within a range.
    - Some servers allow setting these values in configuration files.

__Notes:__ 

- According to NIST 800-95, oversized XML documents can also cause XML parsers to collapse. Configure the server the service is running on to only accept messages up to a certain size.

- This countermeasure might not be required if your architecture is designed in a way that you have low load on your server by using techniques such as DNS or TCP/IP load balancing. Check whether your application is still vulnerable to amplification attacks after using such techniques. If so, then apply the requirements in this countermeasure.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T536/",Incomplete,,P750,Denial of Service (DoS),7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Generic services (Hidden Answer) AND
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Requirements,T6,Implement account lockout or authentication throttling,5,"The application does not prevent multiple failed authentication attempts within a short period. This makes it more susceptible to brute-force attacks.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/307
)

To protect against brute-force authentication attacks, use a feature that enforces a __predetermined number of failed attempts__ by a user during a **predetermined period**.

Consider using a feature that throttles multiple authentication attempts from, or originating from, the same user. This prevents locking out legitimate user accounts, while also reducing the likelihood of a brute-force attack.

When the maximum number of unsuccessful attempts is exceeded, the **throttling mechanism** must automatically do one of the following:

- Lock the account or node for a predetermined period.
- Lock the account or node until it is released by an administrator.
- Delay the next login attempt using a suitable algorithm. 

A **delay algorithm** will increase the time a user must wait between login attempts until it becomes impractical for a brute-force attack.

 __Note:__ 

The authentication throttling feature must also prevent __denial of service (DoS)__ attacks. These attacks lock down legitimate user accounts through automated login attempts. Use a CAPTCHA image, or IP-based throttling to prevent these automated attacks.

__Note:__

Make sure __soft__ account lockout, which happens automatically by the application, is kept separate from __hard__ account lockout, which happens by administrators. These two statuses are not mutually exclusive. If an account is temporarily soft locked out due to a brute force attack, this should not reset the hard lock status applied by system admins.

### Mobile ASVS (section:2.15) Requirements

You should wipe the application's local storage after an excessive number of failed authentication attempts.

### Avoid using the sleep function for throttling in Java

Avoid using the `sleep` function for throttling in Java. If you use this function to increase the response time for requests sent by a malicious IP, you have kept the thread busy and have increased the likelihood of denial of service.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T6/",Incomplete,,P204,Repeated Authentication Attempts Are Not Restricted,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• Features and Functions > Authentication > Authentication Features > Has direct or third party authentication for end users, devices or nodes"
Testing,T656,Test that your Android application checks for rooted devices and security/compatibility of the environment,4,"If your application runs in an environment that does not check the integrity of the platform, it would be vulnerable to **bootkits** installed on the platform or **modifications** to the firmware of the platform.

A bootkit is an advanced malware that tampers with a system's boot process. It changes BIOS, firmware, master boot record (MBR), volume boot record (VBR), bootloader or any part of the system involved in the boot process and injects some malicious code that loads before the operating system (OS). Since the bootkits precede the OS and their components reside completely outside of the standard file systems, they get full control over the system and are hard to detect by typical means, such as anti-malware tools run by the operating system.

Platform integrity is also important if your application depends on the features provided by the firmware on the platform, especially security controls. An attacker may modify the firmware to circumvent some security controls. For example, on a game console, attackers can flash the firmware to remove code that checks the signatures on games installed on the platform, and can consequently run non-genuine versions of the game.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/353
)

Follow these steps to test that your application checks the runtime parameters and security requirements of the environment:

- Install your application on a rooted Android device and test if the application detects it.
- Run the application in an emulator and test that your application can detect the emulator.
- Run the application in a debuggable mode, and test if the application detects it.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T656/",Incomplete,,P809,Not Checking Boot/Platform Integrity,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• Changes to servers/frameworks and/or configuration (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Requirements,T24,Enforce idle session timeout,3,"Inactive and unattended sessions can allow unauthorized users to access resources without permission. If a session expiration feature is not used, accounts that have not been logged out of can be at risk of being hijacked, even if the user is only away temporarily.

The Web Application Security Consortium (WASC) explains that ""... insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.""

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/613
) - http://cwe.mitre.org/data/definitions/930
) - http://cwe.mitre.org/data/definitions/936
)

Lock a user's session after it has idled for a predetermined period:

- Choose a timeout period that corresponds to the users' needs, such as 15 to 30 minutes.
    - Do not release the lock until the user re-authenticates using their account credentials.

- Use idle session timeouts to decrease the window of opportunity for an attacker to steal or brute-force a session ID.
    - Session timeouts also protect users who forget to log out of a shared computer or device.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T24/",Incomplete,,P504,Insufficient Session Expiration,3,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Session Management > Has Session Management > Yes AND
• Changes to session management (Hidden Answer)"
Requirements,T28,Avoid 'Remember Me' features,4,"Inactive and unattended sessions can allow unauthorized users to access resources without permission. If a session expiration feature is not used, accounts that have not been logged out of can be at risk of being hijacked, even if the user is only away temporarily.

The Web Application Security Consortium (WASC) explains that ""... insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.""

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/613
) - http://cwe.mitre.org/data/definitions/930
) - http://cwe.mitre.org/data/definitions/936
)

The following provides guidance on how to avoid, restrict, and reduce the risk of 'remember me' functionality:

- Avoid 'remember me' features for applications with critical functionality. For example, a banking application's login page does not need to provide a 'remember me' feature. The login page can still remember some public data, such as the account number of the user, but should not automatically log the user in if the session is terminated. For example, a user should not be able to automatically log in to a banking web site after the browser is closed.
    - __Note:__ 'Remember me' is a feature that allows applications to keep their users logged in for a period of time that extends past their live session, such as after they close the browser. This type of 'remember me' functionality differs from browser features that save usernames and passwords, or web applications that save partial information, such as account numbers and client preferences.

- For non-critical applications, if 'remember me' features provide a better user experience, restrict them to the normal pages of the application. Additionally, require re-authentication if a user wants to perform critical actions, such as performing a transaction, changing profile content, changing passwords, or accessing personal data.

- In many cases, 'remember me' features are handled by the framework. Check the framework's documentation and set the login token expiry time to a reasonable duration. For example, set the expiry for login cookies to 8 hours.
       - __Make session management cookies non-persistent.__ In other words, do not set 'expires' attribute on the cookies. These non-persistent cookies will only last as long as the browser session does. When the cookie does not specify an expiry date, the cookie is removed as soon as the user quits his or her browser.

- If you need to implement a 'remember me' feature, use a secure method and follow implementation guidelines such as those found in these resources:
    - The example from the section called _""Remember Me"" - Long-Term Persistent Authentication_ in this [article](https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence)
    - The [LoginPersist](https://github.com/craigrodway/LoginPersist) GitHub project
    - The [rememberme](https://github.com/gbirke/rememberme) GitHub project

__Notes:__

Session management for web applications is usually enabled using URL entries or cookies. Cookies are a better means to manage sessions. There are two types of cookies: temporary session cookies that are removed by the browser after closing, and persistent cookies that are stored on the client for a fixed duration of time specified when the cookie is created. 

An application implements 'remember me' by utilizing those persistent cookies and setting them with a considerable lifetime. The risk here is that those cookies can be stolen using various methods, either locally or on the network. You can reduce the risks by restricting the use of those cookies, validating their consistency, and making sure they are continuously renewed.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T28/",Incomplete,,P504,Insufficient Session Expiration,3,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Session Management > Has Session Management > Yes AND
• Changes to session management (Hidden Answer)"
Development,T31,Validate all forms of input,5,"When software fails to validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.

Also, allowing external control of system or configuration settings without validating the external input can disrupt service, or cause an application to behave in unexpected, and potentially malicious ways. This is more serious if the application runs with higher level privileges than the external users.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/15
) - http://cwe.mitre.org/data/definitions/20
)

While input validation cannot completely protect an application from attacks, such as Cross-Site Scripting and SQL Injection, it can decrease their risk.

Use the following guidelines for input validation:

- **Validate** all user input. External user input can be anything like:
     - Command-line parameters.
     - Form fields for Graphical User Interface (GUI) applications.
     - Environment variables.
     - Interprocess communication, such as shared memory, and named pipes.
     - Content from a file that can be modified by end users or other programs.
     - The output of another web app or web service

- **Validate** all function input. 
    - Confirm that all strings are checked for text or data that can be erroneously or maliciously interpreted as a command (rejects such inputs or otherwise handles such inputs securely)
    - Reject or otherwise securely handle any inputs that violate buffer size or other memory allocation thresholds, for functions that handle buffers and process data.

- Use **allowlist validation** where possible.
    - Allowlists limit input to a specific set of values and refuse all others.

- Use **blocklist validation** when allowlists are not possible.
    - Blocklists filter out values known to be dangerous.

- Use **output encoding**.
    - This converts the input to a safe format to reduce the risk of injection attacks.

- Use **logging**.
    - Log the input validation failures that result in request rejection.

Input validation can happen on different levels. For example, we may have:

- Character level validation:
    - This removes potentially risky characters from the input. 

- Keyword level validation:
    - This checks that the value of input keywords:
        - Have a specific **data type**
        - Fall within a **valid range**
        - Are **consistent** with other existing or provided values
        - Are **structured** properly
        - And so on.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T31/",Incomplete,,P95,Improper Input Validation,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• New/modified user input OR changes to how user input is used (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Development,T34,"Refuse overly-long, malformed, and non-printable characters unless required",5,"When software fails to validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.

Also, allowing external control of system or configuration settings without validating the external input can disrupt service, or cause an application to behave in unexpected, and potentially malicious ways. This is more serious if the application runs with higher level privileges than the external users.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/15
) - http://cwe.mitre.org/data/definitions/20
)

Overly long and malformed characters in variable-length encoding formats, such as UTF-8, can be used to bypass filters. These characters can be sanitized by a separate component or application.

Use the following guidelines for refusing characters:

- __Do not allow NUL characters__ in HTTP input.
    - A NUL character is a common attack that can bypass checks and allow leaking private information, or running unknown code.
    - For example, '%00' is a NUL character.

- Only accept legal character sequences. The W3C provides a Perl regular expression to validate printable UTF-8 characters:

    $field =~
      m/\A(
         [\x09\x0A\x0D\x20-\x7E]            # ASCII
       | [\xC2-\xDF][\x80-\xBF]             # non-overlong 2-byte
       |  \xE0[\xA0-\xBF][\x80-\xBF]        # excluding overlongs
       | [\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}  # straight 3-byte
       |  \xED[\x80-\x9F][\x80-\xBF]        # excluding surrogates
       |  \xF0[\x90-\xBF][\x80-\xBF]{2}     # planes 1-3
       | [\xF1-\xF3][\x80-\xBF]{3}          # planes 4-15
       |  \xF4[\x80-\x8F][\x80-\xBF]{2}     # plane 16
      )*\z/x;

This check will return true if $field is UTF-8, and false otherwise.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T34/",Incomplete,,P95,Improper Input Validation,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• New/modified user input OR changes to how user input is used (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Requirements,T338,Control access to resources through user authentication and authorization,7,"Users can access data or perform actions without authorization when access control checks are not applied consistently, or at all. This can lead to a wide range of weaknesses that can cause information exposure, denial of service (DoS), and the execution of arbitrary code.

Granting privileges directly to users instead of assigning privileges at the group or role level increases the complexity of access management as the number of users grows. High access management complexity may increase the opportunity for a principal to inadvertently receive or retain excessive privileges.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/285
) - http://cwe.mitre.org/data/definitions/732
) - http://cwe.mitre.org/data/definitions/862
) - http://cwe.mitre.org/data/definitions/863
) - http://cwe.mitre.org/data/definitions/935
)

Use the following guidelines for controlling access to resources with user authentication and authorization:

- Implement a user authentication/authorization system that enforces access control policies.
    - Users include human, software process, or device.
    - A typical authentication/authorization system identifies and authenticates users, and assigns roles to them.
    - It also checks user permissions when a request is made to access a resource, such as a piece of information, service, or page.

- Require additional levels of authentication (e.g., enable multi-factor authentication) when performing critical requests that involve [sensitive/personal information](/library/glossary/G8).

-  Make sure that interfaces and pages that require authentication have easy access to logout functionality.
-  Make sure unique identification and authentication of each service, program, or system attempting to access critical assets is required, where interfaces, such as APIs, allow for automated access to critical assets.
-  Protect the authentication mechanisms, where identification is supplied across a non-console interface.

- While there are many access control models, Role Based Access Control (RBAC) is one of the most common models for typical applications.
    - For more information on access control models, especially RBAC, see this [FAQ from NIST](http://csrc.nist.gov/groups/SNS/rbac/faq.html).
- Restrict by default all access to critical assets to only those accounts and services that require access.

**Note:** Authorize a user or process acting on behalf of the user to publish **publicly accessible content**. Ensure information available to the general public, without identification and authentication, does not contain nonpublic content.

### Prevent untrusted parties from accessing admin interfaces in applications

Use the following guidelines for preventing untrusted parties from accessing administrative interfaces:

-Restrict non-admin users from accessing information or features they do not need.

-Use secure interface elements for making certain features or information visible or invisible and editable or uneditable for non-admin users based on their needs. 

-Restrict admin areas from being accessible from a single IP. Consider keeping the admin interface on a private subnet and off the public internet.

-Use second level authentication and consider using client SSL certificates for accessing admin areas. 

-Only allow access from trusted domains and IPs. This can be done by adding a check to a basic HTTP pipeline or by blocking untrusted IPs in access configuration files.

-Reissue the session ticket when moving between admin and normal users.

### Authorization, MDS2-2013

The answers to these questions are directly affected by the characteristics of the chosen authorization/authentication system:

- 3-1 Can the device prevent access to unauthorized users through user login requirements or other mechanism?

     - Other mechanisms may include use of smart cards, password-generating-tokens, device-specific certificates (e.g. PKI authentication of users/devices), etc. Note that in order to effectively prevent unauthorized access to resources you should complete the authentication/authorization related security tasks that are linked to this section in the compliance regulation report.
 
- 3-2	Can users be assigned different privilege levels within an application based on 'roles' (e.g., guests, regular users, power users, administrators, etc.)?

     - This is affected by the authorization model that is adopted. If you are using an RBAC model, the answer is yes.  


See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T338/",Incomplete,,P182,Improper Access Control (Authorization),6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Generic services (Hidden Answer) AND
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Generic services (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Generic services (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• Changes to authentication (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Deployment,T2416,Encrypt Kinesis Firehose delivery streams (Amazon Kinesis Data Firehose),6,"Many communication channels can be sniffed, or eavesdropped on, by attackers during data transmission. For example, unencrypted network traffic in clear text can be sniffed by any attacker who has access to a network interface. This makes unsecured communication channels easy for attackers to exploit.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/311
) - http://cwe.mitre.org/data/definitions/319
) - http://cwe.mitre.org/data/definitions/930
) - http://cwe.mitre.org/data/definitions/934
) - http://cwe.mitre.org/data/definitions/1028
) - http://cwe.mitre.org/data/definitions/1029
)

Ensure that data handled by Amazon Kinesis Firehose is encrypted on the server. There are two parts to this requirement:

- __Stream encryption__. Encrypt the data that's temporarily stored in the Kinesis Firehose delivery stream, before it's delivered.
- __Destination encryption__. Encrypt the data in the final destination.

Both are examples of server-side encryption. The difference is the sequence: data passes through the Kinesis Firehose data stream first and then reaches another destination, like an S3 bucket or Mongo DB database.

To encrypt the Kinesis Firehose delivery stream:

1. Determine the data source.
    - If the source is a Kinesis data stream, the data will not be stored in Kinesis Firehose at all. Instead, it's stored in the Kinesis data stream. Kinesis Firehose retrieves it, buffers it in memory, and sends it directly to its destination. The only way to encrypt it is to enable encryption on the underlying Kinesis data stream.
    - If the source is __not__ a Kinesis data stream, follow the remainder of these steps in the AWS console.
2. In the Amazon Kinesis page, choose __Delivery streams__.
3. Select the stream.
4. Choose the __Configuration__ tab.
5. Look at the __Server-side encryption__ section. If it says __Disabled__:
    1. Choose __Edit__.
    2. Select __Enable server-side encryption for source records in delivery stream__.
    3. Choose __Save changes__.

The steps for enabling destination encryption depend on the delivery of the data source. For example, if Kinesis Firehose is delivering to S3, verify that encryption is on for that S3 bucket:

1. In the Amazon Kinesis page, choose __Delivery streams__.
2. Select the stream.
3. Choose the __Configuration__ tab.
4. Look in __Destination settings__ section.
5. Choose __Edit__.
6. Expand the __Buffer hints, compression and encryption__ section.
7. Set __Encryption for data records__ to __Enabled__.
8. Choose __Save changes__.

For Redshift, Kinesis Firehose uses S3 as an intermediate storage location before copying the data. For other destinations, Kinesis Firehose uses S3 as a backup for data that fails the transfer process. In both cases, you can enable encryption on the S3 bucket in the Firehose delivery stream settings.

## Note
These steps are for encrypting the Kinesis Firehose data when buffered or stored on the server. You do not need to take any additional steps to enable __encryption in transit__, because Kinesis Firehose always uses an HTTPS endpoint.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2416/",Incomplete,,P216,Clear Text and Unencrypted Transmission of Information,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure’s applicable rules and Project Survey criteria were met but it will be removed once the New Content Updates have been accepted.

"
Testing,T220,Verify that user password is salted and hashed,6,"Not using a salt, or using a predictable salt, makes it easier for attackers to determine a password based on its hash. Dictionary-based attacks, such as rainbow tables, can bypass a weak salt using lists of known hash and salt pairs.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/759
) - http://cwe.mitre.org/data/definitions/760
)

Complete the following steps for verifying that passwords are salted and hashed:

1. Review the source code for where authentication occurs.

2. Ensure that the code appends a salt to the user-supplied password and hashes prior to comparing it with the stored password.
    - If the code hashes but does not append a salt, or the code does not hash, then this test __fails__.

3. Ensure that the salts are unique for each user and has enough entropy:
    - This test __fails__ if the same salt is used for multiple users.
    - This test __fails__ if the generated salt is predictable, such as being derived from other fields like username. 
    - This test __fails__ if the salt is too short (shorter than 8 bytes).

4. This test __fails__ if the password is hashed with a weak algorithm, such as MD5.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T220/",Incomplete,,P601,One-Way Hashes Do Not Have Strong Salts,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authentication > Authentication Features > Authentication Method > Uses passwords AND
• The application is a generic server application (Hidden Answer) AND
• Changes to authentication (Hidden Answer)"
Development,T205,Avoid inter-process race conditions,5,"The application does not allow two or more operations to modify the same state, but a window of time exists during which an unexpected action or process can modify the state. A race condition is when one process is racing against another process to access or change a state, but must be performed in a specific order. Race conditions can be exploited by attackers to interfere with the operation of the application.

The window of time between operations is especially important when security-critical code is attempting to synchronize two operations. Code that controls recording whether a user is authenticated, or modifying important state information can be compromised through race conditions.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/362
) - http://cwe.mitre.org/data/definitions/364
) - http://cwe.mitre.org/data/definitions/365
) - http://cwe.mitre.org/data/definitions/368
) - http://cwe.mitre.org/data/definitions/557
) - http://cwe.mitre.org/data/definitions/1298
)

Avoid race conditions from occurring between concurrent execution threads by following these steps:

1. Identify potential areas of your program that might execute in concurrent threads, and the variables or resources that may be accessed concurrently.
2. For each identified area, implement corresponding mitigating techniques and best practices to prevent a race condition.
3. Review for possible deadlocks and follow best practices to avoid them.

The following are best practices to avoid race conditions within your application:

- __Avoid using global variables__ unless absolutely necessary.
    - You can eliminate the need for some global variables by passing them explicitly among functions.

- __Use immutable (final) global variables__ if you absolutely cannot avoid them altogether.

- __Avoid storing data in singleton classes/objects__ unless necessary.

- __Review all the places where global variables and singleton objects are accessed__, and determine if there is a possibility that different threads pass through the same code.
    - For example, determine if threads other than the main thread pass through the same code.
    - If so, the singleton objects need to be __thread safe__.

- __Make objects thread safe__ by wrapping access code inside a lock.

- __Use error and exception handlers__ to make sure all paths from a locked function release the lock to avoid deadlocks.

- Use the framework's recommended thread safe objects as __core data structures__.
    - For example, many frameworks provide a thread safe queue or list object.
    - Their basic operations are done in an atomic way, such as add/remove/pop.

- Be careful __not to break the thread-safe property__ of a primitive or base object when customizing using inheritance.

- __Review and understand how threads of operations__ are handled by your development environment. 
    - This might depend on deployment configurations as well.
    - Adhere to all recommendations regarding thread safety.

- When working with a file, __check if it is free__ before opening it.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T205/",Incomplete,,P260,Race Condition,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > More Features > Miscellaneous > Uses multi-threaded programming AND
• New transactions / use cases (Hidden Answer)"
Testing,T2273,Verify that unified and manageable interfaces are available for security settings and configuration parameters,4," - It will become considerably difficult or impossible to check whether security requirements are fulfilled and that the system is securely configured if:
    - The system (and its components) do not provide adequate transparency.
    - Simple interfaces through which configuration parameters (and security settings) could be verified and changed.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/16
) - http://cwe.mitre.org/data/definitions/671
)

Follow these guidelines to confirm that security settings and configuration parameters have unified and manageable interfaces:

- Verify that secure configurations and standard baselines are implemented based on the system requirements.

- Verify that authorized administrators can approve the integrity of security-relevant configurations via properly implemented functionalities.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2273/",Incomplete,,P756,Lack of system transparency and control over configuration parameters,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Testing,T2282,Test to confirm that unauthenticated parts of the application are accessible,8,"An application/system can become unavailable for many reasons: an attack on the system (such as through a distributed denial of service attack, DDoS attack), improper allocation of resources, or over-reliance on a component that is likely to fail.

Some application vulnerabilities, such as allowing SQL injection, or cross-site scripting can increase the risk of denial of service. The weakness has two aspects: The system may not be protected against DoS attacks, and the system may not be well designed/implemented to continue to operate if its components fail (lack of a fallback mechanism).

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/400
) - http://cwe.mitre.org/data/definitions/410
) - http://cwe.mitre.org/data/definitions/730
)

__ Try to access unauthenticated parts of the application.__ This test __fails__ if unauthenticated parts of the application or any pages and services that do not need authentication are not accessible.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2282/",Incomplete,,P750,Denial of Service (DoS),7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Has authentication (Hidden Answer) AND
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Development,T19,Restrict Application's Access to Database,8,"Running an application with extra privileges, such as root or administrator, can disable the standard security checks performed by the operating system and surrounding environment. In addition, pre-existing weaknesses can become security vulnerabilities at raised levels of privilege.

Privilege management functions can behave in unexpected ways on different platforms. These inconsistencies are most obvious when a non-root user is transitioned to another non-root user.

Further, signal handlers and sub-processes inherit the level of privilege of the owning process. As a result, a process with root privileges will produce signal handlers and sub-processes with root privileges.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/250
)

Always restrict the application's access to its database. 

Applications tend to have a single service account with excessive privileges on their databases for performing important transactions. A malicious user could exploit a separate vulnerability, such as SQL injection, to gain access to these privileges. This situation can increase the attack surface of a software environment.

Consider using the following minimum restrictions:

* Restrict access to tables and schemas that are needed.
* Restrict access to actions that are needed (such as select, update, and delete).
* Remove access to stored procedures that the application does not need.
* Work with a database administrator to implement proper access control.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T19/",Incomplete,,P150,Running With Unnecessary Privileges,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Application General > Components > Components In Use > Uses a database AND
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Application General > Components > Components In Use > Uses a database AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Activities,T1372,Follow software change management process,7,"If changes to a software are not well defined, documented, and approved :

- Unauthorized changes may introduce the software to new vulnerabilities.
- Undocumented changes can not be tracked later so finding the root cause of an issue (e.g., an intrusion) in a timely manner may not be possible.
- If change documents are not properly recorded, future contributors to the software project will not be able to understand necessity, criticality, and justification of a certain change.
- Without a proper approval process, unnecessary changes may find their path to production without going through sufficient testing.
- If relevant stakeholders are not notified of a change in a timely manner, they will not react accordingly that may affect availability and integrity of the software.

Follow these guidelines to manage changes to software applications:

1. Document a change management process covering all [types of software changes](/library/glossary/G73/) that tests and approves changes that meet [change management security criteria](/library/glossary/G75/).
2. Document change requests before applying changes to the production environment using a change request form. Only authorized individuals should be able to submit change requests. 
3. Assess the potential risk and potential negative consequences on other components of the environment when creating and submitting a change request.
4. Establish back-out positions so that applications can recover from failed changes or unexpected results.
5. Ensure that changes to applications are performed by skilled individuals who are capable of making changes correctly and securely, supervised, and signed off by management.
6. Ensure that [post-change implementation controls](/library/glossary/G76/) are in place.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1372/",In Progress,,P1174,Lack of software change management process,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Activities,T1373,Maintain the integrity of all software code,9,"Insufficient software code protection measures may allow unauthorized roles to make illegitimate changes. For example, lack of access control for check-out procedure may allow an unauthorized developer to make changes to critical functions of the application (e.g., cryptography). In addition, using code from untrusted sources may result in malicious code injection and intellectual protection violations.

Also, improper configuration of the code repository and plugins (e.g., not using HTTPS, bad passwords, key management weaknesses) may cause proprietary code and sensitive data disclosure.

Follow these guidelines to maintain the integrity of your software code repository:

1. Whenever possible implement [code repository safeguards](/library/glossary/G77/).
2. Document all the actions above, designate a responsible individual to own your software code repository, and maintain a consistent practice around detection of unauthorized attempts to tamper with or access software code and its protection.

For more information on maintaining the integrity of your software code, see PCI's [Secure Software Lifecycle
Requirements and Assessment Procedures](https://www.pcisecuritystandards.org/documents/PCI-Secure-SLC-Standard-v1_1.pdf?agreement=true&time=1631212033305).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1373/",Incomplete,,P1175,Insufficient software code control,9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Activities,T1895,Protect applications with Intrusion Detection / Protection System (IDS/IPS),9,"When IDS/IPS are not used, malicious behaviour can be more difficult to detect and this may expose the infrastructure and applications to attacks.

Use the following guidelines for proper utilization of intrusion detection and prevention systems (IDPS):

- Connect IDPS components through a network strictly designed for security software management (management network).
- Implement IDPS components in a test environment first and perform tuning to prevent false positives
- Secure IDPS components 
    - create separate accounts for each user and administrator of the IDPS 
    - configure firewalls, routers, and other packet filtering devices to limit direct access to all IDPS components to only those hosts that need such access. 
    - protect all IDPS management communications either through physical (e.g., management network) or logical (e.g., management VLAN) separation, or through encryption of communications. 
    - use strong authentication for remote access to IDPS components, such as two-factor authentication.
- Maintain IDPS on an ongoing basis
    - monitor IDPS components for operational and security issues 
    - periodically verify that IDPS is functioning properly 
    - perform regular vulnerability assessments 
    - receive notifications from vendors of security problems with IDPS components and respond appropriately to those notifications
    - receive notifications from the IDPS vendor of updates, and perform testing and deployment of the updates. 
    - test software and signature updates before applying them

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1895/",Incomplete,,P1429,Applications not protected with Intrusion Detection / Protection System (IDS/IPS),9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Testing,T293,Verify that requests made through Android URL schemes are securely handled,5,"Android, iOS, and some other mobile frameworks allow definition of custom URL schemes (through different methods). Lack of authorization for received requests, and lack of validation of data received with those requests in mobile applications enables adversaries to perform unauthorized actions by tricking users to click on malicious hyperlinks that are handled by those insecure applications.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/939
)

Use the following guidelines to verify that requests are handled securely when made through Android URL schemes:

1. In this verification, the application is declaring a URL scheme in the form `myapp://` within its Android manifest file for handling URL requests.

2. If the application, *myapp*, for example, requires authentication, then log into the application and stay logged in.

3. Create an HTML file with this content, open it in the Chrome browser, and click on the link: `<a href='myapp://'>LINK!</a>`
    - Alternatively, you can set `window.location` in Javascript when the page is loaded.

4. This test __fails__ if the application performs an important action after opening without notifying the user and asking for permission.
    - Examples of important actions are making phone calls, sending SMS, and changing contacts.

5. This test completes if the application is not acting on any data received with the URL. 

6. If it is receiving input through URL parameters, such as `myapp://somedata?someactions`, work with developers to verify that data validation is performed on data. This part of the test is application dependent and depends on the expected data.
    - Create a link with data in an unintended format.

    This test __fails__ if the input is not rejected (or ignored).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T293/",Incomplete,,P760,Improper verification of source and content of URL schemes,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• Changes to inbound/outbound interfaces (Hidden Answer)"
Testing,T587,Verify that cryptographically secure algorithms are used for random number generation,7,"Applications rely on creating random values that can't be easily guessed for security reasons. If an attacker figures out these values, they can be used to impersonate a legitimate user to access sensitive information.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/329
) - http://cwe.mitre.org/data/definitions/330
) - http://cwe.mitre.org/data/definitions/1241
)

Follow these steps to verify that secure, well-documented, and adequately tested random number generation algorithms are used in the source code:

- Find all the instances of random generation.
- Verify that secure random generator functions and classes are used.
- List the random generation algorithms that are specified as the parameters to those function. It is usually better to use the default random generator, such as `SecureRandom()` in Java, than specifying a random generator algorithm that has not been adequately analyzed.
- Verify that those algorithms are secure, and the seeds are properly provided to the functions.

__Note__: The _SHA1PRNG_ algorithm that is widely used for random number generation is no longer considered cryptographically strong and should be avoided in critical applications.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T587/",Incomplete,,P228,Use of Insufficiently Random Values,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > More Features > Miscellaneous > Generates random numbers AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Session Management > Has Session Management > Yes AND
• Changes to session management (Hidden Answer)"
Requirements,T20,Generate unique session IDs and reset old IDs after authentication,9,"Session fixation is commonly seen when any of the following occurs: 

1. A web application authenticates a user **without resetting the existing session**:
    - Unless the old session is reset, the new session will be associated with its previous owner.
2. An attacker forces a user into a **session with a known ID**:
    - Once the user is authenticated, the attacker has access to the authenticated session. 
3. The application or container uses **predictable session IDs**: 
    - If an attacker can determine the ID of a session, they can create a new session with a known session ID.
    - The attacker can then use this compromised session to force a user into logging into the application.
    - Once the user is authenticated into the compromised session, the attacker can use application's account with all of the privileges of the user.
    - This is called **session hijacking**.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/384
) - http://cwe.mitre.org/data/definitions/930
)

Protect against session-fixation attacks by using the following guidelines:

- Generate a unique and random session identifier for each session.
- Recognize only system-generated session IDs.
- Regenerate the session ID after a user is successfully authenticated.
- Regenerate the session ID after any changes to user's privilege level.
- Copy the server-side state of a user's old session to the new session after changing the session ID.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T20/",Incomplete,,P678,Session Fixation,9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Session Management > Has Session Management > Yes AND
• Has authentication (Hidden Answer) AND
• Changes to session management (Hidden Answer)"
Requirements,T21,Ensure all data in transit is encrypted using a secure TLS channel,8,"Many communication channels can be sniffed, or eavesdropped on, by attackers during data transmission. For example, unencrypted network traffic in clear text can be sniffed by any attacker who has access to a network interface. This makes unsecured communication channels easy for attackers to exploit.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/311
) - http://cwe.mitre.org/data/definitions/319
) - http://cwe.mitre.org/data/definitions/930
) - http://cwe.mitre.org/data/definitions/934
) - http://cwe.mitre.org/data/definitions/1028
) - http://cwe.mitre.org/data/definitions/1029
)

All data must be sent over an encrypted channel to remain secure:

- Use Transport Layer Security (TLS). TLS is generally referred to as Secure Socket Layer (SSL) because TLS is based on the SSL protocol.
    
- Refuse any plaintext login or authentication requests.

Secure TLS/SSL communication offered by the application using these steps:

1. Do not support SSLv1, SSLv2, and SSLv3 as they are considered insecure.
2. Provide support for TLSv1.2 and TLSv1.3. TLSv1.3 provides faster speed and enhanced security compared to TLSv1.2.
3. Refuse insecure ciphers. (See the ""Choice of cipher"" Additional Requirements below this countermeasure for more details about ciphers.)
4. Prevent using ciphers that provide SSL/TLS compression to protect against [Crime Attack Vectors](/library/glossary/G10/) that use compression side channels to extract information from encrypted channels.
5. Use the latest version of the SSL library and web servers:
    - SSL v1.0, v2.0, and v3.0 are no longer considered secure.
    - OpenSSL is an open-source, commercial-grade toolkit for TLS/SSL protocols, and a cryptography library. It includes default protocol level mitigation factors enabled against BEAST (Browser Exploit Against SSL/TLS) attacks.
    - Apache 2.2.24 provides a directive for disabling SSL/TLS Compression.
6. Ensure that the server side selects the most secure cipher from the list of ciphers common to both client and server by providing preference ordering of the ciphers.
7. Where possible, disable HTTP compression for dynamic content where confidential information such as CSRF tokens might be included within the body of the HTTP response. This mitigates the HTTP compression side channel attack vector named BREACH (Browser Reconnaissance and Exfiltration via Adaptive Compression of Hypertext).
8. Log backend TLS connection failures.

__Note__: Enforce TLS/SSL on all parts of the application where possible. Read the amendment for this countermeasure for more information.

### Enforce TLS/SSL on all pages

Enforcing TLS/SSL (We use the word ""TLS"" to also refer to the secure versions of SSL after this) across your entire site limits the ability of phishers to pull off impersonation attacks on your application and provides a higher level of security to your users. However, whole-site TLS has some cons that should be considered:

- TLS requires more processing power and bandwidth and increases server overhead.
- Content Distribution Networks (CDN) may face challenges distributing your protected pages.
- Ad networks used by your application may not support TLS.

So, in minimum, use TLS for the parts of your site that need security such as login pages, authenticated pages, sensitive submission forms and other content that needs to be encrypted. And if the above-mentioned problems are not critical to you, force TLS on all pages to enable a higher level of security for your application.

__Note__: Even if part of the application does not particularly perform any sensitive actions or collect sensitive data, allowing non-TLS access to those parts causes non-secure cookies (the ones that don't have ""secure"" flag set to true on them, [see T22](/library/tasks/T22/)) to be sent over unencrypted channels. Those cookies can be stolen by any eavesdropper on the network. Other small problems in the application could also be exploited much more easily when the whole application is not TLS-enforced.


### Choice of cipher

## Choice of cipher

Use the following guidelines for selecting an appropriate cipher for encryption:

- Strictly avoid using NULL ciphers as they do not provide encryption for confidentiality (they only provide integrity checks).
- Strictly avoid using EXPORT ciphers (EXPORT ciphers use shorter keys and are weak and breakable by design). The server component must explicitly disable EXPORT ciphers to protect the clients against __Factoring RSA Export Keys__ (FREAK) attacks.
- Strictly avoid DES ciphers (not to be confused with 3DES). They have a short key and can be broken easily by brute force using inexpensive off-the-shelf hardware.
- Where available, use Ephemeral key exchange ciphers over standard ones. That is, use __ECDHE__ over ECDH and __DHE__ over DH.
- Regarding DH-based key changes, choose ECDH\* over DH\* due to better performance. ECDH\* provides the same amount of protection as DH\* but the former requires fewer resources.
- Never use ciphers that use MD5 for MAC.
    - MD5 has two known weaknesses: collision and pre-image.
- Never use SHA1. Use SHA384 or SHA256 instead.
    - SHA1 has been fully and practically broken.
    
The following provides a list of [recommended ciphers](https://ciphersuite.info/cs/?sort=asc&software=gnutls&singlepage=true&security=secure&tls=tls12):

- TLS\_ECDHE\_ECDSA\_WITH\_AES\_128\_CCM
- TLS\_ECDHE\_ECDSA\_WITH\_AES\_128\_CCM\_8
- TLS\_ECDHE\_ECDSA\_WITH\_AES\_128\_GCM\_SHA256
- TLS\_ECDHE\_ECDSA\_WITH\_AES\_256\_CCM
- TLS\_ECDHE\_ECDSA\_WITH\_AES\_256\_CCM\_8
- TLS\_ECDHE\_ECDSA\_WITH\_AES\_256\_GCM\_SHA384
- TLS\_ECDHE\_ECDSA\_WITH\_CAMELLIA\_128\_GCM\_SHA256
- TLS\_ECDHE\_ECDSA\_WITH\_CAMELLIA\_256\_GCM\_SHA384
- TLS\_ECDHE\_ECDSA\_WITH\_CHACHA20\_POLY1305\_SHA256
- TLS\_ECDHE\_PSK\_WITH\_CHACHA20\_POLY1305\_SHA256
- TLS\_ECDHE\_RSA\_WITH\_AES\_128\_GCM\_SHA256
- TLS\_ECDHE\_RSA\_WITH\_AES\_256\_GCM\_SHA384
- TLS\_ECDHE\_RSA\_WITH\_CAMELLIA\_128\_GCM\_SHA256
- TLS\_ECDHE\_RSA\_WITH\_CAMELLIA\_256\_GCM\_SHA384
- TLS\_ECDHE\_RSA\_WITH\_CHACHA20\_POLY1305\_SHA256
- TLS\_DHE\_DSS\_WITH\_AES\_128\_GCM\_SHA256
- TLS\_DHE\_DSS\_WITH\_AES\_256\_GCM\_SHA384
- TLS\_DHE\_DSS\_WITH\_CAMELLIA\_128\_GCM\_SHA256
- TLS\_DHE\_DSS\_WITH\_CAMELLIA\_256\_GCM\_SHA384
- TLS\_DHE\_PSK\_WITH\_AES\_128\_CCM
- TLS\_DHE\_PSK\_WITH\_AES\_128\_GCM\_SHA256
- TLS\_DHE\_PSK\_WITH\_AES\_256\_CCM
- TLS\_DHE\_PSK\_WITH\_AES\_256\_GCM\_SHA384
- TLS\_DHE\_PSK\_WITH\_CAMELLIA\_128\_GCM\_SHA256
- TLS\_DHE\_PSK\_WITH\_CAMELLIA\_256\_GCM\_SHA384
- TLS\_DHE\_PSK\_WITH\_CHACHA20\_POLY1305\_SHA256
- TLS\_DHE\_RSA\_WITH\_AES\_128\_CCM
- TLS\_DHE\_RSA\_WITH\_AES\_128\_CCM\_8
- TLS\_DHE\_RSA\_WITH\_AES\_128\_GCM\_SHA256
- TLS\_DHE\_RSA\_WITH\_AES\_256\_CCM
- TLS\_DHE\_RSA\_WITH\_AES\_256\_CCM\_8
- TLS\_DHE\_RSA\_WITH\_AES\_256\_GCM\_SHA384
- TLS\_DHE\_RSA\_WITH\_CAMELLIA\_128\_GCM\_SHA256
- TLS\_DHE\_RSA\_WITH\_CAMELLIA\_256\_GCM\_SHA384
- TLS\_DHE\_RSA\_WITH\_CHACHA20\_POLY1305\_SHA256
- TLS\_PSK\_DHE\_WITH\_AES\_128\_CCM\_8
- TLS\_PSK\_DHE\_WITH\_AES\_256\_CCM\_8

### Secure files transfer

Do not transmit files in cleartext in a communication channel as it jeopardizes the integrity and confidentiality of data as unauthorized actors may sniff it. Use secure file transfer tools that:

1. Employ secure File Transfer protocols (e.g., Secure File Transfer Protocol (SFTP), FTP over SSL (FTPS), and Applicability Statement 2 (AS2)) that encrypt the data in motion and at rest. 
2. Use robust authentication methods.
3. Protect against unauthorized data modifications. 
4. Have reporting and logging capabilities.

### Connect to a remote system securely

- Connect securely to a remote system using the SSH (Secure Shell) protocol that encrypts the traffic between a client and a server, preventing interception and identity spoofing.
- Do not use Telnet to connect to a system remotely. Telnet sessions between a client and a server are not encrypted, exposing the connection to various threats, including eavesdropping and identity spoofing.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T21/",Incomplete,,P216,Clear Text and Unencrypted Transmission of Information,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• Changes to inbound/outbound interfaces (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Testing,T2417,Verify Kinesis Firehose delivery streams are encrypted (Amazon Kinesis Data Firehose),6,"Many communication channels can be sniffed, or eavesdropped on, by attackers during data transmission. For example, unencrypted network traffic in clear text can be sniffed by any attacker who has access to a network interface. This makes unsecured communication channels easy for attackers to exploit.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/311
) - http://cwe.mitre.org/data/definitions/319
) - http://cwe.mitre.org/data/definitions/930
) - http://cwe.mitre.org/data/definitions/934
) - http://cwe.mitre.org/data/definitions/1028
) - http://cwe.mitre.org/data/definitions/1029
)

Verify that data handled by Amazon Kinesis Firehose is encrypted on the server. 

The following requirements should be tested.

- __Stream encryption__.  The data that's temporarily stored in the Kinesis Firehose delivery stream is encrypted before it's delivered.
- __Destination encryption__. The data in the final destination is encrypted.


To verify encryption of the Kinesis Firehose delivery stream:

1. Determine the data source.
    - If the source is a Kinesis data stream, the data will not be stored in Kinesis Firehose at all. Instead, it's stored in the Kinesis data stream. Kinesis Firehose retrieves it, buffers it in memory, and sends it directly to its destination. Then the encryption should be enabled on the underlying Kinesis data stream.
    - If the source is __not__ a Kinesis data stream then continue with the following steps.
2. In the Amazon Kinesis page, choose __Delivery streams__.
3. Select the stream.
4. Choose the __Configuration__ tab.
5. At the __Server-side encryption__ section should say __Enable server-side encryption for source records in delivery stream__.
         

Verifying steps for the destination's encryption depends on the delivery's data source. For example, if Kinesis Firehose is delivering to S3, verify that encryption is on for that S3 bucket:

1. On the Amazon Kinesis page, choose __Delivery streams__.
2. Select the stream.
3. Choose the __Configuration__ tab.
4. In __Destination settings__ section.
5. Expand the __Buffer hints, compression and encryption__ section.
6. Verify  __Encryption for data records__ is set to __Enabled__.

For Redshift, Kinesis Firehose uses S3 as an intermediate storage location before copying the data. For other destinations, Kinesis Firehose uses S3 as a backup for data that fails the transfer process. In both cases, encryption should be enabled on the S3 bucket in the Firehose delivery stream settings.

## Note
These steps are for verifying encrypting of the Kinesis Firehose data when buffered or stored on the server. For __encryption in transit__, Kinesis Firehose always uses an HTTPS endpoint.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2417/",Incomplete,,P216,Clear Text and Unencrypted Transmission of Information,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure’s applicable rules and Project Survey criteria were met but it will be removed once the New Content Updates have been accepted.

"
Testing,T222,Verify server-to-server authentication,6,"Systems that communicate with one another may not be protected by authentication controls. This can allow an attacker to emulate one system and attack another without requiring any authentication credentials.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/521
)

Use the following guidelines for verifying server-to-server authentication:

1. Obtain a list of all servers in-scope for this application along with IP addresses.
    - For example, a web server, a presentation tier / application server, a middle tier server, or database server.

2. For each pair of servers that communicate with each other, verify that the servers require some form of password, certificate, or other authentication credential to communicate.
    - Alternatively, try to connect directly to the server from a different machine on the same network to determine if the authentication is done by IP.

3. If any machine on the network can connect to a server and access or modify application data without authentication credentials, then this test __fails__.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T222/",Incomplete,,P703,Insufficient System-to-System Authentication,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authentication > Requires Server-to-Server Authentication > Yes AND
• Changes to authentication (Hidden Answer)"
Testing,T228,Test that application restricts HTTP message size,9,"The number, or size, of a system's resources is not controlled, which allows an attacker to cause a denial of service (DoS) attack that consumes all available resources. This happens when the attacker can trigger an allocation of limited resources, such as memory, file system storage, database connection pool entries, and CPU.

A resource exhaustion attack such as this prevents legitimate users from accessing the application, and could potentially impact the surrounding environment. For example, a memory exhaustion attack could slow down not only the application itself, but also its host operating system.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/400
)

Consider the following parameters for HTTP message size restrictions:

1. The maximum number and length of request headers and bodies:

    - Request body size.
    - Number of request header fields.
    - Request header fields size.
    - Request line size.
    - XML request body size.

2. The maximum timeout values:

    - Request read timeout.
    - Keep-alive timeout.

3. The maximum number of concurrent connections and connections backlog capacity.

For each of these items, complete the following steps:

1. Ask developers and review documentation, or server settings, for the maximum value for the attribute.
    - If you are unable to obtain this information, assume it is an excessively large, but reasonable value as the upper bound.

2. Attempt to send an HTTP request (or a set of concurrent requests) with the attribute slightly larger than the maximum value determined in step 1.
    - You can use [Burp Suite](http://portswigger.net/burp/) or [Postman](http://www.getpostman.com/) to create and send arbitrary HTTP requests.
    - [Apache JMeter](http://jmeter.apache.org/) is a useful tool for establishing concurrent connections to the server.

    This test __fails__ if the server accepts the request and sends back a regular HTTP 200 response.

3. Make sure that the request sent in step 2 did not fail due to an unrelated reason, such as an invalid session.
    - If in doubt, review server logs to determine the cause of failure. 
    
    This test __fails__ if the invalid message reaches the application layer or fails for other reasons.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T228/",Incomplete,,P293,Uncontrolled Resource Consumption (Resource Exhaustion),6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Protocols > Application Layer > Application Layer Protocols Used > Uses an HTTP-based protocol AND
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Development,T270,Follow best practices for storing application data on Android devices,7,"Storage devices, such as memory cards, disks, and USB devices are normally accessible by other users and processes. For example, Android external storage could be available to all the running apps. If any sensitive data is stored in clear text on these devices, attackers could potentially read the data, if proper access control mechanisms are not implemented.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/312
) - http://cwe.mitre.org/data/definitions/315
) - http://cwe.mitre.org/data/definitions/921
) - http://cwe.mitre.org/data/definitions/922
) - http://cwe.mitre.org/data/definitions/934
)

Follow these guidelines to store data securely on an Android device:

- When writing files, never use MODE_WORLD_READABLE, or MODE_WORLD_WRITEABLE (deprecated from API level 17).
    - Never use external storage for storing sensitive data that you don't want to be accessible to other processes.
    - Never modify or relax access permissions for the app's private directories using `File` or `FileProvider`.

- Use `EncryptedSharedPreferences` to store key-value pairs in encrypted format. 

- When using external storage, always check its availability before making an attempt to read or write content.
    - Use `getExternalStorageState()` of the Environment class to check external storage availability.

- If you need a large amount of space for storing an application's sensitive data, encrypt the data before writing it to external storage.

- Encrypt sensitive data stored on internal storage.
    - Keeping sensitive data on the client is not recommended.

- Encrypt sensitive data before writing to the SQLite database.
    - This data could be accessible on rooted devices.

- After a user uninstalls the application, do not store app files that belong to the user in the application's directory (for example, photos or purchased media files in internal storage).
    - Follow the guidance above regarding securing any sensitive information and storing them in shared folders on external storage.

- When it is necessary to save user or application secrets on the client, use a secure key storage mechanism for storing keys, certificates, and passwords. For example, with a browser that saves user passwords locally, or an offline password management solution, store keys securely using Java keystores.

- Do not store serialized objects with sensitive data in an unencrypted format when using Java serialization and deserialization.
    - Data in serialized objects are easy to extract and read.
    - Treat these serialized objects as confidential data and follow the rules of handling and storing confidential data.

__Note__: From Android 7.0 [`DownloadManager` cannot share _privately stored_ files by filename](https://developer.android.com/about/versions/nougat/android-7.0-changes.html#perm) ( `COLUMN_LOCAL_FILENAME`).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T270/",Incomplete,,P209,Cleartext Storage of Sensitive Information without Access Control Mechanisms,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T227,Verify that application's access to database is restricted,8,"Running an application with extra privileges, such as root or administrator, can disable the standard security checks performed by the operating system and surrounding environment. In addition, pre-existing weaknesses can become security vulnerabilities at raised levels of privilege.

Privilege management functions can behave in unexpected ways on different platforms. These inconsistencies are most obvious when a non-root user is transitioned to another non-root user.

Further, signal handlers and sub-processes inherit the level of privilege of the owning process. As a result, a process with root privileges will produce signal handlers and sub-processes with root privileges.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/250
)

Use the following guidelines to verify that an application's access to the database is restricted:

1. Review source code to determine the account that the application uses to connect to its database at runtime. 
    - For example, the application has an id 'bank_app' that it uses to connect to the database.

    This test __fails__ if the application uses a database super-user account, such as 'sa' (System Administrator).

2. Review the database permissions for the user identified in step 1.

    This test __fails__ if the user has more permissions than it requires.
        - Common examples of excessive permissions include the ability to drop tables, alter the database schema, or execute unnecessary prepared statements.

__Note__: This verification countermeasure requires access to source code and a fair understanding of the source code structure.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T227/",Incomplete,,P150,Running With Unnecessary Privileges,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Application General > Components > Components In Use > Uses a database AND
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Application General > Components > Components In Use > Uses a database AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Testing,T311,Verify that sensitive data is not sent using implicit Intents or Broadcasts,6,"Any application can register to accept Android implicit Intents and broadcasts. This is done by declaring to handle them through defining intent filters in the Android manifest file. Making wrong assumptions about the channel end-point creates an opportunity for an unauthorized receiver to access sensitive data if it is sent using these methods.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/923
) - http://cwe.mitre.org/data/definitions/927
) - http://cwe.mitre.org/data/definitions/941
)

Consult developers to find parts of the application that handle and send sensitive data to other applications or components. For each instance:

- Verify that only explicit intents that specify the class or component of the receiver are used to send sensitive information.

- Verify that your application does not broadcast sensitive information.
    - Avoid Sticky broadcasts in particular because they cannot be protected by permissions.

- If you broadcast between your own applications:
    - Verify that all broadcasts are protected by using permissions, and the protection level of the permission is set to signature. This way, it is only available to your own applications.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T311/",Incomplete,,P738,Insufficient Restriction of Intent Receivers in Android,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer) AND
• Changes to inbound/outbound interfaces (Hidden Answer)"
Testing,T82,Test authentication error consistency,5,"If an error message is too descriptive or response times are different for different inputs during __authentication__, __new account creation__, or __password recovery__, it can expose account details. For example, a detailed error message or response time discrepancy can tell an attacker if a username is already in use, or if a password for a given user is incorrect. These exposures can be accidental (bug), or intentional (design), and lead to user-enumeration.

User-enumeration is the process of obtaining a list of valid user accounts by exploiting the authentication features of an application. This list can be used for unauthorized account access, or valid account lockout (denial of service attack, DoS attack).

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/204
)

Test the security of your authentication for consistency by using the following steps:

1. Attempt to log in with an invalid username. 

2. Inspect the response and cookies. 

3. Attempt to log in with a valid username, but invalid password.

4. Inspect the response and returned cookies.

    If the application displays a **personal phrase or image**:

5. Attempt to submit 10 consecutive different usernames.

This test __fails__ if any of the following are true:

- The two responses from steps 2 and 4 are different.
- The structure or length of the cookies from steps 2 and 4 are different.
- After step 5, you do not see an **anti-automation** feature, such as a CAPTCHA.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T82/",Incomplete,,P100,Response Discrepancy Information Exposure,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Changes to authentication (Hidden Answer) AND
• Features and Functions > Authentication > Authentication Features > Has direct or third party authentication for end users, devices or nodes"
Development,T441,Ask for Android permissions at runtime,4,"If Android permissions are not managed properly (and not asked for at the right time), there are chances that:

1. The application asks for too many permissions and users withdraw from installing the application altogether.
2. The application does not provide enough justification to convince users to grant the permissions.
3. The application fails to operate properly because of missing permissions.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/264
)

For your application to run on Android Marshmallow and later, ask for permissions at runtime and do not assume that you have permissions after installation.

Use the following guidelines:

- Declare the required permissions in the Manifest file.
    - For more information, see [Add Permissions to the Manifest](http://developer.android.com/training/permissions/declaring.html#perm-add).

- Call `ContextCompat.checkSelfPermission()` at runtime to check if your application has a specific permission.
    - For more information, see [Requesting Permissions at Run Time](http://developer.android.com/training/permissions/requesting.html).

- Provide some justification for asking for specific permissions in a customized window when required.
    - To know if you need to provide more explanation, use the `shouldShowRequestPermissionRationale()` method.
    - The method returns `true` if the app has requested a permission previously but it has been denied, which shows the user needs more explanation, and returns `false` if ""Don't ask again"" is checked by the user.
    - Display the information asynchronously, and do not block the main thread.

- Override the `onRequestPermissionsResult()` method to handle the result of permission requests.
    - Avoid any action that requires the requested permission if it is denied.

- Develop the application in a way that works with any combination of permissions and does not crash.

__Note__: 

- In Android O, the app is only given the runtime permissions it has explicitly requested.
    - However, when the user gives a permission to the app, all subsequent requests for permissions in that __permission group__ are automatically granted.
    - For example, if you request the `SEND_SMS` permission from the SMS permission group, then Android does not prompt the user for `READ_SMS`, which is in the same group, when required if it is listed in the manifest file.
    - Previously, a bug in Android O allowed the system to grant the app the rest of the permissions in the same permission group registered in the manifest file when the app received a permission at runtime. This error is fixed.

__Note__: To get the hardware ID of other devices around you through Bluetooth and Wifi, you need `ACCESS_FINE_LOCATION` or `ACCESS_COARSE_LOCATION` permissions in Android Marshmallow and later. This is because with the widespread use of beacons with location information, it will be possible to trace the device using Bluetooth and Wifi scanners.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T441/",Incomplete,,P778,Lacking proper strategy for management of Android permissions,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T563,"Test that critical functions of Android applications are not affected by Doze, Standby and battery saving limitations",2,"The Android operating system limits the resources available to applications in power-saving modes, such as Standby and Doze. If the application has time-critical operations, or if it cannot safely recover from such modes, critical functions of the application can be threatened, especially those that need to be triggered at specific times.

Follow these instructions to test that critical functions of the application are not negatively affected by Doze, Standby, and other battery saving limitations:

- Identify the time-critical functionalities of the app.
    - You may need to consult with developers.
    - Pay special attention to functions that need network connection (especially notifications), or the ones that depend on AlarmManager.

- Use `adb` to simulate Doze and Standby modes.
    - For detailed instructions, see the Android documentation on [Optimizing with Doze and App Standby](https://developer.android.com/training/monitoring-device-state/doze-standby.html#testing_doze_and_app_standby).

- Test that the app gracefully recovers from Doze and Standby modes.

- Test that the functions are not affected or delayed by those modes if the delay is not acceptable.

- Test that if the application needs to work in the background with no active components, the battery saving limitations do not block the critical functionalities.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T563/",Incomplete,,P802,Negative impact of Doze/Standby/Battery Saving Modes on Time-critical Functions of Android Applications,2,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)"
Requirements,T59,Use standard libraries for cryptography,8,"Using a non-standard algorithm or an algorithm with wrong parameters is unsafe because a determined attacker may be able to break it and compromise data. Moreover, techniques to break these algorithms may be well-known and widely available.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/325
) - http://cwe.mitre.org/data/definitions/327
) - http://cwe.mitre.org/data/definitions/934
) - http://cwe.mitre.org/data/definitions/1240
) - http://cwe.mitre.org/data/definitions/1279
)

Never try to develop a homemade cryptographic algorithm or write a new implementation of a known algorithm. Only use tested implementations for encryption, digital signature generation and verification, and other cryptographic algorithms. 

Cryptanalysis is the study of breaking cryptographic algorithms. Cryptanalysts are usually mathematicians who try to break the underlying mathematics or look for implementation faults. As a result, application security must always rely on known and secure algorithms. Real-world implementations often suffer from subtle errors, such as attackers being able to determine the size of a key based on how long the encryption process takes.

### Using native cryptography libraries in Android NDK

In Android 7.0 you can only use public native NDK APIs and you cannot dynamically link against private native non-NDK platform libraries. You should also make sure that third party native libraries used in your application do not call such private native platform libraries. For more information, see [Android 7.0 Behavior Changes](https://developer.android.com/about/versions/nougat/android-7.0-changes.html#ndk).

In general, avoid using native cryptographic libraries that are not part of public native NDK APIs including a platform's native OpenSSL or BoringSSL cryptography libraries such as libssl.so or libcrypto.so. Instead, include a reliable native cryptography library of your choice in your application's package and call the native cryptography functions through Java Native Interface (JNI), or take advantage of GMS Security Provider from Google for better results.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T59/",Incomplete,,P224,Use of weak cryptographic algorithms or unsecure algorithm practices,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Development,T72,Use safe arithmetic to avoid integer overflow,7,"The application performs a calculation that can produce an integer overflow or underflow. This can happen when an application's logic assumes that a resulting value will always be larger or smaller than the original value. This can lead to other weaknesses because the size of the buffer is incorrectly calculated, such as a buffer overflow.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/128
) - http://cwe.mitre.org/data/definitions/190
) - http://cwe.mitre.org/data/definitions/191
)

Arithmetic operations on numeric primitives such as integers, shorts, and longs may be vulnerable to overflow. For example, if you add two large positive integers the result may be negative. The inverse is true for negative numbers.

Other operations such as subtraction, multiplication, division, and exponents can be vulnerable as well. This is of particular concern if you use at least one untrusted number in an operation, such as a user-supplied number.

To avoid overflow, you can cast one of the operands or the result to a primitive with more bits. For example, you can cast a **short to an int** or an **int to a long** in most languages. Alternatively, you can use logical checks to test for overflow. 

Assuming o1 is operand 1, o2 is operand 2, and r is the result, you use the following checks:  

 * For o1 * o2 = r, check that r / o2 = o1  
 * For o1 ^ o2 = r, check that log r base o2 = o1  
 * For o1 + o2 = r, check that r > 0  
 * For o1 + o2 = r:
    - If o1 and o2 are both positive, then check that r > 0
    - If o1 and o2 are both negative then check that r < 0

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T72/",Incomplete,,P87,Integer Wraparound,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Susceptible to integer overflow (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Activities,T1385,Institute secure logging and event monitoring,8,"There are no processes for logging and/or monitoring or the existing processes are simply not adequate. Logs are the fundamental elements for forensics and the tool for discovering what has gone wrong. They are also used for accountability purposes and are particularly useful in insider attacks.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/1036
)

Follow these guidelines to establish and execute a process for logging and monitoring security events:

1. Define audit log categories and configure the audit policies accordingly.
2. Centralize the logs using automatic consolidation. Centralization and consolidation require technical configuration for synchronizing system clocks.
3. Keep the logs in two formats: flat text file and log database file. Flat text files are easily compressible and ideal for archiving.
4. Configure policies to set up real-time alerts and notifications for monitoring, such as Windows event logs for Windows systems and Syslogs for Nix systems.
5. Adopt a methodology for continuous log monitoring by defining the frequency with which you want to check logs. Once a log is found with a suspicious pattern, an alert or notification must be issued.
6. Generate reports for [key stakeholders](/library/glossary/G64/).
7. Restrict the access to logs based on the [need-to-know principle](/library/glossary/G95/).
8. Retain log files for a responsible amount of time (decide how long to keep log files based on business needs and regulation compliance).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1385/",Incomplete,,P1183,No secure processes for logging and monitoring events,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Activities,T1388,Triage and fix vulnerabilities discovered during automated and manual security tests,10,"Not addressing the findings from both automated and manual test results causes the potential vulnerabilities remain unfixed and make the whole system unsecure and vulnerable to all kinds of attacks.

Follow these guidelines to consistently triage and remediate software vulnerabilities:

1. Consistently resolve security weaknesses identified during the testing processes (e.g., manual, SAST, DAST, Penetration testing, etc.).
2. Record all security vulnerabilities details identified by manual and automated testing. 
3. Assess vulnerabilities for risk and impact following a common measuring method such as [CVSS (Common Vulnerability Scoring System)](https://nvd.nist.gov/vuln-metrics/cvss) if possible.
4. Prioritize all vulnerabilities based on their assessed risk, and assign a designated owner for remediation.
5. Track all vulnerabilities until remediation, and test before being closing them.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1388/",Incomplete,,P1225,Unmanaged test result findings,10,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Testing,T315,Verify that potential security-critical events are logged,5,"When security-critical events are not logged properly, or when the logs are unreliable, malicious behavior can be more difficult to detect and may hinder forensic analysis after a successful attack. 

For example, failed login attempts should always be logged, and logs are unreliable if they can be modified or deleted without authorization.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/778
)

Verify that security-specific logs are created in case of potential malicious activities, and that they consist of enough information:

For a majority of applications, especially web applications, include these data items in the logs (if relevant and applicable):

* AE2 Multiple Failed Passwords
* IE2 Violations Of Implemented White Lists
* ACE2 Modifying Parameters Within A POST For Direct Object Access Attempts
* ACE3 Force Browsing Attempts
* ACE4 Evading Presentation Access Control Through Custom Posts

Verify that a consistent time reference is used among logging module, database, application and any other systems using or examining the logs.

Verify that these events and detection points are logged (if possible and relevant):

* RE1 Unexpected HTTP Commands
* RE2 Attempts To Invoke Unsupported HTTP Methods
* RE3 GET When Expecting POST
* RE4 POST When Expecting GET
* AE1 Use Of Multiple Usernames
* AE3 High Rate Of Login Attempts
* AE4 Unexpected Quantity Of Characters In Username
* AE5 Unexpected Quantity Of Characters In Password
* AE6 Unexpected Types Of Characters In Username
* AE7 Unexpected Types Of Characters In Password
* AE8 Providing Only The Username
* AE9 Providing Only The Password
* AE10 Adding Additional POST Variables
* AE11 Removing POST Variables
* SE1 Modifying Existing Cookies
* SE2 Adding New Cookies
* SE3 Deleting Existing Cookies
* SE4 Substituting Another User's Valid Session ID Or Cookie
* SE5 Source IP Address Changes During Session
* SE6 Change Of User Agent Mid Session
* ACE1 Modifying URL Arguments Within A GET For Direct Object Access Attempts
* IE1 Cross Site Scripting Attempt
* EE1 Double Encoded Characters
* EE2 Unexpected Encoding Used
* CIE1 Blacklist Inspection For Common SQL Injection Values
* CIE2 Detect Abnormal Quantity Of Returned Records.
* CIE3 Null Byte Character In File Request
* CIE4 Carriage Return Or Line Feed Character In File Request
* FIO1 Detect Large Individual Files
* FIO2 Detect Large Number Of File Uploads
* UT1 Irregular Use Of Application
* UT2 Speed Of Application Use
* UT3 Frequency Of Site Use
* UT4 Frequency Of Feature Use
* STE1 High Number Of Logouts Across The Site
* STE2 High Number Of Logins Across The Site
* STE3 High Number Of Same Transaction Across The Site

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T315/",Incomplete,,P619,Insufficient Logging or Insufficient Protection of Logs,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Requires security logging (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T87,Verify that all data in transit is encrypted using a secure TLS channel,8,"Many communication channels can be sniffed, or eavesdropped on, by attackers during data transmission. For example, unencrypted network traffic in clear text can be sniffed by any attacker who has access to a network interface. This makes unsecured communication channels easy for attackers to exploit.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/311
) - http://cwe.mitre.org/data/definitions/319
) - http://cwe.mitre.org/data/definitions/930
) - http://cwe.mitre.org/data/definitions/934
) - http://cwe.mitre.org/data/definitions/1028
) - http://cwe.mitre.org/data/definitions/1029
)

Use a network monitoring tool to ensure that data in transit is sent over a secure TLS channel:

- Use a tool such as Wireshark or Ethereal. Focus on testing the authentication and post-authenticated processes. This test __fails__ if any of the network traffic transmits clear text data.

Attempt to connect to all SSL/TLS enabled interfaces (all available IP/Port). For each connection:

- This test __fails__ if SSLv1, SSLv2, or SSLv3 are offered as negotiable protocols.

- List all available ciphers:
    - If any NULL, or EXT (Export) ciphers are available, then the test __fails__.
    - The server must explicitly disallow EXPORT ciphers (which are weak ciphers) even if the client does not request it.

- This test __fails__ if any DES ciphers are offered.

- This test __fails__ if TLS Compression is enabled/offered.
    - This is due to the CRIME side channel attack vulnerability (compression ratio info-leak made easy, see [CRIME Attack Vector](/library/glossary/G10/)).

- Offer multiple ciphers to a server and check if it picks the more secure ciphers over less secure ones.
    - Specifically, verify that the server uses __SHA384/SHA256 instead of SHA1__, and __SHA2 family of ciphers instead of MD5-based ciphers__.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T87/",Incomplete,,P216,Clear Text and Unencrypted Transmission of Information,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• Changes to inbound/outbound interfaces (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Testing,T323,Test that default accounts are disabled or default passwords are changed,9,"Third party systems such as servers and libraries may have default passwords and accounts associated with them. Users may be able to use these default accounts to authenticate into those systems.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/276
)

Use the following guidelines to test that default passwords are changed or default accounts are disabled:

- Identify all third party libraries/software that are used by your application and their default accounts.

- Identify all default user accounts that are created by your application.

- Test that accounts that are unnecessary after installation/deployment are deleted or disabled.
    - Work with system administrators to check if those accounts are removed.
    - This test __fails__ if these accounts are not removed.

- Test the default passwords for third party library/software or application accounts.

- This test __fails__ if any of the default passwords work.
    - There are some cases in which permitting the use of default passwords could be acceptable.
    - For example, a wireless modem may be shipped with a default admin username and password.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T323/",Incomplete,,P693,Use of Default Passwords and Accounts,9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authentication > Requires Server-to-Server Authentication > Yes AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authentication > Authentication Features > Authentication Method > Uses passwords AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Has authentication (Hidden Answer) AND
• Changes to authentication (Hidden Answer)"
Requirements,T35,Fine-tune HTTP server settings,9,"The number, or size, of a system's resources is not controlled, which allows an attacker to cause a denial of service (DoS) attack that consumes all available resources. This happens when the attacker can trigger an allocation of limited resources, such as memory, file system storage, database connection pool entries, and CPU.

A resource exhaustion attack such as this prevents legitimate users from accessing the application, and could potentially impact the surrounding environment. For example, a memory exhaustion attack could slow down not only the application itself, but also its host operating system.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/400
)

Set limits on incoming HTTP messages, and notify designated administrator roles of a violation.

# HTTP request headers and bodies

Limit the __number__ and __length__ of HTTP request __headers__ and __bodies__ accepted from the clients to a minimum. Set tighter endpoint-specific restrictions depending on their function to minimize the attack surface.

Limit the following request attributes:

- Request body size
- Number of request header fields
- Request header fields size
- Request line size
- XML request body size

# Server timeout

Tune the connection __timeout__ settings of the server. A higher connection timeout gives the server more time to engage with the application. This increases the likelihood for various types of server attacks, such as [Slowloris](http://en.wikipedia.org/wiki/Slowloris_%28software%29).

__Note:__ A small value may introduce issues with the legitimate users with slow connections. Set timeout values based on your normal connection statistics.

Tune the following timeout settings:

- Request read timeout
- Keep-alive timeout

# Server connections and backlog capacity

Tune the maximum number of __simultaneous connections__, and increase the capacity of the backlog of pending connections where possible.

__Note:__ The backlog prolongs a denial of service (DoS) attack because it holds incomplete requests (including malicious ones), but reduces the impact of small attacks.

Most web and application servers provide a configuration option for each of these limits. See the server-specific documentation, and review your application needs when adjusting each of these settings.

## Considerations

The meaning of ""reasonable"" varies according to a system's available resources and an application's features and needs. Consider the following:

- A maximum URL size of 2000 characters is considered reasonable and supported by most browsers. 
    - Smaller values (256) might interfere with features such as single sign-on.

- While a 1 MB limit on HTTP request sizes is reasonable for most applications, it might restrict file upload speeds where applicable.

- Maximum number of concurrent connections:
    - Carefully review the operational environment, hardware, and software resources, such as system memory available to the HTTP server.
    - There is no common value that works for all environments.

- Decreasing the keep-alive time-out might have a small performance impact. 
    - A value above 60 seconds is not recommended according to [Apache Performance Tuning](http://httpd.apache.org/docs/2.2/misc/perf-tuning.html).

For more information about web server security, see [Apache Security Tips](http://httpd.apache.org/docs/trunk/misc/security_tips.html).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T35/",Incomplete,,P293,Uncontrolled Resource Consumption (Resource Exhaustion),6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Protocols > Application Layer > Application Layer Protocols Used > Uses an HTTP-based protocol AND
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Development,T46,Do not log confidential data,4,"Logging all information may be helpful during development stages, but logging levels be set appropriately before a product ships. This prevents sensitive user data and system information from being accidentally exposed to potential attackers.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/532
)

Use the following guidelines for logging confidential data:

__Never log confidential data__

- Instead, log a hash, or the last few digits of confidential numbers, such as with credit card numbers.
    - Confidential data includes passwords, credit card numbers, social security, and social insurance numbers.
    - Developers often log these items as part of the debugging process and may forget to remove them before deploying to production. 

__Never log passwords__

* Consider logging the user ID as a means of user identification.
* If absolutely necessary for debugging, create separate test code in development to log the test password that will not be deployed to production.

__Never log personally identifiable information (PII)__

* To log PII securely, anonymize it with hashing, or using auto-enumerated database IDs.
    * PII includes email, address, date of birth, and health data. 
    * Once secured, if the related account is removed, its log data can no longer be associated with a specific person, and will not disclose any private data.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T46/",Incomplete,,P420,Information Leak Through Log Files,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer) AND
• Features and Functions > More Features > Miscellaneous > Performs diagnostic/debug logging"
Development,T64,Set no-cache for confidential web pages,4,"The application must have a caching policy that defines to what extent its web pages and form fields should be cached.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/525
)

Use the following guidelines for setting ""no-cache"" and ""no-store"" on web pages:

- Enable the ""no-cache"" and ""no-store"" settings for HTTP headers in all confidential pages.
- This prevents browsers from caching confidential data, which another user on the same computer could view later.

Set the following HTTP headers:

    Pragma: no-cache
    Cache-Control: no-cache, no-store, max-age=0, must-revalidate
    Expires: -1

**Note:** To protect against [Web Cache Deception attack](http://omergil.blogspot.com/2017/02/web-cache-deception-attack.html):

- Make sure that the caching services you use obey the Cache-Control headers and do not cache unexpected resources.
- Configure your website to reject requests with trailing pathname information that follows a non-existent file in an existing directory or an actual filename.
    - For example, reject requests with a path similar to `https://www.sdelements.com/dashboard/style.css` if you are not serving the file at this path.

## The misconception between no-store and no-cache

- For HTTP 1.1, the cache-control directive ""no-store"" must be set. 
- ""No-cache"" on its own tells the browser that it should revalidate with the server before serving the page from the cache.
    - As a result, if ""no-cache"" is set without ""no-store"", the browser can still store the page in its cache, but would only display it after revalidating it with the server.
    - This would cause unwanted storage and leakage of confidential data.

- Newer versions of Internet Explorer and Firefox have started treating the ""no-cache"" directive as if it instructs the browser to not even cache the page because of how frequently ""no-cache"" was misused.
    - It is __strongly advised__ to set the ""no-store"" directive.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T64/",Incomplete,,P412,Information Leak Through Browser Caching,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Protocols > Application Layer > Application Layer Protocols Used > Uses an HTTP-based protocol AND
• The application is a generic server application (Hidden Answer) AND
• Changes to user output (Hidden Answer)"
Activities,T1371,Use a software security management solution to select and track security controls,10,"Lack of a process for managing software security can result in having number of untracked security issues that can compromise a system. In order to manage and track security controls, it is necessary to use a software security management solution.

Follow these guidelines to monitor, track, and manage known software vulnerabilities:

1. Document a security standard to mandate software vulnerability management as a requirement to track and manage software vulnerabilities until they are fully remediated, and get it reviewed and approved by management. The standard must specify the need to test business applications regularly.
2. Document a software vulnerability management process explaining the approach used to test applications, with an assigned owner responsible for its completeness, currency, and ongoing execution. Explain the method(s) used to identify vulnerabilities (e.g., code reviews, software testing, penetration testing, quality control) as well as software re-testing and publication.
3. Perform vulnerability testing using automated scanning software or a commercial vulnerability scanning service. Testing should be run regularly based on a combination of code reviews, dynamic and static analysis tests.
4. Ensure that only a limited number of authorized individuals can execute vulnerability scans, and that tests are monitored to identify misuse and help detect unauthorized testing.
5. Set priorities and timelines for remediating all significant vulnerabilities based on their [criticality of software vulnerabilities](/library/glossary/G72/).
6. Select one or more support tools to assist with the software vulnerability management process. 
7 .Establish and follow a [software vulnerability remediation process](/library/glossary/G71/) to ensure that vulnerabilities are fixed in a consistent manner.
8. Set compensating controls to protect information in the event a vulnerability cannot be fixed (e.g., by adding additional access controls or performing detailed monitoring).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1371/",Complete,,P1188,Lack of software security management solution to track security controls,10,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Activities,T1375,Properly collect and protect sensitive data,10,"Lack of a process for collecting and protecting sensitive data can result in confidentiality and integrity issues for the data. Collecting unnecessary sensitive data can cause data exposure to attackers and not providing efficient protection methods can result in number of security issues including data misuse and identity thefts.

Follow these guidelines to protect information throughout its lifecycle:

1. Information must be protected during each stage of [information lifecycle management](/library/glossary/G84/). 
2. Establish default classification levels and store data centrally to improve management of data, files, and databases.
3. Maintain the confidentiality of data during its lifecycle by automatically encrypting data and supporting access controls.
4. Maintain the integrity of data during its lifecycle by automatically time-stamping data, digitally signing files, and checking backups for integrity.
5. Maintain the availability of data during its lifecycle by automatically backing up data or designing redundancy on the application architecture.
6. If the application is storing or processing [Personally Identifiable Information (PII)](/library/glossary/G8/), carefully consider how the [Generally Accepted Privacy Principles (GAPP)](/library/glossary/G86/) will be applied on the application and its supporting processes.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1375/",Complete,,P1180,Lack of process for collecting and protecting sensitive data,10,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Activities,T1374,Ensure the integrity of software release and update delivery,7,"Lack of process for ensuring the integrity of software release and update causes software releases to be unreliable and unsecured, because of the bugs and unexpected behaviour that have not been properly taken care of. Without a good policy and planning, releases can fail so many times, causing their remediation much longer.

Follow these guidelines to maintain the integrity of software code and components for releases and updates:

1. Control access to source code and configuration files and ensure that only authorized entities can make changes to them.
2. Use [integrity check methods](/library/glossary/G81/) (e.g., checksum or digitally signed certificates ensure that code is not tampered with or replaced by malicious attackers during update cycles).
3. Make sure that your software distribution method provides a chain of trust (such as through use of a TLS connection that provides compliant cipher-suite implementations), where the integrity method implemented is not cryptographically secure (such as through the use of digital signatures).
4. Use cryptographic functions to protect software code, especially proprietary code, files, and business logic.
5. Keep software releases consistent and ensure that older versions cannot replace a new version, treating them as separate entities.
6. Use version identifiers to distinguish different variants of software components to make sure that users download, and use the correct version.
7. Provide patch information for each update of a component, including bug-fix information and component versions. 
8. Change or withdraw components from a release in a controlled manner: removing a component should only be possible if there is no dependency from another component. Alternatively, change the scope of the release for that particular component by removing it from one or more release groups.
9. Use update mechanisms that cover all software, configuration files, and other metadata that may be used by the software for security purposes, or which may in some way affect security.
10. Follow a [release management process (RMP)](/library/glossary/G82/) within the SDLC.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1374/",Complete,,P1178,Lack of a process for ensuring the integrity of software release and update,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Activities,T1384,Back up and restore securely,8,"An established process for back up and recovery is non-existent or wanting. A good backup strategy can help you recover from many database attacks. Backing up is not so much about preventing attacks as it is about being able to recover from them. The more frequently you back up, the less data you'll lose in the event of a disruption. The more quickly you can recover, the sooner you'll be back up and running.

Follow these guidelines to implement an effective backup strategy:

1. Document a [backup standard and supporting procedure](/library/glossary/G100/).
2. Utilize a dedicated backup management software to strengthen the security of information backed up.
3. Ensure that backups include operating systems, database server software, files, virtual machines, and password repositories. 
4. Record backups in a log that includes details about the data backed up, date and time of the backup, the virtual location or the backup media used and its physical location.
5. Clearly and accurately identify backed up data as such.
6. Protect backups from accidental overwriting, and subject them to the same level of protection as 'production' information. Additionally, consider implementing [key backup data protection controls](/library/glossary/G101/). 
7. Plan for backups plans considering legal, regulatory and contractual requirements such as the handling of [personally Identifiable Information (PII)](/library/glossary/G8/), document retention schedules and customer information.
8. Review the backup plans to ensure that data is restored within a critical timescale beyond which a loss of service would be unacceptable to the organization. Backups must be kept as long as required by regulatory needs, a retention schedule, or service-level agreement (SLA) requirements. Remove backups that have expired their retention date from storage. 
9. For incremental backups, only back up data whose archive bit is 1 (changed).
10. When planning database backups, consider doing logical backups for most databases. For Oracle backups use exp or Data Pump, and for Microsoft SQL Server use the Import and Export Wizard or SQL Server Integration Services utility.
11. Verify backups to ensure that backed up software and information can be restored successfully. Document and follow [backup restoration best practices](/library/glossary/G102/).

To learn more about the types of backups and their differences, see [Backup Types](/library/glossary/G61/).
To familiarize yourself with the different techniques of performing backups, see [Backup Techniques](/library/glossary/G62/).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1384/",Incomplete,,P1179,A secure backup and restore processes are missing or lacking,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Activities,T1389,Perform penetration testing,9,"A process is nonexistent or wanting for penetration testing which is recommended to be performed at least once a year. It is recommended penetration tests be scheduled once a major feature is added to an in-house application or a framework being used is changed.

Follow these guidelines to plan and perform penetration testing:

1. Conduct a penetration test regularly (at least annually)  to determine the security and resilience in the design, architecture, coding and implementation of the target application(s).
    - Determine the frequency of penetration tests based on factors such as exposure, criticality, and compliance.
2. Identify and maintain a list of recognized external penetration testing entities, along with their availability and expertise.
3. The penetration test must identify vulnerabilities in the target application that could be exploited by threats through [scoping penetration testing practice](/library/glossary/G63/).
4. Take into account the [critical steps](/library/glossary/G113/) when testing web applications.
5. Score and prioritize findings based on risk using an established criteria (e.g., Common Vulnerability Scoring System (CVSS), or a comparing with published references such as from Common Vulnerabilities and Exposures (CVEs), when available).
6. Associate every vulnerability found with one or more recommendations for [remediation](/library/glossary/G114/). 
7. Combine effectiveness of all application security controls and the findings and:
    - report to the [point of contact](/library/glossary/G115/) (member of IT team in charge of the application) with supporting recommendations
    - present to management in clear business language
    - record in an information [risk register](/library/glossary/G116/) (e.g., a spreadsheet, database, dedicated risk management tool or GRC product for remediation).
8. Consider penetration testing as sensitive information and treat them as such. Share and communicate results on a need-to-know basis.
9. Conduct penetration testing on production-like (as close to production as possible) environment instead of development or test environment.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1389/",Incomplete,,P1184,Lack of a secure process for penetration testing,9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Testing,T92,Test absolute session timeout,3,"The application does not force sessions to expire after a period of time, leaving them vulnerable to attackers. Absolute, or hard, session timeouts impose a maximum age on a session, regardless of activity level. 

This control limits the time an attacker will have access to a hijacked session. Without this control, an attacker who successfully hijacks a session can keep the session alive for as long as the server keeps track of sessions.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/384
)

Use the following guidelines to test the absolute session timeout:

1. Authenticate into the application and attempt to browse to an access-controlled page.

2. Write a simple script to access the page regularly for the stipulated time period (such as 24 hours).

This test __fails__ if you are able to access the same page successfully without being automatically logged out.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T92/",Incomplete,,P707,No Absolute Session Timeout,3,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Session Management > Has Session Management > Yes AND
• The application is a generic server application (Hidden Answer) AND
• Changes to session management (Hidden Answer)"
Activities,T1891,Perform Privacy Impact Assessment (PIA),9,"Improper Privacy Impact Assessment (PIA) may result in intentional or unintentional leak or abuse of users' private information. This may cause breach of privacy regulations and financial penalties. Also, such breach may damage the reputation of the organization.

Follow these guidelines to perform a Privacy Impact Assessment (PIA):

- In a Waterfall methodology:

1. Define the project and scope. A PIA is typically performed on a project or application that will collect, process/use, store, or disclose[PI](/library/glossary/G8/). Perform a conceptual PIA during the early stages of the project or application to understand what PII is expected to be involved, what entities will participate (e.g., customers, suppliers, secondary applications), and the general architecture of the project. This step will inform what security and privacy requirements are expected to secure the PII and comply with the [Generally Accepted Privacy Principles (GAPP)](/library/glossary/G86/).
2. Analyze PII data flows. Map all proposed processes and sub-processes related to PII. Identify clusters of PII data and create a detailed diagram of how the PII flows through the organization, as well as to third parties such as vendors,  as a result of the business activities in question. Map what controls are in place to secure all PII data and meet appropriate safeguarding principles, and where controls are lacking. Map who will have access to PII at each stage of the data flows, how PII will be disseminated, how and where the PII data will be backed-up, and how privacy requests and complaints will be handled by the organization.
3. Identify privacy risks. Identify where PII could potentially leak, be accessed by unauthorized parties, lost, or corrupted.
4. Report on PIA results. Create a documented evaluation of the privacy risks and their potential implications, as well as a discussion of possible actions to mitigate or remedy every risk identified.
5. Later in the project lifecycle, update  the PIA at the appropriate lifecycle stages (development, implementation, production) to assess if the controls implemented are well designed and effective to meet the security and privacy requirements and update data flow mapping and safeguarding, as well as risk assessment.

- In an Agile methodology:

If relying on Agile development methodologies, the PIA is conducted along with the Agile development process, by first identifying privacy requirements, and implementing them as requirements throughout each sprint. In this situation, embedding privacy knowledge with the development team is essential, either through allocating a privacy office representative to be part of the Agile development, or by training developers on privacy.

### Internal data privacy self-assessment

Conduct internal audits and self-assessments of data privacy management.

- Monitor and report privacy management metrics.
- Maintain documentation as evidence of compliance and accountability.
- Maintain certifications, accreditations, and data protection seals for purposes of demonstrating compliance to regulators.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1891/",Incomplete,,P1435,Lack of Privacy Impact Assessment (PIA),9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Requirements,T26,Expire sessions on logout,6,"The application's session does not expire after logging out and creates a window of opportunity for attackers to hijack the session. This is an especially prominent weakness for applications on shared devices.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/613
)

Use the following guidelines for expiring sessions:

- Expire a session when a user logs out to prevent old sessions from being accessed by others on shared machines or devices.

- Additionally, terminate any process associated with the user's session unless it is designed to continue after the session is terminated.

- If a user has not explicitly logged out previously to end a session (such as by using a logout button), provide them with a reminder to do so when they next log in.

- If the user is unable to log out, or the logout function does not terminate the session completely, data may continue to be collected (such as tracking sites the user visits elsewhere).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T26/",Incomplete,,P694,Sessions Not Expired Upon Logout,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Session Management > Has Session Management > Yes AND
• The application is a generic server application (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Session Management > Has Session Management > Yes AND
• The application is a generic server application (Hidden Answer) AND
• Changes to session management (Hidden Answer)"
Requirements,T214,Protect confidential files on operating system or server,9,"The product stores sensitive information in files or directories that are accessible to actors outside the intended control sphere, such as on a server or a rich client.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/538
) - http://cwe.mitre.org/data/definitions/548
)

Use the following guidelines for protecting confidential files on operating systems and servers:

- Use operating system (or server) controls to enforce minimum access rights on any confidential files used by the application.
    - Restricting access reduces the risk of a rogue application or malicious user accessing the data.
    - For example, by using a file containing Personally Identifiable Information (PII) or directory listings.

- For confidential files passed to the program as input, enforce this by validating that the file has minimum access as expected before using the content.

- If the access is too wide, such as by allowing public read access, return an error to the user to correct the issue, or apply the correct access rights if the file is to be managed by the application.

- Store files obtained from untrusted sources outside the `webroot`, with limited permissions, and with strong validation.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T214/",Incomplete,,P426,File and directory information exposure,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Testing,T229,Verify that logs do not contain confidential data,4,"Logging all information may be helpful during development stages, but logging levels be set appropriately before a product ships. This prevents sensitive user data and system information from being accidentally exposed to potential attackers.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/532
)

Use the following guidelines for finding confidential data in logs:

1. Obtain a production application log file.

2. Determine the kinds of confidential data that the application uses.
    - For example, passwords, credit cards, social insurance / social security numbers, and protected health information.

    This test __fails__ if you see any instances of confidential data in log files.

    __Note__: You may want to work with an application developer to better understand the data in an application log file.

3. Alternatively, examine source code for where the application handles confidential data specified in step two.
    - Look at the log statements in these areas of source code and determine if the application is explicitly logging confidential data.

__Note__:

Developers may define severity levels for logging differently (DEBUG vs. ERROR). As a result, they may have certain levels of logging enabled in development and disabled in production.

- Do not fail the test if there is a logging statement for confidential data that is disabled in production.
    - In these cases, verify that the production server log level is consistent with the developer's claims.
    - For example, the level is set to ""ERROR"" or higher, and ""DEBUG"" is not logged.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T229/",Incomplete,,P420,Information Leak Through Log Files,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer) AND
• Features and Functions > More Features > Miscellaneous > Performs diagnostic/debug logging"
Testing,T230,Test that sever-to-server system accounts meet minimum password requirements,8,"System accounts used for server-to-server authentication without sufficient password requirements may be susceptible to brute force, dictionary, or rainbow table attacks. System accounts are often not subject to the same level of control as end user accounts.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/521
)

Use the following guidelines to test the minimum password requirements for server-to-server system accounts:

Attempt to create a new server account with a simple password that does not meet minimum password standards. For example, less than 5 characters, uses dictionary words, and so on.

This test __fails__ if you are able to successfully create this account with a weak password.

__Note__: The same test can be done by attempting to change the password for an existing account. However, using an existing system account might result in the interruption of service of the production environment and must be avoided.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T230/",Incomplete,,P687,Insufficient System Account Password Requirements,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authentication > Requires Server-to-Server Authentication > Yes AND
• Changes to authentication (Hidden Answer)"
Testing,T297,Verify that target pathname is validated before retrieving local resources,5,"Many file operations are intended to take place within a restricted directory. By using special elements such as "".."" and ""/"" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. This is called ""path traversal"".

**Relative path traversal** uses relative path names, such as ""../"", which in most modern operating systems is interpreted as the parent directory of the current location. **Absolute path traversal** uses absolute pathnames, such as ""/usr/local/bin"", which may be useful in accessing unexpected files.

Also, in many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of an attack. For example, the software may add "".txt"" to any pathname to limit the attacker to text files, but a null injection may remove this restriction.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/22
) - http://cwe.mitre.org/data/definitions/932
)

Use the following guidelines to verify that a target pathname is validated before retrieving any local resources:

- Work with developers to locate places in the application where you calculate the address of local resources, such as images or local files, and return or display those resources.

- For each of those cases, try to build a reference to a file outside the application's workspace, or in a shared location, such as a mass storage:
    - Use `/..` (`../folder/file`) or absolute paths (`/folder/file`) to build the references.
    - For example, if your application is supposed to only allow access to the files in a folder such as `/public`, test these file paths:

         - Test `../MYFILE.TXT` (replace ""MYFILE.TXT"" with a file in the parent folder of `/public` which should not be available to users).
         - Test `..../MYFILE.TXT`.
         - Test `../..../MYFILE.TXT`.
         - Test an absolute path such as `/folder/file` or `c:\folder\file` .
         - Test an encoded file name: `%2e%2e/MYFILE.TXT` (`%2e` is `.`).
         - Test `%2e%2e%2fMYFILE.TXT` (`%2e` is `.` and `%2f` is `/`).
         - Test double encoded strings: `%252E%252E%252FMYFILE.TXT` (`%252E%252E%252F` is a double encoded `../`).

- This test __fails__ if the application allows access to the files outside of the `/public` folder.

- Also test a file with double dots (..) in its name, such as `MYFILE..TXT`.
    - It is not a security risk if your code cannot process these filenames, but it may cause functional issues to some of the users.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T297/",Incomplete,,P116,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Development,T378,Authorize every request for data objects,8,"The application's authorization process is bypassed by an attacker who is able to retrieve user records. This occurs when a key used to identify a user's record is exploited by an attacker to look up information on its owner. The authorization process does not properly check whether the malicious user has permission to perform this action because the key being exploited belongs to an authorized user, and the malicious user has likely been legitimately authenticated by the system.

An example of this is when a system uses sequential, or other guessable, session IDs that allow one user to easily switch to another user's session and view or modify their data.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/639
) - http://cwe.mitre.org/data/definitions/932
)

Use the following guidelines to authorize data access requests made by a user:

- Identify parts of the code or pages that enable users to access data objects.
    - This includes database rows, files, or other data objects.

- Verify that the authorization mechanism takes the requested object into account (checks required permissions), as opposed to merely authorizing the user to access the interface (such as the page).

- Make sure that there are no alternative and less secure access paths to objects and files.

- Provide an error message or refuse to serve a file when a web server encounters a file type that it does not know how to handle. 
    - This can happen if a server receives a request for an unknown file type.
    - For example, if an attacker has already attacked the server with a directory traversal, this prevents them from trying to download or execute unauthorized content, such as password files from the application server.

__Note__: It is not enough to authorize access to a page, such as with the web interface, when a user can manually manipulate the object references. Additionally, your application must properly authorize each access request.

For example, suppose that ___User A___ is authorized to see a page that shows their account information:

 `https://somedomain.com/showmyaccount?id=52`

 ___User A___ must not be allowed to see ___User B___'s information by using the link below, even if ___User A___ has logged into the system as a valid user:

 `https://somedomain.com/showmyaccount?id=53`

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T378/",Incomplete,,P524,Access Control Bypass Through User-Controlled Keys,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Session Management > Has Session Management > Yes AND
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Session Management > Has Session Management > Yes AND
• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Has authentication (Hidden Answer) AND
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Has authentication (Hidden Answer) AND
• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Requirements,T379,Provide sufficient documentation for security-related features,4,"Failing to provide clear and precise information about security related parameters, assumptions, user requirements, and capabilities of a product (such as a system, device, or application), results in poor security risk assessments. This increases the risk of direct use of the product, or using it as a module in another product.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/223
) - http://cwe.mitre.org/data/definitions/671
) - http://cwe.mitre.org/data/definitions/1303
)

Prepare security guidelines as part of the product and in other traditional forms. For example, a part of the product could be warning messages that pop up when the features are going to be used, and other forms of security guidelines are booklets and manuals.

Follow these guidelines:

- Create security guides that tell __the users__ how to securely use or configure the device/software.
- If the software/module is being used in another system, fully document the security parameters, capabilities and settings.
- Seek and fill out standard security statement forms (such as MDS2 form) to specify the security and privacy features of your product.

Include these topics in security documents where applicable:

- Privacy policies and types of data that are handled.
- Authentication and authorization mechanisms.
- Security features for all services, protocols, and ports that are in use.
- Data protection methods (data in transit and data at rest).
- Emergency procedures (break-glass features).
- Backup/restore, logging and auditing features.
- Communication with other software/devices including removable devices (for example, external hard drives, and flash memory).
- Physical security (if applicable).
- Virus and malware protection mechanisms.
- Device sanitization (for example, instructions on how to permanently delete personal data).

### Document insecure settings

Address insecure settings that are present during the first system bootup in installation and configuration documentation. If they are not addressed appropriately, the system may be left vulnerable to cyberattacks.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T379/",Incomplete,,P757,Missing clear specification of security assumptions and capabilities,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Testing,T380,Verify that security documents are complete,4,"Failing to provide clear and precise information about security related parameters, assumptions, user requirements, and capabilities of a product (such as a system, device, or application), results in poor security risk assessments. This increases the risk of direct use of the product, or using it as a module in another product.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/223
) - http://cwe.mitre.org/data/definitions/671
) - http://cwe.mitre.org/data/definitions/1303
)

Verify that security features and parameters are adequately documented in a way that each of the following people can easily use the information:

1. Users
2. Other developers that use the module/software in their products (if applicable) 
3. Security analysts that perform risk assessment on the product (if applicable)

In particular, verify that security documents contain these items (if applicable):

- Instructions on how to securely configure the device/software.
- Security parameters and settings if the module is used in another product.
- Standard security statement forms (such as MDS2 form) to describe the security and privacy features of the product.

Verify that these topics are covered in the security documents (if applicable):

- Privacy policies and types of data that are handled.
- Authentication and authorization mechanisms.
- Data protection methods (data in transit and data at rest).
- Emergency procedures (break-glass features).
- Backup/restore, logging and auditing features.
- Communication with other software/devices including removable devices (such as external hard drives, and flash memories).
- Physical security (if applicable).
- Virus and malware protection mechanisms.
- Device sanitization (such as instructions on how to permanently delete personal data).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T380/",Incomplete,,P757,Missing clear specification of security assumptions and capabilities,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Deployment,T456,Change default security settings to the most stringent ones and disable unnecessary services and modules,6,"Running a system or application with excessive capabilities increases the attack surface because such extra services may expose potential weaknesses. Many of these functionalities may not be essential for the system's operations. For example, consider a system that is intended to provide an encryption service, but has a file sharing service also running on it. An intruder may be able to exploit a vulnerability of the file sharing service and gain unauthorized access to encryption settings.

The excessive functionalities may be provided by the main system or application itself or by one of the modules or plugins enabled through the main application.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/16
)

Follow these instructions to decrease the possibility of exploits through excessive capabilities:
 
- Change the default/basic security settings to the most stringent settings available for the device, application, container or component in use. This will help to reduce the attack surface of the system or software. For example, basic security settings for a device might enable Bluetooth connectivity by default, which can make the device vulnerable to different types of attacks.
 
 - Maintain a list of system components and server modules, including all available functions, services, protocols, and ports. You can refer to the framework/device/component documentation to help compile the list, which you should review periodically.
 
 - In addition to listing capabilities manually, use scanning tools to identify unnecessary modules, open ports, and available services, and then add those findings to the list of system components and server modules.
 
 - Configure the system and all its components to provide only necessary functionality, disabling all inessential modules, functions, services, protocols, and ports. For example, a directory listing module, HTTP or FTP protocols, or JTAG and USB ports. Disable any unnecessary ports to ensure operation with a minimum number of open ports.  
 
 - If it is feasible, limit the functionality of system components to a single function per component/device. For example, do not run a file sharing server on the same host as a DNS server.

### Secure the use of USB ports when they are enabled

Follow these guidelines to decrease the threats of enabled ports: 

- Set the USB port as a dedicated charging port by default. Ensure that a device plugged in is enumerated as a Dedicated Charging Port (DCP) by default.
- Protect USB mounting for upload or download with a console password. That is, change the enumeration mode to Charging Downstream Port (CDP) only after entering the correct password.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T456/",Incomplete,,P782,Running with Excessive Functionalities and Capabilities,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Testing,T457,Verify that unnecessary services and capabilities are disabled,6,"Running a system or application with excessive capabilities increases the attack surface because such extra services may expose potential weaknesses. Many of these functionalities may not be essential for the system's operations. For example, consider a system that is intended to provide an encryption service, but has a file sharing service also running on it. An intruder may be able to exploit a vulnerability of the file sharing service and gain unauthorized access to encryption settings.

The excessive functionalities may be provided by the main system or application itself or by one of the modules or plugins enabled through the main application.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/16
)

Follow these instructions to make sure excessive system capabilities are disabled:

- Make sure the list of system components and capabilities is complete and updated.
    - This includes functions, services, protocols, and ports.

- Test that any capability on the list marked as unnecessary is properly disabled.
    - Otherwise, this test __fails__.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T457/",Incomplete,,P782,Running with Excessive Functionalities and Capabilities,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Requirements,T65,Restrict accepted HTTP verbs,6,"HTTP specifies many different methods (or verbs), such as GET, POST, HEAD, PUT. Web applications generally use GET and POST methods exclusively for requests.

Many web applications will limit which HTTP verbs can be used to access a resource (most likely GET or POST) by defining a security constraint within web.xml and explicitly listing GET and POST within separate <http-method> tags.

The HTTP HEAD method works like a GET method, except that the server must not return a message body in the response [1]. The HTTP specification intended that GET requests (along with HEAD) ""should not have the significance of taking an action other than retrieval."" That is, GET requests should not change the state of the application&mdash;they should be indempotent.

Many applications define non-idempotent GET requests. They treat GET requests like POST requests that can execute transactions that change the state of the application. An example of such a URL would be: www.myapp.org/mgmt/accts.jsp?q=delAcct.

As a result, an attacker could attempt to trap the above GET request in an HTTP proxy, modify it to a HEAD request, and submit the request. Since HEAD is not one of the HTTP methods listed in web.xml, the authorization check would be bypassed and the code that processes GET requests may be executed. This is called an HTTP Verb Tampering attack.

Furthermore, some frameworks, such as Java EE, allow the use of arbitrary HTTP verbs. An attacker can send a ""BOB"" request rather than HEAD, and since it is not listed in the security constraint, the constraint will be bypassed. Arbitrary verbs will not work when accessing a Servlet, but are acceptable if the request targets a JSP directly. This is because when a JSP is compiled its components are sent to a service() method, rather than the doGet() or doPost() methods of a Servlet. Therefore, any arbitrary verb that is submitted will be directed to the service() method.

[1] HTTP/1.1: Method Definitions - [http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/302
) - http://cwe.mitre.org/data/definitions/654
)

Restrict the HTTP verbs that your application or web server accepts to the ones required, such as GET, POST, and HEAD.

For example, if an endpoint never requires processing a POST or DELETE request, configure your web server to reject such requests.

This verb restriction protects endpoints against DoS attacks that use specific HTTP verbs, by minimizing the attack surface.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T65/",Incomplete,,P700,HTTP Verb Tampering,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Protocols > Application Layer > Application Layer Protocols Used > Uses an HTTP-based protocol AND
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Requirements,T69,Strong password requirements for server-to-server system accounts,8,"System accounts used for server-to-server authentication without sufficient password requirements may be susceptible to brute force, dictionary, or rainbow table attacks. System accounts are often not subject to the same level of control as end user accounts.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/521
)

Ensure that system accounts used in server-to-server authentication meet at least the same minimum password requirements as end-user accounts.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T69/",Incomplete,,P687,Insufficient System Account Password Requirements,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authentication > Requires Server-to-Server Authentication > Yes AND
• Changes to authentication (Hidden Answer)"
Requirements,T70,Implement account lockout or authentication throttling for system accounts,8,"Malicious users may attempt to brute-force the passwords of system accounts. Without sufficient checks for brute-forcing, a malicious user may be able to guess the password of a system account.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/307
) - http://cwe.mitre.org/data/definitions/645
)

Use a feature to lock out users after a configurable number of failed authentication attempts. This protects against brute-forcing for system accounts. 

Alternatively, consider a mechanism to throttle multiple authentication attempts for the same user ID, or originating from the same user ID. This has the benefit of not locking out legitimate user accounts, while decreasing the likelihood of a brute-force attack.

Exponentially increase the amount of time a user has to wait between authentication attempts until it reaches a point that makes brute-forcing impractical. For example, increasing the wait period by 24 hours would discourage brute-force attacks.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T70/",Incomplete,,P688,Insufficient Account Lockout or Throttling for System Accounts,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authentication > Requires Server-to-Server Authentication > Yes AND
• Changes to authentication (Hidden Answer)"
Requirements,T73,Use random delays in authentication failures,5,"The application's operations complete in different periods of time so that it becomes observable to an attacker. These timing discrepancies can reveal security-relevant information about the state of the product, such as whether a particular operation was successful or not.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/208
)

Use random delays when authentication fails so that the period needed to generate an authentication failure message is randomized. Attackers can use the length of time it takes to generate an authentication error message to guess the reason it failed.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T73/",Incomplete,,P104,Timing Discrepancy Information Leak,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• Features and Functions > Authentication > Authentication Features > Has direct or third party authentication for end users, devices or nodes"
Requirements,T1362,Perform message throttling in Web APIs,8,"An application/system can become unavailable for many reasons: an attack on the system (such as through a distributed denial of service attack, DDoS attack), improper allocation of resources, or over-reliance on a component that is likely to fail.

Some application vulnerabilities, such as allowing SQL injection, or cross-site scripting can increase the risk of denial of service. The weakness has two aspects: The system may not be protected against DoS attacks, and the system may not be well designed/implemented to continue to operate if its components fail (lack of a fallback mechanism).

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/400
) - http://cwe.mitre.org/data/definitions/410
) - http://cwe.mitre.org/data/definitions/730
)

To protect against brute-force DoS attacks, use a feature that enforces a set number of failed attempts by a certain IP, API key, or request route during a set period. For example, a web API could allow an IP to have a maximum number of requests within a second, minute, or hour.

You should also consider using a feature that throttles multiple requests from, or originating from, the same user (API key). This reduces the likelihood of a brute-force attack.

If a user goes over the maximum number of requests, the throttling mechanism should automatically do one of the following:

- Lock the account or node for a set period.
- Lock the account or node until it is released by an administrator.
- Delay the processing of subsequent requests using a suitable algorithm. 

You can use a delay algorithm to increase the time a user has to wait between requests until it becomes inconvenient to continue a brute-force attack. Some web APIs might have short delays of the same interval, but others might increase exponentially. If this user were an attacker inputting random API keys one by one, the delay between the processing of requests would be too long for the attack to be worth the trouble.

__Note__: Refer to this countermeasure's Additional Requirements for more details about Web API throttling types.

### Web API - throttling types

You can apply different types of throttling as follows:

- __Rate-limit throttling__: A simple throttle limits the number of requests passing through during a time interval. A throttle can be based on the number of requests, size of a payload, or content.

- __IP-level throttling__: Make your API accessible only to white-listed IP addresses, or limit the number of requests sent by a specific client IP.

- __Scope-limit throttling__: Restrict access to specific parts of the API, such as certain methods, functions, or procedures that are based on the users' roles. You can take advantage of the same API across your organization by Implementing scope limiting.

- __Concurrent connections limit__: Limit the number of connections from a user/account to avoid a Denial of Service error when your application cannot respond to more than a certain number of connections.

- __Resource-level throttling__: Use resource-level throttling or hard throttling to limit the number of returned records from your API.
For instance, if a certain query returns a large number of records, throttle the request so that your SQL engine limits the number of rows returned by using conditions attributes such as TOP, SKIP, SQL_ATTR_MAX_ROWS, and so on.

- __Tiers of throttling__: Apply throttling at multiple levels in your organization:
    - API-level throttling
    - Application-level throttling
    - User-level throttling
    - Account-level throttling

## References
[How to Rate-Limit an API Query](https://www.progress.com/blogs/how-to-rate-limit-an-api-query-throttling-made-easy)

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1362/",Incomplete,,P750,Denial of Service (DoS),7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Application General > Components > Components In Development > Web service AND
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Testing,T80,Test password requirements,5,"The application does not enforce creating passwords with enough complexity, increasing the chance of a brute-force attack. These attacks use trial and error to guess account passwords and take less effort for simple passwords.

It is mandatory that users have strong passwords because an authentication feature is only as strong as its credentials.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/521
)

Log in as an end-user and attempt to change your password so that it does not meet all of your organization's password requirements. The details of password requirements vary by organization, but they generally include:

- Password length
- Password strength
    - Using lower and upper case, numerical and special characters, and avoiding dictionary words.
- Preventing password reuse
- Password expiry
    - Passwords have a maximum age before they expire and need to be changed, such as after 90 days.

This test __fails__ if you can successfully change your password without meeting all of these requirements.

## Review compliance requirements

Additionally, ensure that the minimum standards taken from the enterprise security policy meet the minimum requirements of the compliance drivers. 

For each compliance requirement, see the corresponding How-To and compare those minimum standards with your policy's minimum standards.

This test __fails__ if you need stricter requirements. For example, to pass this test, see the How-To called _PA-DSS compliance requirement_ and make sure that your password security policies are more strict than what is outlined.


## Password expiry test

If your organization's policy is to enforce a maximum age for passwords, test password expiry by verifying that the user is unable log in to their account with an expired password. Usually, an account is disabled if a user does not change their password before it expires.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T80/",Incomplete,,P408,Password Requirements Are Weak,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authentication > Authentication Features > Authentication Method > Uses passwords AND
• NOT Application General > Components > Components In Development > Mobile app AND
• Changes to authentication (Hidden Answer)"
Testing,T112,Test that site does not cache confidential pages,4,"The application must have a caching policy that defines to what extent its web pages and form fields should be cached.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/525
)

For pages containing confidential data, such as credit card numbers, inspect the page in an HTTP-proxy tool. If the request uses HTTP 1.0, then look for either of the following headers:

 * Pragma=no-cache
 * Date - Expires=-1

If the request uses HTTP 1.1 then look for this header:

    Cache-Control=no-store, no-cache, must-revalidate

This test __fails__ if the appropriate header is missing.

### No-store vs No-cache directives

For HTTP 1.1, the important keyword is ""no-store"" because the ""no-cache"" directive is commonly misused.
    
According to the RFC, ""no-cache"" tells the browser that it should revalidate with the server before serving the page from the cache. This means that if the ""no-cache"" directive is used without ""no-store"", a browser can still store the page in its cache. At this point, the browser can display the page after revalidating with the server. As a result, confidential data can be stored and leaked.

Newer versions of Internet Explorer and Firefox have started treating the ""no-cache"" directive as if it instructs the browser to not even cache the page because of how frequently ""no-cache"" is misused. It is __strongly advised__ to set the ""no-store"" directive.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T112/",Incomplete,,P412,Information Leak Through Browser Caching,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Protocols > Application Layer > Application Layer Protocols Used > Uses an HTTP-based protocol AND
• The application is a generic server application (Hidden Answer) AND
• Changes to user output (Hidden Answer)"
Testing,T113,Test that site is not vulnerable to HTTP verb tampering,6,"HTTP specifies many different methods (or verbs), such as GET, POST, HEAD, PUT. Web applications generally use GET and POST methods exclusively for requests.

Many web applications will limit which HTTP verbs can be used to access a resource (most likely GET or POST) by defining a security constraint within web.xml and explicitly listing GET and POST within separate <http-method> tags.

The HTTP HEAD method works like a GET method, except that the server must not return a message body in the response [1]. The HTTP specification intended that GET requests (along with HEAD) ""should not have the significance of taking an action other than retrieval."" That is, GET requests should not change the state of the application&mdash;they should be indempotent.

Many applications define non-idempotent GET requests. They treat GET requests like POST requests that can execute transactions that change the state of the application. An example of such a URL would be: www.myapp.org/mgmt/accts.jsp?q=delAcct.

As a result, an attacker could attempt to trap the above GET request in an HTTP proxy, modify it to a HEAD request, and submit the request. Since HEAD is not one of the HTTP methods listed in web.xml, the authorization check would be bypassed and the code that processes GET requests may be executed. This is called an HTTP Verb Tampering attack.

Furthermore, some frameworks, such as Java EE, allow the use of arbitrary HTTP verbs. An attacker can send a ""BOB"" request rather than HEAD, and since it is not listed in the security constraint, the constraint will be bypassed. Arbitrary verbs will not work when accessing a Servlet, but are acceptable if the request targets a JSP directly. This is because when a JSP is compiled its components are sent to a service() method, rather than the doGet() or doPost() methods of a Servlet. Therefore, any arbitrary verb that is submitted will be directed to the service() method.

[1] HTTP/1.1: Method Definitions - [http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/302
) - http://cwe.mitre.org/data/definitions/654
)

Use the following guidelines to test that your site is not vulnerable to HTTP verb tampering:

1. Using an HTTP-proxy tool, attempt to browse to an authenticated web page without a valid session.

2. Modify the HTTP verb from ""GET"" or ""POST"" to a random set of characters, such as ""PWRLWA."" 

    This test __fails__ if you can view the page with the random verb, but are unable to view the page with a valid HTTP verb.

3. You can also try using the ""HEAD"" request instead of ""GET."" 
    - You are unlikely to receive a response. 
    - Try to ascertain if the request was processed successfully, by viewing the transaction history for example.

    This test __fails__ if the ""HEAD"" request works, but the ""GET"" request does not.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T113/",Incomplete,,P700,HTTP Verb Tampering,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Protocols > Application Layer > Application Layer Protocols Used > Uses an HTTP-based protocol AND
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Development,T76,Do not hardcode passwords,10,"Hard-coded passwords can lead to significant authentication failures that can be difficult for a system administrator to detect. Even when detected, these failures can be difficult to fix, so an administrator could be forced to disable the product entirely.

The two main variations of hard-coded passwords are inbound and outbound:

- __Inbound Variant__
    - A default administration account is created with a simple password. This password is hard-coded into the product.
    - This password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or patching the software. 
    - If the password is ever discovered or published, then anybody can access the product. 
    - Since all installations of the software will have the same password, even across different organizations, this allows large-scale attacks to take place, such as worms.

- __Outbound Variant__
    - This applies to front-end systems that authenticate with a back-end service. 
    - The back-end service may require a fixed password that can be easily discovered.
    - A programmer may simply hard-code these back-end credentials into the front-end software. 
    - Any user of that program may be able to extract the password. 
    - Client-side systems with hard-coded passwords pose even more of a threat because extracting a password from a binary file is not difficult.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/259
) - http://cwe.mitre.org/data/definitions/798
)

Avoid hard-coding passwords, secret keys, or API tokens anywhere in the application. Use configuration files with encrypted passwords instead.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T76/",Incomplete,,P156,Use of Hard-coded Password,10,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authentication > Requires Server-to-Server Authentication > Yes AND
• Changes to inbound/outbound interfaces (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authentication > Authentication Features > Authentication Method > Uses passwords AND
• The application is a generic server application (Hidden Answer) AND
• Changes to inbound/outbound interfaces (Hidden Answer)"
Development,T572,Check for symlinks before opening files,6,"The software attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link ([hard link](/library/glossary/G26) or [symlink](/library/glossary/G25)) that resolves to an unintended resource.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/59
)

Check for the existence of files before opening or creating them:

- If they already exist, make sure they are neither [symlinks](/library/glossary/G25) nor [hard links](/library/glossary/G26), unless it is an expected requirement of the application.

- If a symlink is expected, check the target of the symlink to make sure it is pointing to an expected path before any other action.

## Explanation:

Symlinks may point to any file or directory irrespective of the volumes on which the link and target reside, and may contain an arbitrary path that points to a file that does not exist yet.

An attacker may take advantage of a vulnerability to position a symbolic link in such a manner that the targeted user or application accesses the symlink's endpoint, assuming that it is accessing a file with the link's name. The endpoint file may be used either for output or input:

- If the file is for output, the result is that the link's endpoint file is modified, instead of the file at the intended location of the symlink. 
    -  Modifications to the endpoint file may include appending, overwriting, corrupting, changing permissions, or other modifications.
    - An attacker may use this to forward information to a location that he has access to or do modifications or corruptions to a file at his desired location.
- Alternatively, the endpoint file may serve as input to the targeted application.
    - This can be used to feed malformed input into the target or to cause the target to process different information.
    - This may allow the attacker to control the actions of the target or to cause the target to expose information to the attacker.

Moreover, the actions taken on the endpoint file are undertaken with the permissions of the targeted user or application, which may exceed the permissions that the attacker would normally have.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T572/",Incomplete,,P480,Improper Link Resolution Before File Access ('Link Following'),6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• Changes to user output (Hidden Answer)"
Testing,T1392,Test for Server Side Request Forgery,8,"Server Side Request Forgery (SSRF) is the result of an attacker forging a crafted request from a vulnerable application on the server side. This attack is usually carried out to exploit other services running on the vulnerable application's server, or the resources publicly available on that server's intranet. It is usually difficult to get the vulnerable application to send requests to the Internet due to firewall settings. This attack is possible when the attacker has partial or full access over the HTTP request.

Consider the following vulnerable PHP code:

    if (isset($_GET['url'])) { 
        $url = $_GET['url'];
    }
    $image = fopen($url, 'rb');
    fpassthru($image); }

In this code, the application makes a request using a `url` that can be controlled by the attacker. The `url` is used to fetch an image from the specified location. When an attacker carefully crafts a `url` like this, it affects all of the requests that follow. When these requests are handled by the vulnerable PHP code above, they are made on behalf of and relayed to the attacker using the `url`. All the following GET requests consist of the crafted `url` and the HOST header (`example.com`, where the PHP code is being served). 

- *Apache HTTP Server Status:*
```
GET /?url=http://localhost/server-status HTTP/1.1 Host: example.com
```
 In the above request, the `url` is set to fetch information about the Apache HTTP Servers status. The response returned by the above PHP code (and relayed to the attacker) contains the Apache HTTP Server Status that is serving that code, given `mod_status` is enabled on that server (it is enabled by default).

- *Accessing the unauthenticated information/services available on the Intranet:*
```
GET /?url=http://169.254.169.254/latest/meta-data/ HTTP/1.1 Host: example.com
```
 The `url` in the above request is set to fetch cloud metadata. The IP address `169.254.169.254` is the standard address used by Amazon EC2 and other cloud providers for distributing metadata to cloud instances.

- *Performing port scans on internal networks and gathering information about it:* by feeding different IP and port combinations into the `url` parameter in the above PHP code, an attacker can obtain valuable information regarding the intranet on which the web server hosting that code resides. The following table gives some examples of the kind of information someone can gather from the HTTP error codes and the latencies of responses:

| **URL (IP+Port)** | **HTTP Response Code** | **Round-Trip delay Time** |
|--|--|--|--|
| http://localhost:22 | 200 | 10 (ms) | The port is open! |
| http://localhost:23 | 500 | 10 (ms) | The port is closed. |
| http://10.0.0.1/ | 500 | 30010 (ms) | It is blocked by a firewall or unable to route. |
| http://10.0.0.1:8080/ | 500 | 10 (ms) | Port is closed, but traffic is routed to that address. |

- *Using other URl schemes to access files on a local system or internal network:*
```
GET /?url=file:///etc/passwd HTTP/1.1 Host: example.com
```
 In the above request, the `url` fed into the vulnerable php code uses a `file://` scheme to access the local files the php application may have access to. In this example, the attacker is attempting to access the `passwd` file. Depending on how the HTTP requests are made in the code, one may be able to exploit the features available with the requesting utility (for instance, cURL, fopen(), dict URL, where `fopen()` is used in the above PHP code):
```
GET /?url=dict://localhost:11211/stat HTTP/1.1 Host: example.com
```
 In the above request, the `dict://` URI scheme is used. Port *11211* is the default port used by Memcached, which normally grants unauthenticated access to the local server users (via the loopback network interface - localhost). Memcached is a utility for speeding up dynamic web applications by caching the data and objects in memory.


###External Resources:

1. [How To: Server-Side Request Forgery (SSRF)](https://www.hackerone.com/blog-How-To-Server-Side-Request-Forgery-SSRF)
2. [What is Server Side Request Forgery (SSRF)?](https://www.acunetix.com/blog/articles/server-side-request-forgery-vulnerability/)
3. [SSRF Bible Cheatsheet](https://github.com/jivoi/offsec_pdfs/blob/master/SSRF-Bible-Cheatsheet.pdf)

###Related Weaknesses In SD Elements

1. [P673: Improper Neutralization of SSI on a Web Page](/library/problems/P673/)
2. [P116: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')](/library/problems/P116/)

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/918
)

Use Burp Suite to craft requests containing `URL` payloads to launch an SSRF attack:

1. Try `http://127.0.0.1:80` as a URL (convert http://127.0.0.1:80 to base64 aHR0cDovLzEyNy4wLjAuMTo4MA== and run it on Burp repeater). This forces the vulnerable application to make a request on behalf of the attacker via its loopback network interface (localhost). If the response contains some information about the hosting (i.e. server banner), then the attack has been successful. This attack can be repeated using other URL payloads such as `http://169.254.169.254/latest/meta-data/` for fetching cloud meta-data, `http://localhost/server-status` for Apache HTTP Servers' status and so on.

2. Try other URL schemes in the URL, such as Gopher, DICT and SFTP. Set up a virtual private server (VPS) and use its IP when crafting these URLs. When you receive a request (on your VPS), the SSRF attack has been successfully launched. This is because the vulnerable application has made a request to your VPS on your behalf. Alternatively, you can try the `file:///etc/passwd` URI payload and see if `passwd` is relayed back to you by the vulnerable application.

For a comprehensive list of SSRF attacks, see the [SSRF Bible Cheatsheet](https://github.com/jivoi/offsec_pdfs/blob/master/SSRF-Bible-Cheatsheet.pdf).

### Blind Server Side Request Forgery (SSRF)

SSRF attacks do not often trigger a response directly back to the web application but still may be vulnerable to SSRF. Blind SSRF occurs when an application can be forced to trigger a back-end HTTP request, but as a tester or attacker you have no knowledge of the response. To test for blind SSRF, it is a best practice to utilize an out-of-band technique that requires  an external server capable of receiving HTTP requests be set up. This server should be under your control.

1. Configure a public-facing web server with an IP address and domain name. If using Burp, the tool Burp Collaborator may be used to set this up quickly.

2. Identify an injection point in the web application to test for blind SSRF (similar to testing for regular SSRF). Enter your IP address or domain name as the server.

3. View the logs in your server and search for requests coming from the target application. If you see log entries that are aligned with the vulnerable application, it is susceptible to blind SSRF and further scans can begin to enumerate the internal network or load a malicious file from your server.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1392/",Incomplete,,P1169,Server Side Request Forgery (SSRF),8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Requirements,T1873,Prevent information leakage through HTTP response headers,5,"Information exposure can be resultant or primary. Resultant exposure includes path disclosure in a PHP script error, and primary exposure includes timing discrepancies in crypto. Because there are many types of weaknesses that lead to information exposure, their severity can range widely depending on the type of information that is revealed.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/200
) - http://cwe.mitre.org/data/definitions/201
) - http://cwe.mitre.org/data/definitions/215
) - http://cwe.mitre.org/data/definitions/526
)

Disable HTTP response headers that can expose side information about server technologies in use.
Below is an example of HTTP response header sent from a web server that is exposing too much information:

````
HTTP/1.1 200 OK
Date: Thu, 12 Jun 2014 14:15:01 GMT
Server: Apache/2.2.21 (Win32) PHP/5.4.7
Content-Length:226
Connection: close
Content-Type: text/html; charset=iso-8859-1
````

In the above example, the HTTP header exposes web server version number that can be a useful information for attackers. Edit the configuration of your web server (i.e. web.config, web.xml, server.xml, etc) to prevent the HTTP response headers from exposing any sensitive information.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1873/",Incomplete,,P96,Information Exposure,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Protocols > Application Layer > Application Layer Protocols Used > Uses an HTTP-based protocol AND
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Testing,T114,Test system-to-system authentication lockout or throttling,8,"Malicious users may attempt to brute-force the passwords of system accounts. Without sufficient checks for brute-forcing, a malicious user may be able to guess the password of a system account.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/307
) - http://cwe.mitre.org/data/definitions/645
)

Use the following guidelines to test for system-to-system authentication lockout and throttling:

1. Obtain the user ID of a system account.

2. Attempt to authenticate with a valid user ID and incorrect password. 

3. Repeat this 5 times.

This test __fails__ if both of the following are true:

- You are able to log in with the correct password on the 6th try without having to wait (throttling).
- You do not face any other restriction that prevents you from authenticating (lockout).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T114/",Incomplete,,P688,Insufficient Account Lockout or Throttling for System Accounts,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authentication > Requires Server-to-Server Authentication > Yes AND
• Changes to authentication (Hidden Answer)"
Development,T423,Disable copying on Android text fields with sensitive data,4,"Sensitive data copied onto the clipboard can be accessed by other applications which normally can read the content of shared clipboard of Android devices.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/276
) - http://cwe.mitre.org/data/definitions/732
)

If an activity with text input handles sensitive data that must not be shared with other applications through the Android clipboard, be sure to do the following:

- Disable copying from the text input field to the clipboard. For example, disable `EditText`.
- Disable the 'copy to clipboard' option on text input fields with sensitive data.

Furthermore, keeping sensitive information in a readable format can cause security concerns and lead to sensitive information disclosures. Some operating systems allow developers to hide the information in the clipboard to prevent revealing sensitive information to the unintended audience. Hence, if you are storing sensitive information in the clipboard, ensure that you use secure methods (for instance, by masking the sensitive information in the clipboard).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T423/",Incomplete,,P771,Leak of sensitive data through Android clipboard,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Development,T1038,Make homoglyphs distinguishable when showing them to users,5,"Some glyphs, pictures, or icons can be semantically distinct to a program while appearing very similar or identical to a human user. These are referred to as homoglyphs. For example, in some fonts, the lowercase ""l"" (ell) and uppercase ""I"" (eye) may look identical while they have different character codes. A program can recognize that they are different, but these characters can be displayed in exactly the same way to a user. This can also occur between different character sets. For example, the upper case Latin ""A"" and upper case Greek ""A"" are treated as distinct by programs but may be displayed in exactly the same way to a user.

Adversaries can exploit this visual similarity for attacks such as phishing, such as by providing a link to an attacker-controlled hostname that looks like a hostname that the victim trusts. In a different use of homoglyphs, an adversary may create a backdoor username that is visually similar to the username of a regular user, which then makes it more difficult for a system administrator to detect the malicious username while reviewing logs.

When you need to write sensitive information or identifiers to an output stream using Unicode characters, or if you need to display that information to any user, consider whether visually similar or identical glyphs (homoglyphs) can cause security issues. This would be critical especially if those Unicode characters are provided by other users.

If there is any risk of homoglyphs being misused, either:

-  Make it easy for users to distinguish between homoglyphs when outputting that information. This would prevent users from misinterpreting a glyph and performing an unintended, insecure action.
    - For example, you can use Punycode as shown in [RFC 3492](https://tools.ietf.org/html/rfc3492) for encoding Unicode characters to make homoglyphs distinguishable in the output.
- Warn users if the displayed information contains characters from different character sets.

For more information and examples see CWE's page about the [homoglyph presentation weakness](http://cwe.mitre.org/data/definitions/1007.html).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1038/",Incomplete,,P1013,Insufficient Visual Distinction of Homoglyphs Presented to User,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T291,Verify that content of received Intent is checked properly,6,"Not validating the content of a received intent in Android can result in undesirable consequences, since components can freely send Intents to other components when the target components are exported (When they are available to receive intents).

For example, when an Intent filter is defined in an Android application's manifest file to receive a specific type of Intent (for example a system broadcast such as low battery), any component can send an explicit Intent to that application. If the application assumes that it is receiving a low battery notification, without proper verification of the Intent's content, it will perform an unintended action.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/925
)

Use the following guidelines to verify that the content of an Intent that is received is checked properly:

- Open the _AndroidManifest.xml_ file.

- Repeat these steps for each of these nodes:
    - `<activity>` representing activity
    - `<activity-alias>` representing activity alias
    - `<service>` representing service
    - `<provider>` representing content provider
    - `<receiver>` representing broadcast receiver

    If the component is exported, it has its intent filter or `android:exported` set to `true`, and represents the nodes as indicated above. 

-  Work with developers to verify that an Intent's action is checked when it is received.
    - For example if the component is waiting for a shut-down Intent (broadcast), make sure it is checked if the Intent's action matches shut-down.
    - Alternatively, you can create another application with one activity and a button on it.
    - When the button is pressed, create an Intent, set the target component (explicit Intent) and send the Intent to the component under review.
    - If the component under review is a broadcast receiver, use `sendBroadcast` to send the Intent.
    - Run the application.
    - Press the button.
    
    This test __fails__ if the Intent is received by the component under review and the corresponding action is performed.

- While it is impossible to mention exhaustive tests for input validation, this step provides some guidelines:
    - Work with developers to create unacceptable input based on the input required by your component.
    - Create an Intent containing that unacceptable data.
    - Send the Intent using a test application as described in the previous step.
    
    This test __fails__ if the Intent is received by the component under review and the corresponding action is performed.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T291/",Incomplete,,P758,Improper validation of content of an Android Intent,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer) AND
• Changes to inbound/outbound interfaces (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• Changes to inbound/outbound interfaces (Hidden Answer)"
Testing,T537,Test that the size of incoming messages in services is restricted,8,"An application/system can become unavailable for many reasons: an attack on the system (such as through a distributed denial of service attack, DDoS attack), improper allocation of resources, or over-reliance on a component that is likely to fail.

Some application vulnerabilities, such as allowing SQL injection, or cross-site scripting can increase the risk of denial of service. The weakness has two aspects: The system may not be protected against DoS attacks, and the system may not be well designed/implemented to continue to operate if its components fail (lack of a fallback mechanism).

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/400
) - http://cwe.mitre.org/data/definitions/410
) - http://cwe.mitre.org/data/definitions/730
)

Use the following guidelines to check the size of incoming messages for services:

- Perform load testing for services to make sure they are not vulnerable to Denial of Service (DoS) attacks as a result of unrestricted incoming message sizes.
    - There are different load testing tools available to check whether the maximum size of payload is configured for the services. These tools include Appache JMeter, WebLOAD, and loadUI.
- The tool needs to be able to send requests with different sizes and check the performance.

    This test __fails__ if large requests break the services.

__Notes:__ 

- You should also pay attention to external services that are called within your services. If you receive input from other services within your code, you should also test that your system cannot be brought down by a malicious or malfunctioning external service.

- This countermeasure might not be required if your architecture is designed in a way that a single request creates consistent and low load on your server by using DDoS protection techniques such as an approved DNS or TCP/IP load balancing. Check whether your application is still vulnerable to amplification attacks after using such techniques. If so, then apply the requirements in this countermeasure .

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T537/",Incomplete,,P750,Denial of Service (DoS),7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Generic services (Hidden Answer) AND
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Development,T273,Avoid permission re-delegation by considering caller's permissions when handling external requests,8,"Improper permission re-delegation happens when an application that has adequate permissions, provides information or services for another application (called client here), without verifying that the client has the right permissions to access the provided information or services.

Android framework uses a permission model for securing operating system resources. The model determines which installed components can access specified resources. For example, android.permission.READ_CONTACTS is required to read contact list information. When a component, such as an activity or service, is communicated with through an Intent, for example, it is that components' obligation to verify that the communicator has the right permissions. Otherwise it could perform unauthorized actions on behalf of the client component.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/285
) - http://cwe.mitre.org/data/definitions/732
) - http://cwe.mitre.org/data/definitions/863
) - http://cwe.mitre.org/data/definitions/935
)

Whenever you act upon an Intent from a caller (whether you send any response back or just do an action) or provide data for an external component through a content provider, make sure that you are not facilitating an improper permission redelegation. That is, ensure that you are not doing something for the caller that it doesn't have permission for.

- List all the permissions that your application/component has acquired (defined in Android manifest file).

- Identify all the permission-protected actions you perform and resources that you access when handling an Intent or responding through content provider.
    - For example, when using contact-list, camera, or bluetooth.
    - This is especially important for your content-providers if you deliver data to other applications.

- Check that the caller has permission to access those resources either by requiring those permissions in the Android manifest file (intent-filter) for your exported component (for example your content-provider) or dynamically in your application's code.

- If your application provides a callback functionality, accept `PendingIntent` but not `Intent` from the caller.
    -  For example, if you are offering a notification-like area for applications to post links to their activities.
    - `PendingIntents` are sent as the process that created them rather than as the process sending them, so they do not enable permission re-delegation.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T273/",Incomplete,,P736,Improper permission re-delegation,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T290,Verify that Android permissions are properly checked,8,"Improper permission re-delegation happens when an application that has adequate permissions, provides information or services for another application (called client here), without verifying that the client has the right permissions to access the provided information or services.

Android framework uses a permission model for securing operating system resources. The model determines which installed components can access specified resources. For example, android.permission.READ_CONTACTS is required to read contact list information. When a component, such as an activity or service, is communicated with through an Intent, for example, it is that components' obligation to verify that the communicator has the right permissions. Otherwise it could perform unauthorized actions on behalf of the client component.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/285
) - http://cwe.mitre.org/data/definitions/732
) - http://cwe.mitre.org/data/definitions/863
) - http://cwe.mitre.org/data/definitions/935
)

Use the following guidelines to verify that Android permissions are properly checked:

- Open the _AndroidManifest.xml_ file.

- Repeat these steps for each of these nodes:
    - `<activity>` representing activity
    - `<activity-alias>` representing activity alias
    - `<service>` representing service
    - `<provider>` representing content provider
    - `<receiver>` representing broadcast receiver

    If the component is exported, it has its intent filter or `android:exported` set to `true`, and represents the nodes as indicated above. 

- If the intention is to allow communication between your own applications, check if the application defines a custom permission (`<permission>`).
    - For example, if you provide a service to another application you have developed, look for custom permissions.
    - Check if the custom permission has a protection level set to ___'signature'___, and that the component requires the permission (`android:permission` attribute).

    This test __fails__ if the permission is not required.

- Work with developers to create __a list of permissions__ required to communicate with the component.
    - This depends on the actions the component performs.
    - For example if the component uses the camera, ask for the relevant permission.
    - Check if the component requires those permissions (`android:permission` attribute).
    
    This test __fails__ if the requirement for those permissions is not declared in the Android manifest file (and they are not verified in code by developers).

- Alternatively, for the last step, you can create another application with one activity and a button on it.
    - Do not ask for the required permissions in this application (do not declare `<uses-permission>`).
    - When the button is pressed, create an Intent, set the target component and send the Intent (explicit Intent).
    - Run the application.
    - Press the button.
    
    This test __fails__ if the Intent is received by the component under review and the corresponding action is performed.

- If your app defines a permission, make sure __its name is unique__ to your app by appending the permission name to the full package name of your app.
    - Otherwise, the permission may collide with other permissions defined by other applications preventing your app from being installed on Android 5 and later.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T290/",Incomplete,,P736,Improper permission re-delegation,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Requirements,T135,Assign each person using the system a unique user ID,5,"Allowing an individual, or process acting on behalf of an individual, to deny 1) their intention, or 2) involvement in performing actions is a major security flaw. An example of this is a perpetrator creating records and sending or receiving messages without being traced.

Two types of weaknesses can be considered under this title:

 1. **Failure to prove intention**

    - For the purpose of legal prosecution, users should receive enough information about their actions and responsibilities in the form of on-screen messages.
    - This is also useful for proving that violators harmed a system intentionally despite receiving information about the consequences of their actions.

Without these messages, violators assume that their activities are not monitored, or that they are not responsible for their actions.

2. **Failure to prove involvement or achieve non-repudiation**

    - Without the mechanisms to achieve accountability and non-repudiation, perpetrators can deny their involvement in their actions.
    - Additionally, if a system cannot uniquely identify its users, it is not possible to hold individuals responsible for their actions.

This is commonly seen when two or more users use the same set of credentials. Logging actions does not necessarily enable non-repudiation either, because it cannot eliminate the possibility of denial in the future.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/221
)

Assign every person accessing the system a unique user or access ID, and prevent multiple users from sharing the same account or access ID.

In addition, do not share administrative IDs such as admin accounts. Create a separate user for each administrator.

This is a strict compliance requirement for any user involved in payment processing, health related systems, and with access to cardholder or health data.

This countermeasure is generally derived from compliance requirements, such as the Payment Card Industry Data Security Standards (PCI DSS), or the Health Insurance Portability and Accountability Act (HIPAA).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T135/",Incomplete,,P749,Opportunity for disclaimer and lack of means to achieve non-repudiation,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Has authentication (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Activities,T1378,Release a change summary for each software update,7,"Not providing a summary of changes for each release can result in number of issues in communicating with stakeholders and update them about each single changes. Users may still continue using old versions which might be vulnerable to security issues and compromise their data and system.

Follow these guidelines to communicate an efficient summary of changes for each software release:

1. Collect all notes about software changes from code developers.
2. Categorize and organize notes into [software release change categories](/library/glossary/G74/). 
3. Provide short descriptions for each item in the list (e.g., id, title, and summary communicating a bug fix in release notes).
4. Clearly explain the software functionalities impacted by the change(s).
5. Where possible, use a tool such as ARENA to automate the release note publication process. ARENA analyzes code changes by comparing code commits from the previous release with the new ones. It then provides a report of all changes, such as added, removed or changed files, classes, methods, variables, and so on.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1378/",Incomplete,,P1177,Lack of a process for creating summary of changes upon each software update,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Requirements,T25,Enforce absolute session timeouts,3,"The application does not force sessions to expire after a period of time, leaving them vulnerable to attackers. Absolute, or hard, session timeouts impose a maximum age on a session, regardless of activity level. 

This control limits the time an attacker will have access to a hijacked session. Without this control, an attacker who successfully hijacks a session can keep the session alive for as long as the server keeps track of sessions.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/384
)

Use the following guidelines for absolute session timeouts:

- Enforce an absolute timeout on user sessions.
    - Session auto-expiry should be established, with the duration varying based on the application's importance and the data involved.
    - The maximum session duration should be a week, but should be significantly shorter for more critical applications. A one-day default setting is recommended for medium-critical applications such as webmail, online stores, and social networks.
    - Users should be able to adjust the session timeout based on their individual requirements.
    - Most frameworks do not provide this configuration option, so developers need to implement this control themselves.
    - For example, an absolute timeout of 10 hours will invalidate the session token 10 hours after it was created, regardless of activity.

- Consider the trade-off between usability and security when using absolute session timeout values.
    - Some applications may require sessions more than twenty-four hours long, such as stock quote systems for brokers.

- Set the absolute value low enough to minimize the damage in the event of session hijacking, but high enough that legitimate users will not encounter it.

- Notify the user with an appropriate warning in the event of an absolute session timeout.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T25/",Incomplete,,P707,No Absolute Session Timeout,3,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Session Management > Has Session Management > Yes AND
• The application is a generic server application (Hidden Answer) AND
• Changes to session management (Hidden Answer)"
Development,T219,Avoid transmitting confidential data through URL parameters,6,"The web application uses the GET method to process requests that contain sensitive information, which can expose that information through the browser's history, Referers, web logs, and other sources.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/598
)

Use the following guidelines for transmitting confidential data in HTTP-based applications:

- Do not transmit confidential data as URL parameters, such as passwords and credit card numbers.
- Avoid including unnecessary parameters in a request, such as hidden fields, Ajax variables, cookies and header values.

- Avoid GET requests when this data is being passed to the server, because GET-style parameter passing puts the information in the URL parameters and can get cached in browser history, proxies, logs, and many other places. 

- Use the POST method to ensure that parameters are stored in the data section of the HTTP request.
    - POST calls can also include parameters in the URL, and avoid using any confidential information to construct the POST URLs.

- Enforce the correct client behavior using server side implementations.
    - To do that, avoid accepting fields that might carry confidential data through URL parameters.
    - Server side enforcement guarantees that the clients and web pages follow the best practice, or they would not function.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T219/",Incomplete,,P489,Information Leak Through Query Strings in GET Request,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Protocols > Application Layer > Application Layer Protocols Used > Uses an HTTP-based protocol AND
• New transactions / use cases (Hidden Answer)"
Requirements,T4,Use configurable password policies,5,"The application does not enforce creating passwords with enough complexity, increasing the chance of a brute-force attack. These attacks use trial and error to guess account passwords and take less effort for simple passwords.

It is mandatory that users have strong passwords because an authentication feature is only as strong as its credentials.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/521
)

Enable application administrators to __configure password requirements__, including:

* Enforcing a minimum password length
* Enforcing a minimum password complexity (e.g. requiring lowercase, uppercase, numerical characters in the password)
* Enforcing a maximum password age
* Restricting usage of recent old passwords
* Enforcing an optional list of words that cannot be used as passwords
* Exclusion of context-specific words (e.g. derivatives of the username)

See __Additional Requirements__ for more information about the minimum requirements of different regulations.

### NIST 800-63B / Low Baseline

*** Memorized Secret Verifiers ***

Compare establish or change password requests with the following lists to secure passwords against a list of commonly used, compromised or expected passwords:

   - Common passwords found in breach corpuses.
   - Dictionary words.
   - Characters with repetitive or sequential order (e.g. ‘111111’, ‘abcd123’).
   - Context-specific words, such as service name or derivatives of the username.

For more information please see [NIST SP800-63b](https://pages.nist.gov/800-63-3/sp800-63b.html)

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T4/",Incomplete,,P408,Password Requirements Are Weak,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Authentication > Authentication Features > Authentication Method > Uses passwords AND
• Changes to authentication (Hidden Answer)"
Testing,T105,Verify that your application does not have unnecessary debug capability or leftover test/debug code,7,"The application can be deployed with active debugging features, debug code, or unnecessary files. This can create unintended entry points for attackers.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/215
) - http://cwe.mitre.org/data/definitions/489
)

Use the following guidelines for verifying that your application does not have leftover debugging and testing code:

_The details of this test may vary based on the type of your application._

1. Install the application (made for release) and test that debug tools do not return any debug information from the application.

2. Check the application's directories and verify that there is no leftover test or debug code.
    - Look for test data, script, or code in directories and configuration files that will be included in the deployment package.

3. Work with developers to verify the 'annotations' (if applicable) and meta-data in the source code.
    - Verify that the annotations/meta-data do not disclose any unintended information.

### Test the release version of Android application for debug and test leftovers

You must make sure that your application is not debuggable after it is prepared for release.

- Install application (made for release) on an emulator or Android device.

- Run Android ADB command (ADB is part of Android SDK and you can find it in tools or platform-tools directory).

    `adb -d shell ""run-as my.package.application ls""` 

- This command should fail and complain that the application is not debuggable. If it runs successfully (and shows directory content), this test fails.


See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T105/",Incomplete,,P379,"Active Debug Capabilities or Debug Code, or Unnecessary Files",7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• New transactions / use cases (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Requirements,T349,Protect audit information and logs against unauthorized access,7,"When security-critical events are not logged properly, or when the logs are unreliable, malicious behavior can be more difficult to detect and may hinder forensic analysis after a successful attack. 

For example, failed login attempts should always be logged, and logs are unreliable if they can be modified or deleted without authorization.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/778
)

Protect audit information against unauthorized deletion or modification. This countermeasure is as crucial as logging important events itself.

Follow these guidelines to protect audit records:

- Identify, classify and collect required audit information:
    - Audit information includes not only audit data, but audit settings and audit reports.

- Design and develop extra safeguards:
    - Give audit data a higher level of attention/security, prevent any modification to such data, or at a minimum, record the changes. 
    - The use of write-once-read-many (WORM) media is one way to adequately protect records.
    - If possible, store log data on a different partition than the application and apply proper log rotation to log files (Systematically archive log files). This may not be possible in all the scenarios but is preferable. 

- Develop capabilities to grant access to audit data on a read-only basis for viewing and for report generation.

- Create and keep signatures of records, and verify them when accessing the records again.

- Maintain the original records, and make changes to the copies if the information is of high value.
    - Otherwise, log changes to audit data if modification is allowed.

__Note:__ NIST SP 800-92 (Guide to Computer Security Log Management) provides detailed information on how to design a secure log and auditing system. The following items are listed to protect logs and make a secure logging system:

- Restrict user access to log files (users usually need no more than append access privileges, if any).
- Avoid recording unneeded sensitive data.
- Protect log files by message digests, encryption, and physical protection.
- Limit the processes that generate the logs.
- Implement suitable responses to logging errors.
- Secure the communication channel used to send log data.
- Destroy old logs when not needed.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T349/",Incomplete,,P619,Insufficient Logging or Insufficient Protection of Logs,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Requires security logging (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T350,Verify that audit information is sufficiently protected,7,"When security-critical events are not logged properly, or when the logs are unreliable, malicious behavior can be more difficult to detect and may hinder forensic analysis after a successful attack. 

For example, failed login attempts should always be logged, and logs are unreliable if they can be modified or deleted without authorization.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/778
)

Review the system's/application's audit protection policies and safeguards:

- Attempt to change the logs and review the permissions for write, delete, and modification of audit artifacts, such as audit data, audit settings and audit reports.
    - Try to access and change this data.
    - This test __fails__ if you can modify the data without having the required permissions.

- If the requirements ask for storage of audit information on write-once-read-many (WORM) devices and media, test if they are met.

- Verify that any changes to audit records are recorded according to the adopted policies.

- Work with developers to verify that authorized users can only access audit records on a read-only basis if this is mandated by the policy's regulations.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T350/",Incomplete,,P619,Insufficient Logging or Insufficient Protection of Logs,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Requires security logging (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Requirements,T364,Enable secure backup and restore capabilities,6,"System owners may permanently lose user or application information if the system does not provide required capabilities to: back up data, reconstitute system from backed up data, and protect backup data from unauthorized modification. Lack of sufficient backup data can also make the restoration to a secure state impossible after a failure.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/530
)

Follow these guidelines to develop or set up secure backup and restore capabilities:

- Decide on the __types of data__ that need to be included in the backups.
    - Such as user data, system data, and so on.

- Apply the same rules to backup data as the original data.
    - For example, make sure that confidential data (passwords, credit card numbers and social insurance numbers) in the backups are treated in the same way as the original data.

- Decide on the location of the backup data (usually a server if applicable) and secure the communication channel to the server (use secure protocols such as TLS).
    - __Authenticate__ the backup server before sending backup data to and loading data from it.

- If system recovery is implemented, restore the system to a __secure state__ after a failure.
    - Identify the minimum data, system parameters, security parameters, and security patches to achieve this goal.

- Devise a means to __resume or restart backup__ when the process fails.
    - Because of a power failure, for example.

### Android auto-backup of application data

Android Marshmallow (6, API level 23) provides a feature that enables automatic backup of application data. The system automatically sends the application data to the cloud (google drive) so that if the users install/reinstall the application they can easily restore their data. For more information, see [Auto Backup for Apps](http://developer.android.com/training/backup/autosyncapi.html).

- If the application handles sensitive data in the application files (which should not normally be the case) give users the choice to decide if they want to back up their data on Google cloud. Users can opt out of auto-backup option for all applications altogether, but an application-specific consent is recommended.
- Applications can specify which folders to include/exclude in the backup. Use [BackupAgent](http://developer.android.com/reference/android/app/backup/BackupAgent.html) and folders specified by `getNoBackupFilesDir()` or use `<full-backup-content> <include domain ...` in the backup configuration XML to exclude the data that you don't want to be sent to the cloud. Exclude sensitive data or secret key folders from auto-backup if they exist on the client and they are not necessary to be backed up.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T364/",Incomplete,,P754,Missing support for backup/restore capabilities or insufficient protection of backup data,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Testing,T365,Verify the security of backing up and restoring procedures,6,"System owners may permanently lose user or application information if the system does not provide required capabilities to: back up data, reconstitute system from backed up data, and protect backup data from unauthorized modification. Lack of sufficient backup data can also make the restoration to a secure state impossible after a failure.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/530
)

Follow these guidelines to verify that backup/restore procedures are reliable and secure:

- Create backups with different types of data.
    - For example, system data, user data, and so on.
    - Restore the data/system, and test if the system works properly and the data is restored.
    - This test __fails__ if the system does not work as intended, or the data is not restored.
 
- Interrupt the backing up process and check if it can be resumed/restarted.
    - This simulates an uncontrolled abrupt interruption, such as a power failure.
    - This test __fails__ if the backing up process cannot resume or restart.

- Verify that the same rules are applied to backup data as the original data.
    - For example, make sure that confidential data in the backups are treated in the same way as the original data (such as passwords, credit card numbers, and social insurance numbers). 

- Work with developers to verify that confidential data in transit is only sent over a secure communication channel.
    - For example, use the TLS protocol to send data securely.

- Work with developers to verify that the backup/restore server is authenticated before a data transfer.

### Verifying Android auto-backup of application data

Verify that the backup of data that is included in Android auto-backup folders (Android Marshmallow and later), conform to the policies specified for the application and the users have (optionally) given specific consent for data backup to Google cloud.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T365/",Incomplete,,P754,Missing support for backup/restore capabilities or insufficient protection of backup data,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Activities,T1380,Enforce secure user registration and access control,10,"A process is wanting for full user life cycle from user registration, access rights assignment, all the way to access rights adjustment and user de-registration. This is process would ensure the principle of least privilege. A lack of such process can cause serious harm to organizations leading to breach of confidentiality and integrity due to privilege escalations, authorization attacks and so on.

Follow these guidelines to manage user authorization and access controls to applications:

1. Establish a processes for authorizing users that is defined in writing, approved by management and applied to all users.
2. Ensure that the process associate access privileges with unique, designated users, and assign users with default access based on the [principle of least privilege](/library/glossary/G83/). Ensure that redundant UserIDs are not reissued.
3. Maintain a repository containing details of all authorized users for each application. 
4. Regularly review the details of authorized users to ensure that access privileges remain appropriate, and that redundant authorizations have been deleted (e.g., for individuals who have changed roles or left the organization). Increase the frequency of reviews for users with special access privileges (e.g., from annually to quarterly).
5. Restrict access to applications by using [sign-on and access control mechanisms](/library/glossary/G94/) such as passwords, tokens, or biometrics. Seek the approval of a senior business representative before any critical features of the sign-on process are bypassed, disabled, or changed.
6. Identify the privileged access rights associated with each system and process, such as operating system, database management system, and any applications in general. Privileged access rights must be allocated to users based on a [need-to-know principle](/library/glossary/G95/).
7. Record the allocation of privileged access rights and make sure allocation occurs only after an authorization process has taken place. 
8. Identify the condition under which all access rights must expire.
9. Avoid the unauthorized usage of generic administration UserIDs. Great care must be exercised to maintain the confidentiality of secret authentication information for generic administrative UserIDs.
10.Require additional levels of authentication (e.g., enable multi-factor authentication) when performing critical actions that involve [sensitive/personal information](/library/glossary/G8). For example, enable a password prompt when users attempt to change their personal/sensitive information.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1380/",Incomplete,,P1185,Lack of process for user registration and enforcement of access control,10,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Testing,T846,Verify if safe browsing services are used in Android,3,"Android, iOS, and some other mobile frameworks allow definition of custom URL schemes (through different methods). Lack of authorization for received requests, and lack of validation of data received with those requests in mobile applications enables adversaries to perform unauthorized actions by tricking users to click on malicious hyperlinks that are handled by those insecure applications.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/939
)

Use the following steps to verify whether you enable and use a safe browsing service on your Android device:

1. Go to the [safe browsing test site](http://malware.testing.google.test/testing/malware/).
2. This test __passes__ if you receive a warning message, or the page is blocked and cannot be accessed.

    This test __fails__ if you do not receive a warning message or can access the page.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T846/",Incomplete,,P760,Improper verification of source and content of URL schemes,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• Changes to inbound/outbound interfaces (Hidden Answer)"
Activities,T1368,Perform security testing using SAST tools,9,"It is important to run SAST on the entire code base, configuration files, third-party components and libraries. Not running SAST can result in releasing a product with a number of unfixed security bugs which causes security issues in all security principle of CIA including confidentiality, availability and integrity.

Follow these guidelines to perform security testing using Static Application Security Testing (SAST) tools:

1. Choose a SAST tool appropriate for your software architecture (such as monolithic, service-oriented, micro-services, and so on), programming language, and development frameworks. For example, configure and use OS/cloud configuration scanning for cloud environments, such as Microsoft Baseline Security Analyzer or Evident.IO.
2. Configure the SAST tool to include the entire code base, configuration files, third-party and open-source components, and shared components and libraries.
3. Where applicable (with a mature development team) add the SAST tool's plug-in to the developer IDE.
4. Execute SAST routinely on code commit, unit, integration, and regression testing, and after staging the release so that the security team can independently scan static files and component configurations. The frequency and stage at which the scan is performed depends on your pipeline's maturity and team's capacity.
5. Triage the results and update the scanner profiles to reduce the number of false positives of the following scans. Use [false positive reduction strategies](/library/glossary/G67/) for best results.
6. Properly document and maintain an inventory of the scanning results and the corresponding actions taken to address the findings.
7. Identify proper controls to fix discovered vulnerabilities (true positives) permanently.
8. Include web privacy scans in the SAST process, and track remediation accordingly.

__Note__: This countermeasure will not transition to 'Complete' unless its corresponding scan is run with __zero 'High' and zero 'Critical' findings__.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1368/",To Do,,P1186,Lack of a process for static application security testing (SAST),9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Activities,T1369,Perform security testing using DAST tools,8,"Dynamic security testing is important when an application is deployed and released into a staging environment. It is necessary to test the application in its running state and ensure about its secure functionality across the whole system. Not running a DAST can result in releasing a product with a number of unfixed security bugs which causes security issues in all principles of CIA including confidentiality, availability and integrity.

Follow these guidelines to perform security testing using Dynamic Application Security Testing (DAST) tools:

1. Choose and configure a dynamic application security testing (DAST) tool that is best for your environment according to the scope of testing and its importance. 
2. Where possible, integrate and automate the process into the application deployment pipeline using available plugins.
3. Consult with your security team to determine the minimum critical level of findings that block the build.
4. Perform a partial DAST on the deployed application after each staging release. Set boundaries of testing in the profile and limit the testing parameters so that it doesn't test the whole system if not needed.
5. Document the results and triage the DAST findings. 
6. Communicate the findings clearly to developers, including actionable solutions or recommendations. Ensure that the findings are passed through the same bug tracking processes used in the standard CI/CD workflow.
7. After developers fix the identified issues, reperform a partial DAST test. Repeat the find/fix process until the test passes.
8. Run a complete DAST before rolling out to production and make sure it passes the full test. Otherwise, triage the findings and hand them over to the development team for remediation.
9. Review the results after each partial or complete DAST test. Then, fine-tune the scanner configuration to reduce false positives, and set the scanner policies to shape the scanning boundaries properly.
10. Include web privacy scans in the DAST configuration, and track remediation accordingly. 

__Notes:__

- This countermeasure will not transition to 'Complete' unless its corresponding scan is completed with __zero 'High' and zero 'Critical' findings__.
- In addition, if this countermeasure is transitioned to 'Complete', it will __reopen if a scan has not been run with its results imported into SD Elements within its predefined time threshold__.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1369/",To Verify,,P1173,Lack of a process for dynamic application testing,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Testing,T81,Test account lockout,5,"The application does not prevent multiple failed authentication attempts within a short period. This makes it more susceptible to brute-force attacks.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/307
)

Attempt to log in with a valid username and an invalid password five times in a row.

This test __fails__ if you are not temporarily locked out, and you do not encounter any anti-automation controls.

The following are examples of anti-automation controls:

- CAPTCHA images requiring an answer.
- Temporary or permanent lockout errors.
- Requests to answer security questions in addition to providing a password.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T81/",Incomplete,,P204,Repeated Authentication Attempts Are Not Restricted,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• Features and Functions > Authentication > Authentication Features > Has direct or third party authentication for end users, devices or nodes"
Requirements,T322,Include HTTP Strict-Transport-Security headers in HTTPS responses,5,"A malicious entity (such as a network attacker) could intercept HTTPS requests and change them to HTTP. The malicious entity talks to the server over an encrypted (SSL) channel, but downgrades all the requests and responses (including all the hyperlinks in the response) to HTTP. The connection between the malicious entity and the server will be secure (SSL), however, the connection between the entity and the user will be unsecure (normal HTTP).

The user (and the browser) assume that this is because HTTPS is not supported by the site (and is not needed). The user will not receive any error in response, and will be unaware of any irregularity.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/757
)

Use HTTP Strict Transport Security (HSTS) policy to add the ***Strict-Transport-Security*** header. This header allows browsers to remember that this server requires TLS connection even if a non-secure version is initially requested.

- Specify ***max-age*** to tell the user-agent to cache the domain in the STS list for the number of seconds provided.
- Add ***includeSubDomains*** to apply the rule to all of the site's subdomains as well.

        Strict-Transport-Security: max-age=1024000; includeSubDomains

- You can also include the ***preload*** directive for your site as another layer of security.
    - **Note:** Ensure that you understand the implications of using the preload directive. The preload directive submits your domain to Google Chrome's HSTS preload list, which are sites that are hardcoded into Google Chrome as being HTTPS access only. Other browsers use this list too. When your site is included on this list, browsers only view your pages over HTTPS. They will not load your non-secure pages later, even if your server serves HTTP.

**Note:** The browser considers the HSTS header and applies it to further requests only if the server sends it with an HTTPS response to an HTTPS request. The server needs to redirect the first non-HTTP request to the HTTPS page and then return this header.

**Note:** Use this option as an additional security measure, and secure pages containing sensitive data as normal (redirect all HTTP requests to HTTPS).

## References

- [Mozilla: HTTP Strict-Transport-Security](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security)
- [RFC 6797: HTTP Strict Transport Security (HSTS)](https://tools.ietf.org/html/rfc6797)


See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T322/",Incomplete,,P744,SSL Stripping,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Protocols > Application Layer > Application Layer Protocols Used > Uses an HTTP-based protocol AND
• Has authentication (Hidden Answer) AND
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Testing,T333,Test that HTTP Strict-Transport-Security headers are sent in HTTPS responses,5,"A malicious entity (such as a network attacker) could intercept HTTPS requests and change them to HTTP. The malicious entity talks to the server over an encrypted (SSL) channel, but downgrades all the requests and responses (including all the hyperlinks in the response) to HTTP. The connection between the malicious entity and the server will be secure (SSL), however, the connection between the entity and the user will be unsecure (normal HTTP).

The user (and the browser) assume that this is because HTTPS is not supported by the site (and is not needed). The user will not receive any error in response, and will be unaware of any irregularity.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/757
)

Use the following steps to test that HTTP Strict-Transport-Security headers are sent in HTTPS responses:

1. Use Chrome's Developer Tools, BurpSuite, Firefox FireBug, or any proxy software that allows you to read the contents of HTTP requests and responses.

2. Establish a secure (HTTPS) connection with the application.

3. Send a request over HTTPS channel.

4. Open the proxy and check the headers of the response.

This test __fails__ if the Strict-Transport-Security header is not set, or it is not compatible with the policies of the application.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T333/",Incomplete,,P744,SSL Stripping,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Protocols > Application Layer > Application Layer Protocols Used > Uses an HTTP-based protocol AND
• Has authentication (Hidden Answer) AND
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Testing,T124,Test for authentication timing vulnerability,5,"The application's operations complete in different periods of time so that it becomes observable to an attacker. These timing discrepancies can reveal security-relevant information about the state of the product, such as whether a particular operation was successful or not.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/208
)

Use the following guidelines to test for authentication timing:

1. Collect five valid usernames and five invalid usernames.

2. Write a script that attempts authentication with each username.

3. Time the latency in response for all 10 usernames. 

This test __fails__ if there is a clear difference in the time it takes for invalid and valid usernames to go through authentication.

**Note:** This test looks for whether your application adds random latency delays to failed login attempts. It does not assess whether your application is vulnerable to exploitation.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T124/",Incomplete,,P104,Timing Discrepancy Information Leak,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• Features and Functions > Authentication > Authentication Features > Has direct or third party authentication for end users, devices or nodes"
Testing,T595,Test that your application checks for symlinks before opening files,6,"The software attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link ([hard link](/library/glossary/G26) or [symlink](/library/glossary/G25)) that resolves to an unintended resource.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/59
)

Use the following guidelines to test that your application checks for symlinks:

- Find scenarios in which your application opens a file for reading or writing data.
- Create a symlink at the expected location with the expected name, and link it to a file outside the application realm.
- Test that your application detects the symlink and rejects opening it.
    - This test __fails__ if your application does not detect the symlink.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T595/",Incomplete,,P480,Improper Link Resolution Before File Access ('Link Following'),6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• Changes to user output (Hidden Answer)"
Architecture & Design,T633,Mitigate Deadlock and Recursion in Services,4,"*Deadlocks* and *Recursion* can inadvertently cause a lack of availability of a resource, service, or system. 

Service [deadlocks](/library/glossary/G48/) can happen both locally and in a distributed fashion. In the local deadlock, the provider process may be poorly designed, leading to a deadlock. This can be detected by the application or its underlying operating system. In a distributed deadlock, on the other hand, services may be indefinitely waiting for one another to release a resource they require for carrying out a function. This can eventually lead to stalling the execution of services until it is detected by the administrator. As web services can be sequenced, the probability of circular waits increases.

Services may also be initiating requests back and forth to one another to solve a problem. This can lead to infinite recursions. For example:

- Suppose service *A* initiates a request to service *B* to solve a problem.
- Service *B* then looks up the UDDI registry to dynamically bind a web service providing this function to carry out this request and finds service *A*.
- It then forwards the request back to service *A*.
- They keep forwarding the requests to one another until they run out of resources.

This error can render services *unavailable* even without malicious intent.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/362
) - http://cwe.mitre.org/data/definitions/557
) - http://cwe.mitre.org/data/definitions/674
) - http://cwe.mitre.org/data/definitions/776
) - http://cwe.mitre.org/data/definitions/833
)

Use the following best practices to mitigate deadlock and recursion:

- Use execution flow diagrams to mitigate service deadlock and recursion, especially within the domain of single application.

- At the design level, use asynchronous service-to-service calls and message buffering. These are two of the most effective anti-deadlock and anti-recursion mechanisms.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T633/",Incomplete,,P827,Service Deadlock and Recursion,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Generic services (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Architecture & Design,T14,Enforce the principle of least privilege,9,"Running an application with extra privileges, such as root or administrator, can disable the standard security checks performed by the operating system and surrounding environment. In addition, pre-existing weaknesses can become security vulnerabilities at raised levels of privilege.

Privilege management functions can behave in unexpected ways on different platforms. These inconsistencies are most obvious when a non-root user is transitioned to another non-root user.

Further, signal handlers and sub-processes inherit the level of privilege of the owning process. As a result, a process with root privileges will produce signal handlers and sub-processes with root privileges.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/250
)

The principle of least privilege is the concept that all subjects of a computing environment are restricted from accessing resources that are not essential to their purpose. This includes application components, users, and processes. Following this principle, additional processes, roles, and accounts should only be created as necessary.

To enforce the fewest privileges on a subject, all privileges must be:

- Restricted as much as possible.
- Granted as late as possible.
- Revoked as soon as possible.

Define an access control model (to support a consistent and uniform way of allocating access) that grants access to the users as follows:

- Define appropriate access depending on each user's business and access needs.
- Define access to system components and data resources that are based on users’ job classification and functions.
- Enforce the fewest privileges (for example, user, administrator) to perform a job function.

Access is assigned to users, including privileged users, based on:

- Job classification and function.
- Least privileges necessary to perform job responsibilities.

Define, assign, and manage access privileges for application and system accounts as follows:

- Based on the least privileges necessary for the operability of the system or application.
- Access is limited to the systems, applications, or processes that specifically require their use.

##### Note
The principle of least privilege can be applied in many different contexts. For example:

- Create an account for the sole purpose of running a particular background process.
    - Run Server/daemon processes under restricted user accounts.

- Use accounts with access restricted to the required features and resources of a service.
    - The code interacts with a service, such as a database, that supports user accounts and access controls.
    - Multiple accounts may be required to use different parts of the code, and to work with different sets of data.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T14/",Incomplete,,P150,Running With Unnecessary Privileges,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Application General > Components > Components In Use > Uses a database AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Testing,T296,Test that unencrypted confidential data is not stored without access control mechanisms,7,"Storage devices, such as memory cards, disks, and USB devices are normally accessible by other users and processes. For example, Android external storage could be available to all the running apps. If any sensitive data is stored in clear text on these devices, attackers could potentially read the data, if proper access control mechanisms are not implemented.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/312
) - http://cwe.mitre.org/data/definitions/315
) - http://cwe.mitre.org/data/definitions/921
) - http://cwe.mitre.org/data/definitions/922
) - http://cwe.mitre.org/data/definitions/934
)

Use the following guidelines for testing that confidential data is not stored on a client, or in shared locations on a server, in an unencrypted format:

## For client applications:

- Install the application on a client, such as a mobile device.
    - If the device is protected, root or jailbreak the device, or use an emulator that simulates this.

- Locate the data-files and local databases, and then copy them.
    - It is usually possible to do so on rooted mobile devices through a USB cable.
    - For mobile devices, check the data storage folders belonging to the application on the shared storage as well.

- Inspect the contents of the files and the databases.

    This test __fails__ if sensitive data such as application secrets or sensitive user data is stored without encryption.

## For server applications:

- Browse and analyze the directory structure on the server.

- Inspect the contents of the files and the databases.
    
    This test __fails__ if sensitive data such as application secrets or sensitive user data is stored without encryption.

### Test serialized objects

Locate the folders that hold application data especially 'serialized objects' (consult the developers). Check the content of those files/streams to test that confidential data is not stored in serialized objects without encryption.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T296/",Incomplete,,P209,Cleartext Storage of Sensitive Information without Access Control Mechanisms,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T403,Verify that errors and exceptions are securely handled,5,"Sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack.

For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of "".."" sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/209
) - http://cwe.mitre.org/data/definitions/756
) - http://cwe.mitre.org/data/definitions/933
)

Follow these guidelines to verify that system or user error messages disclose minimum information about the causes of the errors and the internal status of the system:

- Work with developers to verify that a global error handler is used to catch errors or exceptions not explicitly handled by the application. Also, verify that application and server settings are set to return minimum details in the error messages when the errors are not handled by the application or the global handler.

- Work with developers to verify the content of error messages within the application. It is much easier to do this with a class or property file that contains the text and syntax of error messages.

- Test the content of error messages for a number of scenarios. Specifically, test that the messages do not provide internal system details, such as a stack trace, information about directories, or core dump.

- Work with developers, or test, that when a number of reasons have caused the error, the application does not explicitly specify the underlying reason in a way that could be used towards more directed attacks.

- Verify that when more detailed error messages are provided to a specific remote system, the error messages are signed and encrypted.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T403/",Incomplete,,P105,Information Exposure through an Error Message,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• Changes to user output (Hidden Answer)"
Testing,T2400,Verify data access audits (Android),4,"Lack of access audits to sensitive data can cause applications or their components to retrieve or modify private sensitive data. This weakness can, in turn, cause issues such as the disclosure of sensitive information or the modification or manipulation of sensitive data.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/200
) - http://cwe.mitre.org/data/definitions/1009
)

Ensure that your application follows best practices for data access audits.

- Verify that the app's manifest file contains attribution tags. 
- Verify that an instance of `AppOpsManager.OnOpNotedCallback` is implemented in the components where you intend to audit data access.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2400/",Incomplete,,P1703,Lack of sensitive data access audits,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)"
Testing,T233,Verify that each person using the system is assigned a unique user ID,5,"Allowing an individual, or process acting on behalf of an individual, to deny 1) their intention, or 2) involvement in performing actions is a major security flaw. An example of this is a perpetrator creating records and sending or receiving messages without being traced.

Two types of weaknesses can be considered under this title:

 1. **Failure to prove intention**

    - For the purpose of legal prosecution, users should receive enough information about their actions and responsibilities in the form of on-screen messages.
    - This is also useful for proving that violators harmed a system intentionally despite receiving information about the consequences of their actions.

Without these messages, violators assume that their activities are not monitored, or that they are not responsible for their actions.

2. **Failure to prove involvement or achieve non-repudiation**

    - Without the mechanisms to achieve accountability and non-repudiation, perpetrators can deny their involvement in their actions.
    - Additionally, if a system cannot uniquely identify its users, it is not possible to hold individuals responsible for their actions.

This is commonly seen when two or more users use the same set of credentials. Logging actions does not necessarily enable non-repudiation either, because it cannot eliminate the possibility of denial in the future.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/221
)

Use the following guidelines to ensure that each user has a unique user ID:

1. Obtain a complete list of people that have access to the application along with the user ID they use to access the application.

2. Review the list.

This test __fails__ if two or more people share the same User ID.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T233/",Incomplete,,P749,Opportunity for disclaimer and lack of means to achieve non-repudiation,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Has authentication (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Activities,T1381,Establish secure processes for key management,8,"Lack of key management process in any stage of cryptographic key lifecycle (e.g., key generation, distribution, revocation, backup and recovery, etc.) may significantly increase the possibility of encrypted data being recovered by unauthorized parties.

Follow these guidelines to manage cryptographic keys:

1. Document a [cryptographic key management process](/library/glossary/G96/) that covers the lifecycle of cryptographic keys, responsibilities of key owners, protection requirements for cryptographic keys, and how to handle [mandatory key disclosure](/library/glossary/G97/).
2. Assign the ownership of cryptographic keys to individuals who are aware of their responsibilities for using and protecting keys (and, where necessary, disclosing keys). Discuss and confirm that they clearly understand their responsibilities for using and protecting cryptographic keys.
3. Use unique cryptographic keys for providing security to critical assets, including both confidentiality and authenticity, as well as for providing other security services to the software (such as authentication of end-point or software updates) have a unique purpose. For example, no key may be used for both encryption and authentication operations.
4. Implement strict access controls and secure backups to ensure that cryptographic keys are protected against access by unauthorized individuals or applications, accidental or malicious destruction, and unauthorized copying.
5. Implement methods and procedures to revoke or replace public or open-box keys that are not unique per software instantiation.
6. Consider revoking encryption keys whenever:
    - Personnel with knowledge of the key leave the company or the role for which the knowledge was necessary.
    - A key is suspected of or known to be compromised.
7. Limit the use of a cryptographic key to a single purpose. This prevents multiple exposures on the occasion of a key compromise.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1381/",Incomplete,,P1434,Lack of secure key management process,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Testing,T565,Verify that data sharing between Android applications is secure,6,"Writing sensitive data in shared locations or sharing data/files with a broader audience than is required can increase the risk of unintended data disclosure and data theft. For example, this risk is present when local applications on a device have access to shared locations or files.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/668
)

Verify that all the points stated in [Countermeasure 564](/library/tasks/T564/) are considered in the implementation. In particular:

- Verify that MediaStore is not used to store files with sensitive information.

- Verify that files that contain sensitive or private data are not stored in any shared location
    - Also, make sure that a URI is not passed to the client, such as by an Intent.

- Verify that the permissions passed by URI for access to any content provider (and FileProvider) data are as strict as possible.
    - Also, verify that, where possible, the protection level is set to `signature` when communicating applications are signed with the same certificate.

- If Intents are used for sharing data, verify that the target of the Intent is as specific as possible.
    - Also, verify that explicit Intents are used where possible.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T565/",Incomplete,,P803,Using insecure methods for sharing data with other Android applications,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Mobile Technologies > Android App Features > Shares data or files with other local applications AND
• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)"
Testing,T226,Verify that authorization is centralized,9,"Users can access data or perform actions without authorization when access control checks are not applied consistently, or at all. This can lead to a wide range of weaknesses that can cause information exposure, denial of service (DoS), and the execution of arbitrary code.

Granting privileges directly to users instead of assigning privileges at the group or role level increases the complexity of access management as the number of users grows. High access management complexity may increase the opportunity for a principal to inadvertently receive or retain excessive privileges.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/285
) - http://cwe.mitre.org/data/definitions/732
) - http://cwe.mitre.org/data/definitions/862
) - http://cwe.mitre.org/data/definitions/863
) - http://cwe.mitre.org/data/definitions/935
)

Use the following guidelines to determine whether authorization is centralized:

1. Review the source code for a sample of areas where authorization decisions are made.
    - For example, when a user accesses an account balances page in a banking web application, and the application determines whether that user is allowed to access the bank balance.

2. Review how the authorization check is made.


This test __passes__ if the authorization check calls a central module, such as `app.checkAuthorization(user, function)`  or `app.userHasPermission(user, permission)`.

This test __passes__ if the authorization uses a central Access Management system.

This test __fails__ if the authorization check is not centralized, such as `if (user.name == 'Bob') then do_privileged_function`.

__Note__: These verification countermeasures require familiarity with source code structure and the manual review of a significant portion of the presentation layer source code.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T226/",Incomplete,,P182,Improper Access Control (Authorization),6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Generic services (Hidden Answer) AND
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Generic services (Hidden Answer) AND
• The application is a generic server application (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application is a generic server application (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Authorization > Authorizes Subjects > Yes AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T232,Verify that end-user transaction logs capture sufficient information,3,"When security-critical events are not logged properly, or when the logs are unreliable, malicious behavior can be more difficult to detect and may hinder forensic analysis after a successful attack. 

For example, failed login attempts should always be logged, and logs are unreliable if they can be modified or deleted without authorization.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/778
)

Complete the following steps to verify that end-user transaction audit logs capture sufficient information:

1. Obtain a production end-user transaction audit log.
    - For example, in an order entry application this might be a log file or database report that shows all transaction information about orders received from users. 

    This __test__ fails if no such audit log exists.

2. Verify that the audit log contains all of the following:
    * User ID or another unique identifier for the end user who performed the transaction.
    * Timestamp indicating when the transaction was performed.
        * Timestamps should be generated using internal system clocks, capable of being mapped to Coordinated Universal Time (UTC) or Greenwich Mean Time (GMT), and meet granularity requirements for time measurement.
    * Source IP address or another unique network identifier.
    * Description of the event/transaction.
    * Any error code, if it applies.

If the information is not captured within the audit log, then ask development or operations to show how they could produce all of the above data for a given transaction.

This test __fails__ if the information cannot be captured.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T232/",Incomplete,,P619,Insufficient Logging or Insufficient Protection of Logs,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Requires security logging (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Requirements,T49,"Disable and remove debug capabilities and code/data, and prepare application for release",7,"The application can be deployed with active debugging features, debug code, or unnecessary files. This can create unintended entry points for attackers.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/215
) - http://cwe.mitre.org/data/definitions/489
)

Use the following guidelines to secure debug features and prepare an application for release:

- Reduce the attack surface available to a potential attacker by removing or disabling any unused testing or debugging data or code before deployment. 
- Eliminate any system development or debugging backdoors that grant high-level user access without authorization.
- Remove any other unnecessary files in the application folders.
- Remove or disable debug features that are not needed after release or deployment.
- Enable all security features and adequately document them to guide future releases.
- Pay special attention to the annotations and metadata in the source code:
    - Make sure that annotations do not reveal information about the code. 
    - Decide on an annotation retention policy that is suitable for those annotations.
        - For example, annotations may be kept in the source code, compiled class, or may even be retrievable at runtime.

For platform-specific notes, see the How-to's and Additional Requirements for this countermeasure.

### Deploy the product with a secure initial configuration

Deploy the product with a secure initial configuration.

Product Secure ""Out of the Box"" is the principle of deploying a secure initial configuration of the system. This is crucial to protecting the confidentiality, integrity, and availability of the system and its data. 
    - By default, apply all default settings that mitigations rely on within the product before first processing any sensitive data, upon installation, initialization, or first use of the software.                        
    -  Enable all product security controls, features, and functions upon installation, initialization, or first use

### Android preparation for release and final APK

1. Make sure the application has the right Android directory structure. Also ensure that you have cleaned up all the unnecessary files from the directories.

    __Note__: A stricter validation is applied from Android Marshmallow and later. As a result, the APK is corrupted if the manifest file contains the name of a file that is not present in the APK. The APK must be re-signed if any of the content is removed.

2. Prevent debuggers from attaching to your application's runtime process by setting the debuggable property within the `<application>` element in the manifest file to `false`.
    - For more information, see the related how-to and the Android recommendations about [preparing for release](http://developer.android.com/tools/publishing/preparing.html).

3. Use [ProGuard](http://developer.android.com/tools/help/proguard.html) for obfuscation and optimization of the code (optional, but recommended).

4. Decide where and how you want to [publish your application](https://developer.android.com/studio/publish/index.html). With the changes in Android O, sources that install unknown apps need to call `canRequestPackageInstalls()` to check whether the user has granted permission to install unknown apps.
    - See [Prepare for Release](http://developer.android.com/tools/publishing/preparing.html) for other permissions and settings you will need for installation.

### Avoid information leak through HTTP headers

Avoid including unnecessary information such as detailed server version and name in HTTP headers or any part of the HTTP response.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T49/",Incomplete,,P379,"Active Debug Capabilities or Debug Code, or Unnecessary Files",7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• New transactions / use cases (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Testing,T1363,Verify if message throttling is properly performed in Web APIs,8,"An application/system can become unavailable for many reasons: an attack on the system (such as through a distributed denial of service attack, DDoS attack), improper allocation of resources, or over-reliance on a component that is likely to fail.

Some application vulnerabilities, such as allowing SQL injection, or cross-site scripting can increase the risk of denial of service. The weakness has two aspects: The system may not be protected against DoS attacks, and the system may not be well designed/implemented to continue to operate if its components fail (lack of a fallback mechanism).

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/400
) - http://cwe.mitre.org/data/definitions/410
) - http://cwe.mitre.org/data/definitions/730
)

Write a brief script that makes HTTP requests to the API endpoint every *n* milliseconds. The script can have different inputs such as:

- Set **IP** where requests are made from
- **API key** by which the requests are made with
- **n** the frequency by which you send to the endpoint

This test checks if a message throttling mechanism has been properly implemented for the API endpoint.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1363/",Incomplete,,P750,Denial of Service (DoS),7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Application General > Components > Components In Development > Web service AND
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Development,T408,Set secure flag on Android Activities with sensitive content,4,"Android applications may reveal sensitive data, when going to the background or when the user has allowed a third-party application to capture the screen with the new feature added in Lollipop. In Android Lollipop (5.0), an application can capture any non-secure content on the screen and deliver the content over the network.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/276
) - http://cwe.mitre.org/data/definitions/732
)

Use the following guidelines to set the secure flag on sensitive content within Android Activities:

- Set `LayoutParams.FLAG_SECURE` for any Activity that displays sensitive or confidential data (see the How-to for this countermeasure). This will prevent other applications from capturing and recording the Activity's screen content and also prevents taking a screenshot of the Activity.

    If the application goes to the background (and in the recent app list), a blank image is shown instead of the actual screen. 

- Override `onActivityStopped` lifecycle method of the app to detect entering background-state and cleanse memory content. Override `onActivityStarted` method to reinitialize the cleansed variables.

  __Note:__ From Android Lollipop (5), a third-party application can request capturing and recording screen content. When users provide consent, this feature will be enabled without requiring any specific permissions. If the users are not aware of the consequences, they may agree with screen capturing, and a malicious process can record the content of the screen and send it over the network.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T408/",Incomplete,,P769,Leak of sensitive data through Android snapshot and screen capture,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Requirements,T429,Limit the number of concurrent sessions for each account,4,"Managing account security is substantially harder for a system that does not provide session monitoring capabilities over concurrent sessions, or does not limit the number of concurrent sessions. In these cases, user and system accounts can be shared among multiple users (potentially unauthorized users).

In addition, in constrained environments where each user session exclusively locks limited resources, a lack of proper concurrent session control may cause resource starvation denial of service (DoS).

Limit the number of concurrent sessions for each **account and/or account type** to a proper number.

Define the **maximum number** for accounts:

- Globally
- By account type (such as user account, privileged user account, or system account)
- By account
- A combination of these items

For example, limit the number of concurrent sessions for system administration or privileged accounts in sensitive domains that have access to critical functions.

### Required actions

If the concurrent session limit for an account is exceeded, take any of these actions based on the application requirements:

- Terminate the previously available session (recommended for security-critical accounts).
- Ask the user through the old, new, or both sessions to choose the session that must remain active.

### Optional capabilities

Implement a control panel to enable users to:

- Check the details of active sessions at any time.
- Manually terminate sessions remotely.
- Track previous and current sessions history (logbook) by recording multiple client details, such as login date and time, user-agent (browser type), IP address, or idle time.

**Note:** This countermeasure does not address concurrent sessions started by one individual through multiple accounts.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T429/",Incomplete,,P775,Lack of Concurrent Session Control,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Session Management > Has Session Management > Yes AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to session management (Hidden Answer)"
Development,T159,Follow best practices for secure error and exception handling,5,"Sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack.

For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of "".."" sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/209
) - http://cwe.mitre.org/data/definitions/756
) - http://cwe.mitre.org/data/definitions/933
)

Follow these guidelines to create secure system or user error messages that reveal the __minimum necessary amount of information__ about the cause of an error, and the internal status of a system:

- Use a __global error handler__ to catch errors or exceptions not explicitly handled by the application.

- Analyze the return values of the functions when they contain information about the outcome of the operation. Do not ignore such values. For example a file creation object may return the status code of the operation and indicate the success or failure.

- Always provide remote systems/users with a __generic error message__ that does not reveal internal system details, such as a stack trace, working directory, or core dump.

- __Centralize__ the process of __error message generation__.
    - A class or property-file can contain the text of all returned error messages with various parameters.

- Set application and server configurations to provide __minimum details in error messages__.
    - Especially when an unhandled exception or error occurs that is not explicitly caught by the application.
    - For example, when an application server handles part of the messages before reaching your application.

- In some cases, the server may provide a facility to catch all errors before forwarding to the remote system.
    - In other cases, the application will need to explicitly develop a handler that catches any errors before redirecting them to the remote system.
        - The advantage here is that the application can log the error with a unique ID, create a generic message to the remote system, and include the unique ID in the response.
        - This allows application support personnel to troubleshoot an issue without revealing system details to remote systems.

- Do not explicitly specify the __underlying reason for an error__ when a number of reasons could have caused it.
    - This is especially important when that information could be used for more directed attacks.
    - A typical example is returning different errors for wrong usernames or wrong passwords, which allows for __user enumeration__ attacks.

- Do not include any __sensitive data__ in error messages.
    - This is especially important when error messages are logged.

- __Sign and encrypt__ detailed error messages when they are required by a specific remote system.
    - Use a set of mutual keys to encrypt the information.
    - The receiving system can also request a signature and verify the signature to verify the authenticity of the errors.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T159/",Incomplete,,P105,Information Exposure through an Error Message,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• Changes to user output (Hidden Answer)"
Testing,T289,Verify that access to Android components is properly restricted,6,"Failing to restrict access to an Android component or failing to validate the source of a received Intent in Android can result in undesirable consequences, since components can freely send Intents to other components when the target components are exported.

Any component can send an explicit Intent to another exported component. In particular, if content providers make wrong assumptions about the source of the Intent they run the risk of providing information to an unauthorized caller.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/926
) - http://cwe.mitre.org/data/definitions/939
)

Use the following guidelines for verifying the restriction of access to Android components:

- Open the AndroidManifest.xml file.

- Repeat these steps for each of these nodes:
    - `<activity>` representing activity
    - `<activity-alias>` representing activity alias
    - `<service>` representing service
    - `<provider>` representing content provider
    - `<receiver>` representing broadcast receiver

- If the component under review does not need to have external communication with other applications and components, check if it defines any intent filters.
    - If it has some intent filters and `android:exported` is not set to `false`, this test __fails__.
    - It is recommended that you set `android:exported` explicitly to `false` even if no intent filter is defined.

- If the component needs to communicate with other applications and defines some intent filters, check if its `android:exported` attribute is set to `true`.
    - If it is set to `false`, this test __fails__.
    - This attribute is not mandatory if you target Android 11 or earlier.
        - In Android 11 and earlier, If the component has an intent filter, it is exported by default.
        - It is recommended to explicitly set `android:exported` to `true`.

- If a component is exported:
    - Work with developers to create a list of permissions required to communicate with the component.
    - Check if the component asks for the right permissions, including the `android:permission` attribute.

- If two of your own applications communicate with each other:
    - Check if one application defines a custom permission, `<permission>`, that has a protection level set to `signature`.
    - Check if the other application uses the permission from the first.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T289/",Incomplete,,P759,Improper authorization of source of an Android Intent,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer) AND
• Changes to inbound/outbound interfaces (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• Changes to inbound/outbound interfaces (Hidden Answer)"
Testing,T2274,Test to confirm that the principle of least privilege is strongly implemented,9,"Running an application with extra privileges, such as root or administrator, can disable the standard security checks performed by the operating system and surrounding environment. In addition, pre-existing weaknesses can become security vulnerabilities at raised levels of privilege.

Privilege management functions can behave in unexpected ways on different platforms. These inconsistencies are most obvious when a non-root user is transitioned to another non-root user.

Further, signal handlers and sub-processes inherit the level of privilege of the owning process. As a result, a process with root privileges will produce signal handlers and sub-processes with root privileges.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/250
)

Follow these guidelines to confirm that the principle of least privilege is implemented appropriately:

- Test to confirm that all privileges are restricted as much as possible.
- Test to confirm that all privileges are granted as late as possible.
- Test to confirm that all privileges are revoked as soon as possible.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2274/",Incomplete,,P150,Running With Unnecessary Privileges,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Application General > Components > Components In Use > Uses a database AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Testing,T438,Verify that log reduction and report generation capabilities exist,4,"Audit trail systems tend to generate large log files that are difficult to analyze. Manual distillation of meaningful information from the raw data is almost impossible. Without an efficient log reduction and report generation, the captured audit trails of the system can be nearly useless.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/779
)

Use the following guidelines for verifying that your system or application includes log reduction and report generation:

- Employs required log reduction techniques to properly manipulate and summarize audit information.
- Supports required on-demand audit review, analysis, and reporting.
- Does not modify the original data or time ordering of audit records.

This test __fails__ if these features do not exist.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T438/",Incomplete,,P777,Insufficient log reduction and report generation,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Requires security logging (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Development,T272,Restrict access to the application's exported components (Android),6,"Failing to restrict access to an Android component or failing to validate the source of a received Intent in Android can result in undesirable consequences, since components can freely send Intents to other components when the target components are exported.

Any component can send an explicit Intent to another exported component. In particular, if content providers make wrong assumptions about the source of the Intent they run the risk of providing information to an unauthorized caller.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/926
) - http://cwe.mitre.org/data/definitions/939
)

If an application component enables communication with external components, restrict and manage access to that external component. Follow these guidelines to reduce the risk of unauthorized access:

- **Add a category to `<intent-filter>`** to reduce the component's exposure to implicit Intents.
    - Note, however, that `<intent-filter>` does not protect the component against external access, and explicit `Intent` objects can always reach the component.
    - Since Android 13 (API Level 33), intents will only reach an exported application component if the intent matches an application's `<intent-filter>`. If the intent does not match the filter, it will be automatically blocked even if the component is exported.

- **Define permissions** for the component so that only components with the right permissions can talk to your component.
    - Your services, activities, content providers and broadcast receivers need to have permission if they perform non-trivial actions.
    - You can also check a caller's permissions in your code using the `Context` object's methods.
    - See the _Using Permissions for Access Control_ How-to for assistance with defining permissions for various components.

- __Pay special attention to `ContentProvider` objects__.
    - Define permissions for your `ContentProvider` objects. Otherwise, exporting them will make them world-readable and world-writable.

- **Define custom permissions** that have a protection level set to ""signature"" if you communicate between your own applications.
    - In this case, only your applications can define and use those permissions (see the How-to for this Countermeasure).
    - This is a good practice for a content provider if your goal is to use it to provide data for your own applications.
    - Make custom permission names unique by appending them to the full package name of your app
    - See the How-to for this Countermeasure for more information about changes in Android 5, Lollipop.

- You can **check the source of Intents** for activities to see if you would like to respond to the `Intent`.
    - This is only possible when the caller asks for a response.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T272/",Incomplete,,P759,Improper authorization of source of an Android Intent,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer) AND
• Changes to inbound/outbound interfaces (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• Changes to inbound/outbound interfaces (Hidden Answer)"
Testing,T840,Verify that autofill framework is securely used,4,"The auto-complete function of a browser, operating system, or platform may cache sensitive information, such as credit card numbers. The cached data from auto-complete may be accessed by unauthorized actors, such as another application or other users on the same computer.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/524
) - http://cwe.mitre.org/data/definitions/525
)

Use the following guidelines if you are building an autofill service:
 
- Verify where the data is stored.
    - Verify that shared locations and `SharedPreferences` are not used to save autofill data.
- Verify that sensitive data is encrypted before storing it.
- Verify that authentication is required before providing access to sensitive and important data fields.

If you are using autofill services, such as by having any views that could be autofilled or share data with autofill services:

- Verify that autofill is not enabled on the views with mainly sensitive data.
- Verify that `.setDataIsSensitive(true)` is set on all the nodes with sensitive data.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T840/",Incomplete,,P695,Information Leak Through Auto-Complete,3,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• Changes to inbound/outbound interfaces (Hidden Answer) AND
• This is a software project (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• New/modified user input OR changes to how user input is used (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Development,T375,Release resources when no longer needed,6,"The number, or size, of a system's resources is not controlled, which allows an attacker to cause a denial of service (DoS) attack that consumes all available resources. This happens when the attacker can trigger an allocation of limited resources, such as memory, file system storage, database connection pool entries, and CPU.

A resource exhaustion attack such as this prevents legitimate users from accessing the application, and could potentially impact the surrounding environment. For example, a memory exhaustion attack could slow down not only the application itself, but also its host operating system.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/400
)

Release the following resources properly when you no longer need them:

* Files
* Network Sockets
* Database Connections
* I/O Devices (such as camera, microphone, speaker, or sensor)
* Memory (for unmanaged languages)

__Note:__ Newer versions of many programming languages introduce the ***with*** statement for ***try*** blocks, which lets you open and close multiple resources easier and with fewer errors. Use this feature for error handling where applicable.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T375/",Incomplete,,P293,Uncontrolled Resource Consumption (Resource Exhaustion),6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Testing,T442,Test that Android permissions are properly managed,4,"If Android permissions are not managed properly (and not asked for at the right time), there are chances that:

1. The application asks for too many permissions and users withdraw from installing the application altogether.
2. The application does not provide enough justification to convince users to grant the permissions.
3. The application fails to operate properly because of missing permissions.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/264
)

Create two test plans for testing your application against two permission models. Before Android Marshmallow (v6.0, API level 23), and after it:

- For versions before Android Marshmallow:
    - Grant the application the requested permissions.
    - Install and run the application.
    - Perform the tasks that need particular permissions.
    - Test if the application runs smoothly.

- For Android Marshmallow and later:
    
    - Perform tasks that require particular permissions. 
    
    - Test the application with any combination of permissions, and test if it does not fail.

        Otherwise, this test __fails__.
    
    - Reject a permission once, and test if the application provides an explanation for why the permission is needed after the second rejection.

        This test __fails__ if the application does not properly implement providing users with an explanation of permissions.
    
    - Test that the application immediately shows the benefit of accepting a permission.

        Otherwise, this test __fails__.
    
    - Test that the application does not crash when you check the ""Never ask again"" box, even if it may not be able to offer all the required services.

        Otherwise, this test __fails__.
    
    - Test that the application does not ask for permissions one after another, and waits for the right time to ask for each permission.

        Otherwise, this test __fails__.

### Test location permissions

To ensure that your application does not access unnecessary location information that could violate user privacy, make sure you have prioritized asking for approximate location (instead of fine location).

If your application does not require precise location access, request approximate location access only. If your application needs precise location access, request both the `ACCESS_FINE_LOCATION` permission and the `ACCESS_COARSE_LOCATION` permission in a single runtime request. If only `ACCESS_FINE_LOCATION` is requested, this test fails.

Initially, ask only for foreground location access. If the application asks for background location access initially, this test fails.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T442/",Incomplete,,P778,Lacking proper strategy for management of Android permissions,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Activities,T2296,Securely install and configure all software components,7,"Not having a secure process for installing and configuring all software components can result in misconfiguration, neglect to enable protection mechanism(s) and overall unsecured or incorrect implementation, which increases the attack surface. Having a process for installing and securely configuring all software components provides assurance that the software and patches are securely installed, configured, and maintained in the production environment and that all desired security functionality is active and working as intended.

Follow these guidelines to install and configure all software components securely:

1. Provide security guidance to all stakeholders involved in software installation and configuration. Train and direct all stakeholders through the deployment and configuration of the software, especially for new software. Ensure that your guidance and training include all [key components for pre-installation training](/library/glossary/G87/).
2. Document and consistently follow [software installation and configuration planning best practices](/library/glossary/G89/). 
3. Ensure that development and operations are aligned on the project install and configuration timelines. Operations must be informed of infrastructure changes in advance, as well as how to best monitor the application and early warning signs of weaknesses to be alerted to.
4. Automate software deployment whenever possible. Utilize a build server to automate the process or a script that copies files across the network - avoid manual installations and make them repeatable to eliminate the possibility of skipping manual steps.
5. Minimize the amount of change and introduce small changes in each software update if possible. If a weakness is identified , it is easier to roll back those changes or to know what the source of the weakness may be. Each release takes an effort in planning and testing - establish the right balance of frequency and size of releases that is optimal for the organization to handle.
6. Create a test plan for the application login page, key pages within the application, APIs, etc. Execute on the test plan and document results for future reference.
7. Establish key performance indicators (KPIs) or metrics to know if the application is running as expected. [Performance and capacity metrics](/library/glossary/G88/) will vary between applications. Monitor metrics and KPIs at all times.
8. Execute [post-implementation checks](/library/glossary/G90/) after deployment.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2296/",Incomplete,,P1669,Lack of a process for securely installing and configuring all software components,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Testing,T2327,Verify if a Privacy Impact Assessment is performed,9,"Improper Privacy Impact Assessment (PIA) may result in intentional or unintentional leak or abuse of users' private information. This may cause breach of privacy regulations and financial penalties. Also, such breach may damage the reputation of the organization.

Check whether any of the following items exists as evidence of a proper Privacy Impact Assessment:

- Privacy Impact Assessment policies/procedures
- Databases or specialized systems
- Templates, privacy reviews, assessments or reports to third parties

Also, verify whether external stakeholders (e.g. individuals, privacy advocates) are engaged as part of the PIA/DPIA process where required or appropriate.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2327/",Incomplete,,P1435,Lack of Privacy Impact Assessment (PIA),9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Activities,T1893,Perform a cloud solution security posture assessment,9,"Without properly identifying, monitoring and assessing the threats that cloud solutions may pose, software can be a target to many attacks and prone to various unauthorized sensitive data accesses which can remain unnoticed until a major compromise on assets happens. Therefore, identifying and assessing cloud solution threats is important for informed and secure architecture and preventing such issues.

Follow these guidelines to perform a cloud solution security posture assessment:

1. Evaluate what type of data will be stored in the cloud-based solution. Classify the data according to its importance to the business, and security risk. If a complete data or asset classification model is in place, list the security requirements for that type of data class. These requirements need to be translated into requirements for the cloud-based solution provider to comply.
2. Request recent independent evaluations of the supplier's security controls around their cloud solution, such as a risk assessment, compliance audit report, or security attestation certificate. Use these sources as inputs for further assessing the current level of risk of the cloud-based solution.
3. Perform a detailed risk assessment of the cloud-based solution using a Threat and Risk Assessment (TRA) methodology, or use a standard questionnaire of [cloud-based security controls](/library/glossary/G109/) to evaluate the solution's level of security.
4. Identify all significant risks, gaps, and vulnerabilities. Rank then based on their likelihood of being exploited, and potential impact.
5. Work with the supplier directly, or indirectly via the business or procurement function liaising with the supplier, to address all risks identified.
6. Once all identified supplier risks have been mitigated to an acceptable level, establish [contract clauses](/library/glossary/G110/) to ensure that the supplier will maintain their current level of security (or better) over time, and inform the organization if a data breach is detected or suspected. 
7. Establish standard security clauses to be included in all future supplier or vendor agreements. 
8. Document all remaining and residual risks in a risk register, and ensure that they are signed off by a senior business manager. Monitor these risks and review them annually.

__Note__: This countermeasure will not transition to 'Complete' unless its corresponding scan is completed with __zero 'High' and zero 'Critical' findings__.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1893/",Incomplete,,P1436,Lack of cloud solution security posture assessment,9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Architecture & Design,T440,Follow best practices when managing Android permissions,4,"If Android permissions are not managed properly (and not asked for at the right time), there are chances that:

1. The application asks for too many permissions and users withdraw from installing the application altogether.
2. The application does not provide enough justification to convince users to grant the permissions.
3. The application fails to operate properly because of missing permissions.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/264
)

Follow these guidelines for adopting the best permission management strategy for your Android application:

- First determine if the application actually needs a particular permission, or if it can use other applications or services through Intents instead. 
    - See this guide to help make this decision: [Consider Using an Intent](http://developer.android.com/training/permissions/best-practices.html#perms-vs-intents).

- After you make sure you need some permissions, design a strategy for requesting the permissions.
    - Familiarize yourself with both types of permission requests:
        - The old model with static permissions before Android Marshmallow.
        - After Android Marshmallow when permissions are asked at runtime.

- Identify the best time to ask for permissions.

    **Here are the main points you need to consider when asking for permissions:**

    - Ask for permissions when required, and do not overwhelm users with permission dialogs. Starting in Android 11, there is __only this time__  option in the user-facing permissions dialog whenever the app asks permission related to a microphone, camera, or location. 
    - After asking for permission, give something back to users immediately. For example, if you ask for permission to use the camera, show the pictures so that the user knows why the permissions are granted.
    - Ask for permission first, then if the user refuses, provide an explanation. If the user refuses again, do not insist, otherwise, the user may check the ""never ask again"" box. Starting Android 11, if users choose to __Deny__ specific permission more than once during the app's lifetime on a device, they do not see the system permission dialog box when the app asks that permission again.
    - Do not assume to have permissions as with Android 6 and earlier.
    - Design the application in a way that checks for permissions before using them.

- Distinguish between the types of permissions that are used by your application (normal and dangerous).
    - Dangerous permissions need user approval.
    - Never assume that a permission remains in the same category and group.
        - Permissions are frequently regrouped, so do not assume that receiving permission for a major group will give you all permissions in that group.
    - Always ask/check for a permission if you use it. In apps that target Android 11 or higher, the system automatically resets the sensitive runtime permissions that the user had granted and have been unused for a few months.

- Design a test plan for testing the application against both permission models (before Android Marshmallow and after).

### Location permissions

Obtaining user locations can raise privacy concerns. Hence, there are several best practice guidelines that developers must follow.

Starting with Android 12, users can limit their installed applications to access only the approximate location of their device. Therefore, try to avoid having your application access a device's fine location unless it's necessary. If you must use `ACCESS_FINE_LOCATION`, be sure to also include `ACCESS_COARSE_LOCATION` in the same runtime request. If the user does not grant your application permission for fine location access, you can ask that the user upgrades your application's location access from approximate to precise. To do so, describe why you need the fine location access and then request the `ACCESS_FINE_LOCATION` and `ACCESS_COARSE_LOCATION` permissions together again. Since the application already has the `ACCESS_COARSE_LOCATION` privilege, the operating system will show a different dialogue that asks the user for fine location access.

Initially, ask only for foreground location permission. If you need background location access, you can perform incremental requests. In this way, you can provide more control and transparency to the users and they will better understand which features in your app need background location access. For example, you can first guide the users into services that require foreground location access and disable the app features that require background location access. Later, if the user chooses app functionality that requires background location access, you can request it.

 For more information, refer to [Android developers guide](https://developer.android.com/training/location/permissions).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T440/",Incomplete,,P778,Lacking proper strategy for management of Android permissions,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Development,T274,Handle requests made through Android URL schemes securely,5,"Android, iOS, and some other mobile frameworks allow definition of custom URL schemes (through different methods). Lack of authorization for received requests, and lack of validation of data received with those requests in mobile applications enables adversaries to perform unauthorized actions by tricking users to click on malicious hyperlinks that are handled by those insecure applications.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/939
)

Android allows handling URL requests through the definition of intent filters in an application's Android manifest file. If you are allowing the use of custom URL schemes to facilitate communication with your application:

- Be aware that your application could be launched directly from the Internet through a link or redirect without user intention or awareness, such as in the Chrome browser.

- Notify and authorize the user each time you receive requests as URL schemes.
    - It is not enough to rely on previous authentication and authorization of the user.

- If you are receiving input through URL parameters, and it is inevitable, validate incoming data.
    - __If you are accepting input through URL parameters, you are vulnerable to all types of injection__.
    - Make sure that you reject any input that does not conform to your intended format.

- Consider user experience issues: know that unintended invocation of your application can create an unpleasant experience for users because they are pulled out of the browser and control is transferred to your application.
    - This may be blamed on your application rather than the malicious link.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T274/",Incomplete,,P760,Improper verification of source and content of URL schemes,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• Changes to inbound/outbound interfaces (Hidden Answer)"
Testing,T127,Test for null byte injection,5,"When software fails to validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.

Also, allowing external control of system or configuration settings without validating the external input can disrupt service, or cause an application to behave in unexpected, and potentially malicious ways. This is more serious if the application runs with higher level privileges than the external users.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/15
) - http://cwe.mitre.org/data/definitions/20
)

Use the following guidelines to test for byte injection:

1. Determine which direct input the operating system uses.
    - Specifically, look for input that may be used for opening a file, such as a file-name parameter. 

2. Attempt to circumvent protections, such as restrictions on file types, by appending a null character.
    - `%00` in URL encoding, and `\0` in other forms of input.
    - For example, `../../web.xml%00abcdef.pdf` may appear to be a legitimate PDF file, but it will actually open the file `web.xml` in the operating system.

This test __fails__ if you are able to circumvent a security control with the null byte.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T127/",Incomplete,,P95,Improper Input Validation,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• New/modified user input OR changes to how user input is used (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Requirements,T374,Offload HTTP request handling to dedicated modules,7,"The number, or size, of a system's resources is not controlled, which allows an attacker to cause a denial of service (DoS) attack that consumes all available resources. This happens when the attacker can trigger an allocation of limited resources, such as memory, file system storage, database connection pool entries, and CPU.

A resource exhaustion attack such as this prevents legitimate users from accessing the application, and could potentially impact the surrounding environment. For example, a memory exhaustion attack could slow down not only the application itself, but also its host operating system.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/400
)

Follow these guidelines to protect your HTTP server against external attacks:

1. Offload parts of the request handling processes onto the operating system if supported.
    - Some operating systems provide the web server with specific optimization capabilities for a listening socket.
    - For example, not sending HTTP requests to the server until the entire request is received.

2. Configure available server-specific modules to protect the HTTP server against resource exhaustion attacks.
    - For example, firewall, QoS, or security modules can restrict certain client behaviors and thereby mitigate risk of weaknesses that lead to denial of service (DoS) problems.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T374/",Incomplete,,P293,Uncontrolled Resource Consumption (Resource Exhaustion),6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Protocols > Application Layer > Application Layer Protocols Used > Uses an HTTP-based protocol AND
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
Testing,T409,Test that Android Activities with sensitive content set secure flag,4,"Android applications may reveal sensitive data, when going to the background or when the user has allowed a third-party application to capture the screen with the new feature added in Lollipop. In Android Lollipop (5.0), an application can capture any non-secure content on the screen and deliver the content over the network.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/276
) - http://cwe.mitre.org/data/definitions/732
)

Follow these guidelines to test that Activities with sensitive or confidential data do not enable capturing and making screenshots of the content:

- Identify the Activities with sensitive/confidential data.
- Install a capturing app on the device that records the screen such as `SideScreen`, or other third party applications.
- Start recording the screen into a video file.
- Take a screenshot using the Android device.
- Send the app into the background by clicking on the home button.

This test __fails__ if the content is visible in any of the above cases.

Alternatively, you can work with developers to verify that `LayoutParams.FLAG_SECURE` is set for all the Activities that contain sensitive/confidential data.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T409/",Incomplete,,P769,Leak of sensitive data through Android snapshot and screen capture,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Testing,T93,Test that sessions expire upon logout,6,"The application's session does not expire after logging out and creates a window of opportunity for attackers to hijack the session. This is an especially prominent weakness for applications on shared devices.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/613
)

Follow these steps to make sure a browser's user session expires after they log out:

1. Authenticate into the application in your browser.
2. Navigate to pages where you can view non-public information.
3. Log out.
4. Click the back button or use the address bar to attempt to revisit the non-public pages.

This test __fails__ if you can access the page successfully or see any non-public information.

Follow these steps to make sure that there is a server-side mechanism that keeps track of the status of the sessions:

1. Authenticate into the application in your browser.
2. Visit a non-public page and use a web inspector tool to capture the server response.
3. Store all session cookies.
4. Log out.
5. Use the web inspector, or a cookie editor tool, to craft an HTTP request to access a non-public page and include all stored session cookies captured in step 3.

This test __fails__ if the server responds without error, or reveals any private information.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T93/",Incomplete,,P694,Sessions Not Expired Upon Logout,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Session Management > Has Session Management > Yes AND
• The application is a generic server application (Hidden Answer) AND
• Changes to authentication (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Session Management > Has Session Management > Yes AND
• The application is a generic server application (Hidden Answer) AND
• Changes to session management (Hidden Answer)"
Development,T278,Follow best security practices when using WebView (Android),6,"Using a WebView component in an application without sufficient protection mechanisms, and without disabling the redundant functionality, could bring web application vulnerabilities to a client application. For example, A WebView component without the proper safeguards could make a mobile application vulnerable to cross-site scripting (XSS) and injections.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/829
) - http://cwe.mitre.org/data/definitions/830
)

Follow these guidelines for securing WebView usage:

- Do not enable **JavaScript** (`setJavaScriptEnabled()`) in your WebView component if you do not need it.
    - JavaScript is disabled by default for WebView.

- **Clear the cache** whenever you deal with sensitive data.
    - __Note__: Clearing the cache deletes the WebView cache for all of its components, __not only the one that calls the method__.

- **Disable access to local files** when it is not absolutely needed.
    - To disable access to local files explicitly, set these methods to `false`:
        - This includes access to content from other file scheme URLs, and/or access using JavaScript.

    - `setAllowUniversalAccessFromFileURLs` (JavaScript)
    - `setAllowFileAccessFromFileURLs` (JavaScript)
    - `setAllowFileAccess`
        - **Note:** This setting does not affect file access using `file:///android_asset` and `file:///android_res`, such as with an HTML image.
        - Make sure that the files in those locations do not disclose confidential data or make it easier to perform malicious actions.
        - Refer to [WebSettings Documents ](https://developer.android.com/reference/android/webkit/WebSettings.html) for more details about each method.

- Use the URI class to create a white-list of approved targets that WebView is allowed to access.
- You can also override `shouldOverrideUrlLoading()` and `shouldInterceptRequest()` to intercept and investigate the requests made by WebView.

- **Avoid creating JavaScript interfaces** for your local objects whenever possible.
    - You can create interfaces for your local objects to operate them using JavaScript code loaded in WebView (`addJavascriptInterface()`).
    - This allows JavaScript code, that may come from unknown sources, to manipulate your local objects.
    - Try to limit this use to JavaScript that comes from within your own APK.
    - Avoid creating interfaces for objects that access sensitive information or perform sensitive actions if the WebView object accepts external inputs.

- Enable **third party cookies** only if those cookies are needed.
    - In Android 5 (LOLLIPOP) or later, WebView default does not allow third party cookies.
    - When needed, explicitly enable the use of third party cookies (`setAcceptThirdPartyCookies()`).

- Set **mixed-content treatment policy** to `MIXED_CONTENT_NEVER_ALLOW` using `setMixedContentMode()`.
    - Prior to Android 5, WebView allowed a secure origin (HTTPS) to load content from any other origin, such as HTTP.
    - In Android 5 (Lollipop) or later, the default of WebView is `MIXED_CONTENT_NEVER_ALLOW`.

- Configure WebView to only allow a minimum set of protocol handlers required and ensure potentially dangerous handlers, such as file, tel and app-id, are disabled.

- Clear cache, storage and loaded resources before the WebView is destroyed.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T278/",Incomplete,,P761,Use of WebView without sufficient protection,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Mobile Technologies > Mobile Components > Uses a WebView component AND
• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Mobile Technologies > Mobile Components > Uses a WebView component AND
• Platform and Language > Platform/Operating System > Platform > Android AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Architecture & Design,T845,Use safe browsing service on Android,3,"Android, iOS, and some other mobile frameworks allow definition of custom URL schemes (through different methods). Lack of authorization for received requests, and lack of validation of data received with those requests in mobile applications enables adversaries to perform unauthorized actions by tricking users to click on malicious hyperlinks that are handled by those insecure applications.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/939
)

Use safe browsing services on Android, and check whether a URL hosts malware or poses any threats that can compromise a user's privacy and security. To do this, use a Safe Browsing API such as SafetyNet developed by Google to identify unsafe URLs that have been marked as a known threat on Google's updated list. SafetyNet also provides user privacy and optimized levels of battery and bandwidth consumption.

Use the following steps for the SafetyNet API:

1. Request and register an Android API key
2. Initialize the API
3. Request a URL check
4. Send the URL check request
5. Read the URL check response

For more information about using the SafetyNet API, as well as code samples, see Android documentation about the [SafetyNet Safe Browsing API](https://developer.android.com/training/safetynet/safebrowsing.html).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T845/",Incomplete,,P760,Improper verification of source and content of URL schemes,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• Changes to inbound/outbound interfaces (Hidden Answer)"
Architecture & Design,T437,Include log reduction and report generation capabilities,4,"Audit trail systems tend to generate large log files that are difficult to analyze. Manual distillation of meaningful information from the raw data is almost impossible. Without an efficient log reduction and report generation, the captured audit trails of the system can be nearly useless.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/779
)

Use the following guidelines for including log reduction and report generation features:

- Design and implement a log reduction and report generation mechanism to facilitate audit analysis and to make investigations easier after security incidents.
    - This feature allows the system to summarize important information.
    - You can consider using data mining techniques to identify any abnormal behavior displayed in the audit records.

- Allow responsible roles to decide which auditable events need to be audited by specific components of the information system.
- Make sure all events including untrusted data will **not execute as a code** in the log viewing software.

**Note:** Do not modify original content or the time ordering of the event.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T437/",Incomplete,,P777,Insufficient log reduction and report generation,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Requires security logging (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Requirements,T2399,Perform a data access audit for sensitive data (Android),4,"Lack of access audits to sensitive data can cause applications or their components to retrieve or modify private sensitive data. This weakness can, in turn, cause issues such as the disclosure of sensitive information or the modification or manipulation of sensitive data.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/200
) - http://cwe.mitre.org/data/definitions/1009
)

In big projects, it might be difficult to track which private data is being accessed and who is accessing it. To get a better view into how your application and its components access a user's private data, you should perform data access auditing. 

By registering an instance of `AppOpsManager.OnOpNotedCallback`, we can define what happens when an application component or library dependency accesses a user's sensitive data. The callback is invoked when a user's private data is used by a part of the code (for instance, when getting geolocation updates).

You can also use attribution tags to better understand which part of an Android application provides a specific type of data access. For applications targeting Android 12 or higher, you should specify attribution tags for the app's components.

To create attribution tags you can follow these steps:

1. Declare attribution tags in the manifest.
2. Use attribution tags in your application.
3. Include attribution tags in access logs.

For more information about how to perform a data access audit, please refer to Android's [data access audit](https://developer.android.com/guide/topics/data/audit-access) page.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2399/",Incomplete,,P1703,Lack of sensitive data access audits,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)"
Requirements,T60,"Use correct and approved cryptographic algorithms, parameters, and key lengths",8,"Using a non-standard algorithm or an algorithm with wrong parameters is unsafe because a determined attacker may be able to break it and compromise data. Moreover, techniques to break these algorithms may be well-known and widely available.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/325
) - http://cwe.mitre.org/data/definitions/327
) - http://cwe.mitre.org/data/definitions/934
) - http://cwe.mitre.org/data/definitions/1240
) - http://cwe.mitre.org/data/definitions/1279
)

Use the following guidelines to ensure that your application uses algorithms, parameters, and key lengths that adhere to strict standards for encryption:

- Always use well-tested and industry-accepted cryptographic algorithms.

- In case an organization does not have approved cryptographic algorithms or key lengths, check the algorithm against the [FIPS 140-3 validation list](https://csrc.nist.gov/projects/cryptographic-module-validation-program). [Annex A Section 14](https://csrc.nist.gov/CSRC/media/Projects/cryptographic-module-validation-program/documents/fips%20140-3/Draft%20FIPS-140-3-CMVP%20Management%20Manual%2009-18-2020.pdf) provides a list of approved security algorithms applicable to FIPS 140-3.
     - For example, Data Encryption Standard (DES) is not considered secure and an alternative such as Advanced Encryption Standard (AES) should be used for symmetric encryption.
- Use any unapproved algorithms only in conjunction with approved algorithms and implement it in a manner that does not reduce the equivalent cryptographic key strength provided by the approved algorithms.

- Do __not__ use __encoding and compression algorithms__ instead of encryption algorithms. For example, a common mistake is using a type of encoding to protect data, such as Base64 encoding. Base64 encoding is not an encryption algorithm and does not protect data. It can be reversed using Base64 decoding without the need for any additional shared knowledge (such as knowledge of a shared key). Techniques such as Base64, ROT13, GZip, LZW, Huffman coding, etc., should __not__ be used for protecting data in place of encryption algorithms.
- Use a key management system that provides features for secure generation, distribution, storage, change, and retirement or revocation of cryptographic keys.
- Always initialize the initialization vectors (IVs) used in the algorithms with secure random values. 
- Always use cryptographically secure random IVs when using a block cipher in cipher-block chaining (CBC) mode. 
    - A predictable IV can cause an affected system to be vulnerable to plaintext attacks. 
    - Use encryption in CBC mode instead of Electronic Codebook (ECB) mode.

- Always incorporate an industry-accepted standard padding method, where padding is used prior to or during encryption.

- Do not reuse the same cryptographic key for multiple purposes.
- Use only approved, collision-resistant hash algorithms and methods with a salt value of appropriate strength that is generated using a secure random number generator.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T60/",Incomplete,,P224,Use of weak cryptographic algorithms or unsecure algorithm practices,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Development,T71,Capture sufficient information for each transaction in audit logs,3,"When security-critical events are not logged properly, or when the logs are unreliable, malicious behavior can be more difficult to detect and may hinder forensic analysis after a successful attack. 

For example, failed login attempts should always be logged, and logs are unreliable if they can be modified or deleted without authorization.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/778
)

Maintain logs for user transactions that need to be audited on the system at a later date. This is especially important for any transaction triggered by the end-user, such as changing stored data or configurations in the system. These transactions are subject to auditing at some point and must be logged. 

The minimum requirements for log entries include the following:

* User/Process/Device IDs
* Timestamp - including milliseconds
* Source IP
* Description of event
* Error codes (if applicable)

Additionally, consider capturing information about the following transactions:

* Event descriptions
* Success/Fail indications
* Filenames involved
* Access control or flow control rules invoked

Finally, make the following considerations:

- Make log fields from **trusted and untrusted sources** in log entries distinguishable.
- Make sure that a **consistent time reference** is used among the logging module, database, application, and any other systems using or examining the logs. 
- Use **internal system clocks** to generate time stamps for audit records that can be mapped to Coordinated Universal Time (UTC) or Greenwich Mean Time (GMT) and meet granularity of time measurements. Make sure to use a synced time source.
- **Enforce an upper limit** to the length of each log entry to make sure it is within an expected range if you log data based on user input.
    - Otherwise, it is possible to cause a denial of service condition by filling the target disks with log data.
- Consider the **types of auditing and audit processing requirements** before allocating audit record storage capacity.
    - This reduces the likelihood of exceeding capacity and the potential loss or reduction of auditing capability.

__Note:__ NIST SP 800-92 (the Guide to Computer Security Log Management) provides valuable information on how to design a suitable log and auditing system.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T71/",Incomplete,,P619,Insufficient Logging or Insufficient Protection of Logs,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Requires security logging (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T123,Test for integer overflow,7,"The application performs a calculation that can produce an integer overflow or underflow. This can happen when an application's logic assumes that a resulting value will always be larger or smaller than the original value. This can lead to other weaknesses because the size of the buffer is incorrectly calculated, such as a buffer overflow.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/128
) - http://cwe.mitre.org/data/definitions/190
) - http://cwe.mitre.org/data/definitions/191
)

Use the following guidelines to test for integer overflow:

1. Identify sections of the site that perform integer arithmetic with user-supplied values.

2. Provide large negative and positive values and inspect the result. 

This test __fails__ if the result is negative when it should be positive, or vice-versa.

Here are some values to try:

- -1
- 0
- 0x100
- 0x1000
- 0x3fffffff
- 0x7ffffffe
- 0x7fffffff
- 0x80000000
- 0xfffffffe
- 0xffffffff
- 0x10000
- 0x100000

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T123/",Incomplete,,P87,Integer Wraparound,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Susceptible to integer overflow (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T106,Test that site is not vulnerable to direct object access attacks,8,"The application's authorization process is bypassed by an attacker who is able to retrieve user records. This occurs when a key used to identify a user's record is exploited by an attacker to look up information on its owner. The authorization process does not properly check whether the malicious user has permission to perform this action because the key being exploited belongs to an authorized user, and the malicious user has likely been legitimately authenticated by the system.

An example of this is when a system uses sequential, or other guessable, session IDs that allow one user to easily switch to another user's session and view or modify their data.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/639
) - http://cwe.mitre.org/data/definitions/932
)

Use the following guidelines to test whether your site is vulnerable to direct object access attacks:

1. Look for all parts of the web application that provide access to files on the application or on other servers, excluding static files normally served by a web server.
    - This includes HTML, JavaScript, and Cascading Style Sheets.

2. For each part of the application, inspect the mechanism that specifies the file name. 
    - For example, the file name is specified as an HTTP parameter. 

3. Once you've identified the mechanism, use an HTTP-proxy tool to try to change the values to files that you are not allowed to have access to.
    - For example, change `account158.pdf` to `account186.pdf`, or `../../../WEB-INF/web.xml`. 

This test __fails__ if you can access a file that you are not authorized to.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T106/",Incomplete,,P524,Access Control Bypass Through User-Controlled Keys,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Activities,T1892,Perform a Threat and Risk Assessment (TRA),9,"Software can be a target for many attacks which can go unnoticed until a major compromise happens. To reduce the risk of a high-impact vulnerability being exploited, it is important to proactively identify and assess software threats and vulnerabilities, implement mitigation and controls based on priority, and have a feedback loop that learns from these identified vulnerabilities and prevents future occurrences.

Follow these guidelines to perform a Threat and Risk Assessment (TRA):

1. Ensure that senior management understands both the role of TRAs in support of security risk management, and their responsibilities for approving acceptable levels of residual risk. Clarify roles and responsibilities for the TRA, and identify explicitly the risk acceptance authority.
2. Establish the scope for the TRA, related to the purpose of the assessment and the risk environment.
3. Assemble a team with the knowledge and skills needed to collect essential information, analyze the data and recommend meaningful solutions to meet the business objectives of the organization. 
4. Identify the resources required, assign responsibilities and establish a realistic schedule for TRA activities.
5. Review vulnerability reports and statistics for previous software to inform the security risk assessment.
6. List all assets that fall within the scope of the assessment. Determine the level of impact that might reasonably be expected to arise in the event of a compromise to the confidentiality, availability or integrity of each asset. Assign asset values and prioritize the list of assets, ranked from the most valuable to the least.
7. List all meaningful threats/risks that might affect assets within the scope of the assessment. Assess the probability of each threat/risk actually occurring, and determine the potential impact of each threat/risk. Assign threat/risk levels for each threat/risk based on their likelihood and impact. Produce a list of threats/risks ranked from the most serious to the least.
8. List all relevant safeguards that fall within the scope of the assessment, in detail. Determine the effectiveness of these safeguards in mitigating potential threats/risks. Identify remaining vulnerabilities that expose assets to the identified threats/risks.
9. Assess the effects of vulnerabilities on the likelihood of each threat/risk occurrence, the probability of compromise, and the severity of ensuing damage. Assign relative levels for each vulnerability based on the increased exposure to the compromise of confidentiality, availability or integrity. Produce a list of vulnerabilities ranked from the most serious to the least.
10. Identify realistic safeguards that would mitigate all risks identified by addressing their associated vulnerabilities, and reduce them to an acceptable level.
11. Present the TRA report to the risk acceptance authority with the findings and recommendations of the TRA project.

### Data privacy risk assessment

Check these items to verify an adequate risk assessment for your organization's data privacy policy:

- Test your data security posture regularly.
- Incorporate data privacy risks as part of your security-related assessment process and information governance.
- Use encryption and similar technical measures to protect personal information.
- Establish procedures for controlling access to personal information.
- Incorporate data privacy into your organization's business continuity strategy.
- Created strategies to help prevent data loss.

In addition, verify evidence of risk assessment implementation, including:

- Repositories and databases containing information related to risk assessments.
- Records of privacy-related measures and policies as well as plans to implement such measures.
- Logs and records of monitoring results

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1892/",Incomplete,,P1187,Lack of a process for identifying and assessing threats,9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Testing,T445,Verify that only approved cryptographic algorithms and key lengths are used,8,"Using a non-standard algorithm or an algorithm with wrong parameters is unsafe because a determined attacker may be able to break it and compromise data. Moreover, techniques to break these algorithms may be well-known and widely available.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/325
) - http://cwe.mitre.org/data/definitions/327
) - http://cwe.mitre.org/data/definitions/934
) - http://cwe.mitre.org/data/definitions/1240
) - http://cwe.mitre.org/data/definitions/1279
)

Use the following guidelines for verifying that you only use approved cryptographic algorithms and key lengths:

- List all the cryptographic algorithms and key lengths used by developers in the application.
    - Verify that they are validated to be secure and reliable.

- Check the algorithms against the [FIPS 140-3 validation list](https://csrc.nist.gov/projects/cryptographic-module-validation-program). [Annex A Section 14](https://csrc.nist.gov/CSRC/media/Projects/cryptographic-module-validation-program/documents/fips%20140-3/Draft%20FIPS-140-3-CMVP%20Management%20Manual%2009-18-2020.pdf) provides a list of approved security algorithms applicable to FIPS 140-3.

- Check that the initialization vectors (IVs) are randomized securely for cipher-block chaining (CBC) and other algorithms.

- Check that encryption is performed in CBC mode instead of Electronic Codebook (ECB) mode, which encrypts separate blocks of input.
    - Unless there is a justification for not using CBC.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T445/",Incomplete,,P224,Use of weak cryptographic algorithms or unsecure algorithm practices,7,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T448,Verify that Android in-app purchases are securely implemented,3,"The software does not sufficiently verify the origin or authenticity of data in a way that causes it to accept invalid data.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/345
) - http://cwe.mitre.org/data/definitions/347
)

Follow these guidelines to verify that in-app purchases are securely implemented:

1. Check that the signature provided by Google is verified by the server component of the application.
    - Check that the signature verification is performed on the server when possible.
    - Otherwise, this test __fails__.
        - There are some cases where client side verification is acceptable, but these decisions should be justified.

2. Verify that a secure channel with a secure handshake (such as TLS/SSL) is used between the application and the server.

3. Verify that the content (which is enabled through a purchase) is not in the APK in a way that hackers can access the files and copy them to any other packages.
    - Verify that the content is encrypted when moved to the client from the server. If possible, the encrypted content should be application-specific, in a way that does not allow its use on other devices and applications.
    - Verify that a unique element of the application is used to encrypt the content (such as a Universal Unique Identifier, UUID)

4. Check that Order ID and Developer Payload values are verified against the request values.

5. Verify that secure random generators (`SecureRandom`) are used to generate random numbers for Developer Payloads. 

6. Verify that the code is obfuscated.

7. Verify that a revocation scheme is designed and implemented for the purchased items.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T448/",Incomplete,,P244,Insufficient Verification of Data Authenticity,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Development,T382,Manage the visibility of actions and information in the Android notification area,4,"The application does not authenticate functionality that requires a provable user identity, or consumes a significant amount of resources.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/306
)

Since the notifications are accessible even on a locked phone, it is important to hide private information and disable sensitive actions in the notification area as described here:

- Design a public version of notifications and exclude any private information or sensitive actions from that version.
    - Use `Notification.publicVersion` for this purpose.

- Use `Notification.Builder.setVisibility()` to set the visibility of sensitive actions and private information to `VISIBILITY_PRIVATE`.
    - By default, the visibility is `VISIBILITY_PUBLIC` so the content will be shown on the lock screen.

___Note:___ The notifications have public and private versions. The public version will be displayed on a secure lock screen and can be seen and used by anyone (this may include a customized action, such as responding to a message). You do not want an unauthorized person to reply to messages when the phone is locked. The private part is only shown once the user has signed into the device (such as by using a pattern or password).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T382/",Incomplete,,P203,Missing Authentication for Critical Functions,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Has authentication (Hidden Answer) AND
• Platform and Language > Platform/Operating System > Platform > Android AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Platform and Language > Platform/Operating System > Platform > Android AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Requirements,T8,Use Consistent Error Handling for All Authentication Failures,5,"If an error message is too descriptive or response times are different for different inputs during __authentication__, __new account creation__, or __password recovery__, it can expose account details. For example, a detailed error message or response time discrepancy can tell an attacker if a username is already in use, or if a password for a given user is incorrect. These exposures can be accidental (bug), or intentional (design), and lead to user-enumeration.

User-enumeration is the process of obtaining a list of valid user accounts by exploiting the authentication features of an application. This list can be used for unauthorized account access, or valid account lockout (denial of service attack, DoS attack).

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/204
)

User-enumeration can be prevented using the following methods:

- Use a __general error message__ for failed authentication:
    - The message should not reveal whether the username or password entered is invalid.
- Make response time independent of existence, length, and correctness of any part of the credentials by adding a random delay or implementing a fixed response time (i.e., credentials validation time plus a filler delay always equals a constant time regardless of input). 
- If the __application must set a cookie__ before the user signs in, or when the user submits their credentials:
    - Do not create cookies that are different for existing or non-existing users.
    - Use a canned value with a similar structure and length to the cookie.

- If the application displays a __personal phrase or image__ after a valid username is entered, or before a password is validated:
    - Use an anti-automation challenge with accessibility options, such as CAPTCHA, to throttle username submissions.
    - This feature exposes account information and cannot be completely protected.
    - Consider removing this feature if it is not a key requirement for the application.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T8/",Incomplete,,P100,Response Discrepancy Information Exposure,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Changes to authentication (Hidden Answer) AND
• Features and Functions > Authentication > Authentication Features > Has direct or third party authentication for end users, devices or nodes"
Activities,T1382,Manage performance and capacity,5,"Not defining threshold and capacity metrics for services and components can cause performance issues and weaknesses, which might lead to service unavailability. It is also important to monitor the activities of the services and components to prevent and manage incidents.

Follow these guidelines to manage software capacity and performance:

1. Implement [software performance and capacity management procedures](/library/glossary/G98/).
2. Plan for capacity management during the design of a new service, or when hanging an existing one.
3. Create capacity acquisition plans, and define acquisition thresholds for different types of capacities (at a minimum, storage space, and size of inputs and outputs).
4. Create capacity troubleshooting procedures to support existing incident management processes.
5. Monitor existing activities to get an overview of the current state of services and components from a capacity and performance perspective. Define and monitor [application performance and capacity metrics](/library/glossary/G88/).
6. Analyze any issues identified and promptly remediate them, such as if a storage space threshold is reached.
7. Based on the result from the previous step, build a capacity baseline and forecast the capacity needs for each service or component.
8. Define role and responsibilities for monitoring the performance of software activity, performance issues and resolution, and incident management.
9. Establish capacity management reporting to gather and provide stakeholders with the data related to service capacity, service usage, and service performance.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1382/",Complete,,P1190,Lack of process for performance and capacity management,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• NOT Critical (Hidden Answer) AND
• NOT High (Hidden Answer) AND
• NOT Medium (Hidden Answer) AND
• NOT Low (Hidden Answer) AND
• NOT Very Low (Hidden Answer) AND
• NOT Unclassified (Hidden Answer) AND
• Changes to processes/activities (Hidden Answer) AND
• Application General > Context and Characteristics > Application's Context and Characteristics > Include general countermeasures in the Activity phase (process engineering tasks) in this project"
Testing,T86,Test session ID uniqueness and rotation after authentication,9,"Session fixation is commonly seen when any of the following occurs: 

1. A web application authenticates a user **without resetting the existing session**:
    - Unless the old session is reset, the new session will be associated with its previous owner.
2. An attacker forces a user into a **session with a known ID**:
    - Once the user is authenticated, the attacker has access to the authenticated session. 
3. The application or container uses **predictable session IDs**: 
    - If an attacker can determine the ID of a session, they can create a new session with a known session ID.
    - The attacker can then use this compromised session to force a user into logging into the application.
    - Once the user is authenticated into the compromised session, the attacker can use application's account with all of the privileges of the user.
    - This is called **session hijacking**.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/384
) - http://cwe.mitre.org/data/definitions/930
)

Use the following guidelines for testing the uniqueness and rotation of session IDs:

### Verify the randomness of generated IDs

This test __fails__ if unique session IDs are not generated using a proper random string generator algorithm, such as an algorithm from approved libraries.

### Test session ID rotation after authentication

1. Browse to the login page.
2. Take note of the current session ID using either an HTTP-proxy tool or a cookie viewer.
3. Authenticate and inspect the session ID.

This test __fails__ if the session ID does not change.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T86/",Incomplete,,P678,Session Fixation,9,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Session Management > Has Session Management > Yes AND
• Has authentication (Hidden Answer) AND
• Changes to session management (Hidden Answer)"
Requirements,T371,Provide unified and manageable interfaces for security settings and configuration parameters,4," - It will become considerably difficult or impossible to check whether security requirements are fulfilled and that the system is securely configured if:
    - The system (and its components) do not provide adequate transparency.
    - Simple interfaces through which configuration parameters (and security settings) could be verified and changed.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/16
) - http://cwe.mitre.org/data/definitions/671
)

- Design and develop unified and manageable interfaces to security settings and configuration parameters.
    - For many systems, it is helpful to provide the capability to generate a report, listing all installed components and their active and disabled features and settings.

- The following are examples of security settings:
    - Settings for file, directory, and account permissions.
    - Registry settings.
    - Functions, ports, protocols, services, and remote connection settings.

- For specific technologies and platforms, there are common secure configurations such as United States Government Configuration Baseline (USGCB), which are established, recognized, and standardized benchmarks that improve secure configuration settings.
    - Implementing such standard baselines based on the system requirements is recommended.

- Implement functionalities that allow authorized administrators to verify the integrity of security-relevant configurations and make sure they have not been tampered with. Refer to additional requirements of [T338](/library/tasks/T338) for more information about administrative interface settings.

- Make sure that all hardware and devices do not have any unprotected configuration interfaces, and that the only available option for the user is factory reset.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T371/",Incomplete,,P756,Lack of system transparency and control over configuration parameters,4,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)"
Requirements,T517,Protect user registration and account modification pages against user enumeration,6,"If an error message is too descriptive or response times are different for different inputs during __authentication__, __new account creation__, or __password recovery__, it can expose account details. For example, a detailed error message or response time discrepancy can tell an attacker if a username is already in use, or if a password for a given user is incorrect. These exposures can be accidental (bug), or intentional (design), and lead to user-enumeration.

User-enumeration is the process of obtaining a list of valid user accounts by exploiting the authentication features of an application. This list can be used for unauthorized account access, or valid account lockout (denial of service attack, DoS attack).

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/204
)

When a user tries to **modify his/her username** or **create a new account**, the application needs to check if the username already exists. However, giving away this information allows attackers to build a list of valid usernames (user enumeration). Follow these steps to protect the application against user enumeration:

1. Include an anti-automation technique, such as a **CAPTCHA** image to slow down attacks. Use accessibility options for visually impaired users.
    - **Note:** If usernames are not user email addresses, but arbitrary choices, ignore the rest of these steps.

2. For usernames that are email addresses, display a message informing the user that a validation email has been sent to their inbox. Display a similar message **regardless of whether the entered email address exists**. 

3. If an account is associated with the selected email address, send a **warning message** to that address. Also send an **abnormal behavior alert** to system admin.

4. If the submitted email address is unique in the system, send a one-time-use email address validation link to that address.  Expire the link if it is not used within a predefined period.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T517/",Incomplete,,P100,Response Discrepancy Information Exposure,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• Features and Functions > Authentication > Authentication Features > Has direct or third party authentication for end users, devices or nodes"
Testing,T518,Test that registration and account modification pages are protected against user enumeration,6,"If an error message is too descriptive or response times are different for different inputs during __authentication__, __new account creation__, or __password recovery__, it can expose account details. For example, a detailed error message or response time discrepancy can tell an attacker if a username is already in use, or if a password for a given user is incorrect. These exposures can be accidental (bug), or intentional (design), and lead to user-enumeration.

User-enumeration is the process of obtaining a list of valid user accounts by exploiting the authentication features of an application. This list can be used for unauthorized account access, or valid account lockout (denial of service attack, DoS attack).

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/204
)

Follow these steps for both username **registration** and **modification** procedures to make sure they do not lead to user enumeration:

1. Attempt to submit 10 consecutive username registration/modification requests.
    - This test __fails__ if:
        - You do not see a **CAPTCHA** (or other **anti-automation** technique).
        - You are not prevented from making further requests.
    - **Note:** If the username is an arbitrary choice of the users instead of email addresses, ignore the rest of these steps.

2. Attempt to create/modify an account with an existing email address and inspect the response. Next, create/modify an account with a unique email address and inspect the response.
    - This test __fails__ if the two **responses differ**.

3. Attempt to create an account with an existing email address.
    - This test __fails__  if the existing account owner does not receive a **warning notification**.

4. Attempt to modify a username with an existing email address. Next, check the inbox for an **email address validation link**.
    - This test __fails__ if there is no such link sent.

5. Click on the **link** and follow the instructions to change the username. Once the new username is successfully set, click the link again within the expiry time window.
    - This test __fails__ if it allows you to update the username again.

6. Repeat step 4. Next, wait until the link's **expiry time window** passes. Then click on the link and attempt to update the username.
    - This test __fails__ if it allows you to update the username.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T518/",Incomplete,,P100,Response Discrepancy Information Exposure,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• Changes to authentication (Hidden Answer) AND
• Features and Functions > Authentication > Authentication Features > Has direct or third party authentication for end users, devices or nodes"
Requirements,T569,Prevent parameter tampering in web services,5,"When software fails to validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.

Also, allowing external control of system or configuration settings without validating the external input can disrupt service, or cause an application to behave in unexpected, and potentially malicious ways. This is more serious if the application runs with higher level privileges than the external users.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/15
) - http://cwe.mitre.org/data/definitions/20
)

Apply constraints on type and format in **Web Services Description Language (WSDL)** files to prevent parameter tampering in web services.

- Restrict incoming data to *strong types* so that only allowed values are true or false, a number, or one of a small number of acceptable values.
- Loosely typed web services do not have a strongly defined schema in the interface definition of the service (WSDL) to define any kind of message format that the service uses. 

For more information please see the article [Loosely typed versus strongly typed web services](http://www.ibm.com/developerworks/library/ws-loosevstrong/).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T569/",Incomplete,,P95,Improper Input Validation,5,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Generic services (Hidden Answer) AND
• Protocols > Application Layer > Application Layer Protocols Used > Uses an HTTP-based protocol AND
• New/modified user input OR changes to how user input is used (Hidden Answer) AND
• This is a software project (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Application General > Components > Components In Development > Web service AND
• New/modified user input OR changes to how user input is used (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Development,T1365,Mitigate Server Side Request Forgery,8,"Server Side Request Forgery (SSRF) is the result of an attacker forging a crafted request from a vulnerable application on the server side. This attack is usually carried out to exploit other services running on the vulnerable application's server, or the resources publicly available on that server's intranet. It is usually difficult to get the vulnerable application to send requests to the Internet due to firewall settings. This attack is possible when the attacker has partial or full access over the HTTP request.

Consider the following vulnerable PHP code:

    if (isset($_GET['url'])) { 
        $url = $_GET['url'];
    }
    $image = fopen($url, 'rb');
    fpassthru($image); }

In this code, the application makes a request using a `url` that can be controlled by the attacker. The `url` is used to fetch an image from the specified location. When an attacker carefully crafts a `url` like this, it affects all of the requests that follow. When these requests are handled by the vulnerable PHP code above, they are made on behalf of and relayed to the attacker using the `url`. All the following GET requests consist of the crafted `url` and the HOST header (`example.com`, where the PHP code is being served). 

- *Apache HTTP Server Status:*
```
GET /?url=http://localhost/server-status HTTP/1.1 Host: example.com
```
 In the above request, the `url` is set to fetch information about the Apache HTTP Servers status. The response returned by the above PHP code (and relayed to the attacker) contains the Apache HTTP Server Status that is serving that code, given `mod_status` is enabled on that server (it is enabled by default).

- *Accessing the unauthenticated information/services available on the Intranet:*
```
GET /?url=http://169.254.169.254/latest/meta-data/ HTTP/1.1 Host: example.com
```
 The `url` in the above request is set to fetch cloud metadata. The IP address `169.254.169.254` is the standard address used by Amazon EC2 and other cloud providers for distributing metadata to cloud instances.

- *Performing port scans on internal networks and gathering information about it:* by feeding different IP and port combinations into the `url` parameter in the above PHP code, an attacker can obtain valuable information regarding the intranet on which the web server hosting that code resides. The following table gives some examples of the kind of information someone can gather from the HTTP error codes and the latencies of responses:

| **URL (IP+Port)** | **HTTP Response Code** | **Round-Trip delay Time** |
|--|--|--|--|
| http://localhost:22 | 200 | 10 (ms) | The port is open! |
| http://localhost:23 | 500 | 10 (ms) | The port is closed. |
| http://10.0.0.1/ | 500 | 30010 (ms) | It is blocked by a firewall or unable to route. |
| http://10.0.0.1:8080/ | 500 | 10 (ms) | Port is closed, but traffic is routed to that address. |

- *Using other URl schemes to access files on a local system or internal network:*
```
GET /?url=file:///etc/passwd HTTP/1.1 Host: example.com
```
 In the above request, the `url` fed into the vulnerable php code uses a `file://` scheme to access the local files the php application may have access to. In this example, the attacker is attempting to access the `passwd` file. Depending on how the HTTP requests are made in the code, one may be able to exploit the features available with the requesting utility (for instance, cURL, fopen(), dict URL, where `fopen()` is used in the above PHP code):
```
GET /?url=dict://localhost:11211/stat HTTP/1.1 Host: example.com
```
 In the above request, the `dict://` URI scheme is used. Port *11211* is the default port used by Memcached, which normally grants unauthenticated access to the local server users (via the loopback network interface - localhost). Memcached is a utility for speeding up dynamic web applications by caching the data and objects in memory.


###External Resources:

1. [How To: Server-Side Request Forgery (SSRF)](https://www.hackerone.com/blog-How-To-Server-Side-Request-Forgery-SSRF)
2. [What is Server Side Request Forgery (SSRF)?](https://www.acunetix.com/blog/articles/server-side-request-forgery-vulnerability/)
3. [SSRF Bible Cheatsheet](https://github.com/jivoi/offsec_pdfs/blob/master/SSRF-Bible-Cheatsheet.pdf)

###Related Weaknesses In SD Elements

1. [P673: Improper Neutralization of SSI on a Web Page](/library/problems/P673/)
2. [P116: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')](/library/problems/P116/)

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/918
)

Mitigate Server Side Request Forgery (SSRF) by employing the following best practices:

- Utilize whitelists and identify the IP addresses the application needs to access. Do not use blacklists and regular expressions directly on the user input as they are bad practice and can be easily bypassed. The attacker can use HTTP redirect, wildcard DNS services like xip.io, or even alternate IP encoding to bypass blacklists and regular expressions.
- Sanitize the output of the request before relaying its response to the user. Make sure the response received by the server application is actually what it expects it to be before sending it back to the user. Prevent any information leakage to the attacker.
- Disable unused URL schemas (i.e. `file://`, `dict://`, `ftp://` and `gopher://`), if your application only makes use of HTTP or HTTPS to make requests.
- Operational Security Measures: use authentication on internal services such as 
Memcached, Redis, Elasticsearch and MongoDB (they do not require authentication by default).

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1365/",Incomplete,,P1169,Server Side Request Forgery (SSRF),8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T128,Test for access control bypass through user-controlled keys,8,"The application's authorization process is bypassed by an attacker who is able to retrieve user records. This occurs when a key used to identify a user's record is exploited by an attacker to look up information on its owner. The authorization process does not properly check whether the malicious user has permission to perform this action because the key being exploited belongs to an authorized user, and the malicious user has likely been legitimately authenticated by the system.

An example of this is when a system uses sequential, or other guessable, session IDs that allow one user to easily switch to another user's session and view or modify their data.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/639
) - http://cwe.mitre.org/data/definitions/932
)

Follow these guidelines to test for access control bypass through user-provided keys:

- Inspect the application for areas where user-specific information is accessed based on input from that user.
    - For example, when account balances can be accessed by an HTTP-post parameter.

- Change the key and check if the data objects are accessible.
    - For web applications, you can use an HTTP-proxy tool to modify the input, and then attempt to access another user's data.

This test __fails__ if you are able to view a different user's data where normally you wouldn't be able to due to the lack of sufficient permissions.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T128/",Incomplete,,P524,Access Control Bypass Through User-Controlled Keys,8,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Features and Functions > Session Management > Has Session Management > Yes AND
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Features and Functions > Session Management > Has Session Management > Yes AND
• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Has authentication (Hidden Answer) AND
• The application is a generic server application (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• Has authentication (Hidden Answer) AND
• The application is a generic server application (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application is a generic server application (Hidden Answer) AND
• The application handles confidential or sensitive data (Hidden Answer) AND
• New/modified user input OR changes to how user input is used (Hidden Answer)"
Testing,T1874,Test that HTTP response headers do not expose any sensitive information,5,"Information exposure can be resultant or primary. Resultant exposure includes path disclosure in a PHP script error, and primary exposure includes timing discrepancies in crypto. Because there are many types of weaknesses that lead to information exposure, their severity can range widely depending on the type of information that is revealed.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/200
) - http://cwe.mitre.org/data/definitions/201
) - http://cwe.mitre.org/data/definitions/215
) - http://cwe.mitre.org/data/definitions/526
)

Check HTTP response headers using a tool such as developer tools in your browser and look for any sensitive information such as information about the server technologies in use (including version of the software or platform used) in the response. If such information exists, this test fails.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T1874/",Incomplete,,P96,Information Exposure,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Protocols > Application Layer > Application Layer Protocols Used > Uses an HTTP-based protocol AND
• The application is a generic server application (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Development,T2139,Prevent information exposure through APIs,7,"Information exposure can be resultant or primary. Resultant exposure includes path disclosure in a PHP script error, and primary exposure includes timing discrepancies in crypto. Because there are many types of weaknesses that lead to information exposure, their severity can range widely depending on the type of information that is revealed.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/200
) - http://cwe.mitre.org/data/definitions/201
) - http://cwe.mitre.org/data/definitions/215
) - http://cwe.mitre.org/data/definitions/526
)

Use the following guidelines to avoid exposing information with APIs:

- Remove unused API endpoints. 

- Never return unrequested sensitive data in API responses, and never rely on the client-side filtering. Attackers can call the API directly and receive sensitive data that the client would filter out.

- Define a schema for all the data returned by API methods including errors, and enforce it by a schema-based response validation mechanism. Use this mechanism as an extra layer of security.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T2139/",Incomplete,,P96,Information Exposure,6,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• Application General > Components > Components In Development > Web service AND
• Changes to servers/frameworks and/or configuration (Hidden Answer) AND
• This is a software project (Hidden Answer)"
Development,T345,Check the integrity of critical configuration and data files,4,"Missing support for verification of the integrity of important configuration files can cause serious damage to the system if attackers can circumvent access control measures (or use an insider's help) to change the content of those files.

Similar to configuration files, there are other forms of critical data at rest, or in transit, which decide the behavior of the system and pose the same type of risk.

More information at the Common Weaknesses Enumeration=
 - http://cwe.mitre.org/data/definitions/353
) - http://cwe.mitre.org/data/definitions/354
) - http://cwe.mitre.org/data/definitions/494
)

Follow these guidelines for checking the integrity of important configuration and data files:

- Identify important configuration files (or other sources of critical data) that are loaded from a shared or insecure location, and seriously affect the functionality of the server, application, or system.
    - If untrusted people are able to change the contents of those files, include those files.
        - For example, if the contents of files can be changed because they are in unprotected or shared folders on a server.
        - Other examples may include a configuration file that contains parameters of a controller, or a file containing authentication system parameters.

- Develop capabilities to verify the integrity of those files, whenever they are going to be used.
    - For example, create a cryptographic hash of the file and keep it in another secure place along with the date of last modification of the file.
        - Use a hash function with little probability of collision, such as SHA256.
        - It is preferable to encrypt the hash as a signature.
    - Include the last modification date in the hash/signature data.

- Verify the hash/signature each time that the file is going to be used and check the hash value and the modification date to make sure that the file has not been altered.

- Develop capabilities to automatically notify the responsible role of any integrity violation.

- Develop capabilities to give an automated response upon discovering discrepancies.
    - For example, shutdown, restart, or implement other security safeguards.
    - Other examples of specific safeguards are halting the system, reversing the changes, or triggering audit alerts.

See the original solution in SDElements here= https://preview.sdelements.com/library/tasks/T345/",Incomplete,,P752,Missing support for integrity checks on important data and configuration files,3,Organisation Architecture,ArmorCode,qa.armorcode.io,,,"This Countermeasure meets the following set of applicable rules and Project Survey criteria:

• The application handles confidential or sensitive data (Hidden Answer) AND
• New transactions / use cases (Hidden Answer)
-----------------------------------------------------------------------------------------------------------
• The application handles confidential or sensitive data (Hidden Answer) AND
• Changes to servers/frameworks and/or configuration (Hidden Answer)"
