{"vulnerability_details":[{"id":70,"type":"vulnerabilities","attributes":{"uuid":"bdeb1491-827e-4e67-b31b-2e7e3dc83a63","name":"LDAP Injection Vulnerabilities in HTTP Requests","description":"<p>The API may be vulnerable to LDAP injection</p>","question":"Are there LDAP injection vulnerabilities in HTTP request?","success-message":"No LDAP injection vulnerabilities were found in HTTP request.","business-implication":"","intro":"<p>LDAP injection is an attack used to exploit web based applications that construct\nLDAP statements based on user input. When an application fails to properly\nsanitize user input, it is possible to modify LDAP statements using a local proxy.\nThis could result in the execution of arbitrary commands such as granting permissions\nto unauthorized queries, and content modification inside the LDAP tree. The same\nadvanced exploitation techniques available in SQL injection can be similarly\napplied in LDAP injection.</p>","compliant":"","non-compliant":"","related-to":"","types":[4]},"relationships":{}},{"id":96,"type":"vulnerabilities","attributes":{"uuid":"5e409f74-7c82-43e4-a401-1b14da07722a","name":"Enabled Android Application Backup","description":"<p>Application backup might contain sensitive information private data of the app into their PC</p>","question":"Is the application backup enabled?","success-message":"The application backup is not enabled.","business-implication":"","intro":"<p>The mobile application uses external backup functionality (default Android backup mechanism) that may store inside sensitive data from the application.</p>\n<p>In certain conditions, this may lead to information disclosure (e.g. when a backup server or the Gmail account is compromised).</p>","compliant":"<p>Below is an example of how to prevent the application from getting backed-up via adb in your AndroidManifest file:</p>\n<pre><code>android:allowBackup=\"false\"\n</code></pre>","non-compliant":"<p>Example of an insecure code in AndroidManifest file:</p>\n<pre><code>android:allowBackup=\"true\"\n</code></pre>","related-to":"<ul>\n<li><a href=\"https://developer.android.com/guide/topics/manifest/application-element.html\">Android Manifest Docs</a></li>\n<li><a href=\"http://resources.infosecinstitute.com/android-hacking-security-part-15-hacking-android-apps-using-backup-techniques/\">Hacking Android Apps using Backup</a></li>\n</ul>","types":[1]},"relationships":{}},{"id":42,"type":"vulnerabilities","attributes":{"uuid":"3cd64a1c-2d9f-4987-bb45-e6f2bbf77bfa","name":"Non-signature Protected Exported Activities","description":"<p>The Android application exports Activity for use by other applications,\nbut does not properly restrict which applications can launch the\ncomponent or access the data it contains via custom signature defined by\n<code>android:protectionLevel</code>.</p>","question":"Are any activities exported without a ProtectionLevel?","success-message":"The application does not export any activity without a ProtectionLevel.","business-implication":"<p>Attackers may use non-privileged services to intercept and track the\nuser's activity. Furthermore, it may be possible to insert data that may\nmaliciously modify the behaviour of the application.</p>","intro":"<p>Activities provide user interfaces. Activities are started with Intents,\nand they can return data to their invoking components upon completion.\nAll visible portions of applications are Activities.</p>\n<p>Exported Unprotected Activities can be called by any other application\ninstalled in the phone leading to XAS (Cross Application Scripting)</p>","compliant":"<p>If you are using a Activity for sharing between only your own apps, it\nis preferable to use the <code>android:protectionLevel</code> attribute set to\n\"signature\" protection. Signature permissions do not require user\nconfirmation, so they provide a better user experience and more\ncontrolled access to the application when the apps accessing the\nActivity are signed with the same key</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":94,"type":"vulnerabilities","attributes":{"uuid":"ea3b6499-ee79-4cfe-9eb6-065942f3eb78","name":"Javascript CORS enabled in Webview","description":"<p>Javascript in the Webview having CORS enabled to be loaded from file and any arbitrary URL</p>","question":"Is the application vulnerable to Javascript CORS?","success-message":"The application is not vulnerable to Javascript CORS.","business-implication":"","intro":"<p>Cross-Origin Resource Sharing (CORS) is enabled in WebView. JavaScript used in mobile application can send and receive data from arbitrary remote hosts. This can be a risk if the remote host is impersonated or compromised.</p>","compliant":"<p>Below is an example of how to prevent the application from Javascript CORS issue:</p>\n<pre><code>WebSettings settings = getSettings();\nsettings.setAllowUniversalAccessFromFileURLs(false)\nsettings.setAllowFileAccessFromFileURLs(false)\n</code></pre>","non-compliant":"<p>Example of an insecure code :</p>\n<pre><code>WebSettings settings = getSettings();\nsettings.setAllowUniversalAccessFromFileURLs(true)\nsettings.setAllowFileAccessFromFileURLs(true)\n</code></pre>","related-to":"<ul>\n<li><a href=\"https://developer.android.com/reference/android/webkit/WebSettings.html\">Android Webkit Settings Docs</a></li>\n</ul>","types":[1]},"relationships":{}},{"id":95,"type":"vulnerabilities","attributes":{"uuid":"e3089062-e739-45d5-a9f9-e9361b880da0","name":"Java Object Deserialization Vulnerability","description":"<p>Object deserialization performed on an untrusted resource (e.g. user-supplied input or external storage), can be dangerous if the data for deserialization is tampered by an attacker.</p>","question":"Is the application vulnerable to Object deserialization?","success-message":"The application is not vulnerable to object deserialization.","business-implication":"","intro":"<p>It is often convenient to serialize objects for convenient communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security - which is of course a dangerous security assumption.</p>\n<p>An attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the non-transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly.</p>","compliant":"<p>Use only serialization when you have the control over data. Use the following pointers to figure out if serialization is necessary</p>\n<ul>\n<li>Does the deserialization take place before authentication?</li>\n<li>Does the deserialization limit which types can be deserialized?</li>\n<li>Does the deserialization host have types available which can be repurposed towards malicious ends?</li>\n</ul>","non-compliant":"<p>Example of an insecure code :</p>\n<pre><code>bundle.putSerializable(\"exampleClass\", exampleOfSerializabledClass);\nexampleOfSerializabledClass = bundle.getSerializable(\"exampleClass\");\n</code></pre>","related-to":"<ul>\n<li><a href=\"https://androidvulnerabilities.org/vulnerabilities/ObjectInputStream_deserializable\">CVE-2014-7911</a></li>\n<li><a href=\"https://github.com/retme7/CVE-2014-7911_poc\">POC for this vulnerability</a></li>\n</ul>","types":[1]},"relationships":{}},{"id":38,"type":"vulnerabilities","attributes":{"uuid":"17aeda3d-2bda-4e97-92ac-2fe58b008dc7","name":"Unprotected Exported Activities","description":"<p>The Android application exports Activity for use by other applications,\nbut does not properly restrict which applications can launch the\ncomponent or access the data it contains.</p>","question":"Are any activities exported insecurely?","success-message":"The application does not insecurely export any activities.","business-implication":"<p>Attackers may use non-privileged services to intercept and track the\nuser's activity. Furthermore, it may be possible to insert data that may\nmaliciously modify the behaviour of the application.</p>","intro":"<p>Activities provide user interfaces. Activities are started with Intents,\nand they can return data to their invoking components upon completion.\nAll visible portions of applications are Activities.</p>\n<p>Exported Activities can be called by any other application installed in\nthe phone leading to XAS (Cross Application Scripting)</p>","compliant":"<p>If you are using a Activity for sharing between only your own apps, it\nis preferable to use the android:protectionLevel attribute set to\n\"signature\" protection. Signature permissions do not require user\nconfirmation, so they provide a better user experience and more\ncontrolled access to the application when the apps accessing the\nActivity are signed with the same key</p>\n<p>If the activity is called within itself, then don't export it or use\nIntent-Filter for custom permissions</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":101,"type":"vulnerabilities","attributes":{"uuid":"a190895c-99ca-4afc-be91-44604df067de","name":"Insecure Cookie Attributes","description":"<p>\"HTTPOnly\" cookies cannot be read by client-side scripts, therefore marking a cookie as HTTPOnly can provide an additional layer of protection against cross-site scripting attacks.</p>","question":"Does the application uses proper Cookie attributes?","success-message":"The application uses proper Cookie attributes","business-implication":"","intro":"<p>Cookies are often a key attack vector for malicious users (typically targeting other users) and the application should always take due diligence to protect cookies. Cookies generally are very common and widely used in browser world, mainly for Session Management, User preferences and state etc. Cookie is a small piece of data with some attributes sent by servers. This is stored by browsers and shared with server in the subsequent requests.</p>\n<p>If cookie not marked as secure then it can be transmitted over a HTTP connection, therefore if this cookie is important (such as a session cookie), an attacker might intercept it and hijack a victim's session. If the attacker can carry out a man-in-the-middle attack, he/she can force the victim to make an HTTP request to steal the cookie.\nand if it is not marked as HTTPOnly, during a cross-site scripting attack, an attacker might easily access cookies and hijack the victim's session.</p>","compliant":"<p>Mark the cookie as Secure &amp; HTTPOnly. This will be an extra layer of defense against XSS. However this is not a silver bullet and will not protect the system against cross-site scripting attacks. An attacker can use a tool such as XSS Tunnel to bypass HTTPOnly protection.</p>","non-compliant":"<p>In Java usage,</p>\n<pre><code>&lt;session-config&gt;\n&lt;cookie-config&gt;\n&lt;secure&gt;false&lt;/secure&gt;\n&lt;/cookie-config&gt;\n&lt;/session-config&gt;\n</code></pre>\n<p>In ASP.Net,</p>\n<pre><code>&lt;httpCookies requireSSL=\"false\" /&gt;\n</code></pre>\n<p>In php,</p>\n<pre><code>session.cookie_secure = false\n</code></pre>","related-to":"<ol>\n<li><a href=\"https://www.owasp.org/index.php/SecureFlag\">Cookie Secure Flag</a></li>\n<li><a href=\"https://www.owasp.org/index.php/HttpOnly\">HTTPOnly Cookie</a></li>\n</ol>","types":[3]},"relationships":{}},{"id":39,"type":"vulnerabilities","attributes":{"uuid":"4f5d5275-abbe-4f77-af9c-2943ce4ea0ab","name":"Unprotected Exported Receivers","description":"<p>The Android application exports Receiver for use by other applications,\nbut does not properly restrict which applications can launch the\ncomponent or access the data it contains.</p>","question":"Does the application export Broadcast Receivers?","success-message":"The application does not export Broadcast Receivers.","business-implication":"<p>Attackers may use non-privileged services to intercept and track the\nuser's activity. Furthermore, it may be possible to insert data that may\nmaliciously modify the behaviour of the application.</p>","intro":"<p>Broadcast Receivers receive Intents sent to multiple applications.\nReceivers are triggered by the receipt of an appropriate Intent and then\nrun in the background to handle the event. Receivers are typically\nshort-lived; they often relay messages to Activities or Services. There\nare three types of broadcast Intents: normal, sticky, and ordered.\nNormal broadcasts are sent to all registered Receivers at once, and then\nthey disappear. Ordered broadcasts are delivered to one Receiver at a\ntime; also, any Receiver in the delivery chain of an ordered broadcast\ncan stop its propagation. Broadcast Receivers have the ability to set\ntheir priority level for receiving ordered broadcasts. Sticky broadcasts\nremain accessible after they have been delivered and are re-broadcast to\nfuture Receivers.</p>\n<p>Exported Broadcast Receiver can be called by any other malicious\napplication installed in the phone to invoke the Broadcast Receiver\nleading to XAS (Cross Application Scripting)</p>","compliant":"<p>If you are using a Broadcast Receiver for sharing data between only your\nown apps, it is preferable to use the <code>android:protectionLevel</code> attribute\nset to \"signature\" protection. Signature permissions do not require user\nconfirmation, so they provide a better user experience and more\ncontrolled access to the Broadcast Receiver when the apps accessing the\ndata are signed with the same key</p>\n<p>If the Broadcast Receiver is called within itself, then don't export it\nor use Intent-Filter for custom permissions</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":102,"type":"vulnerabilities","attributes":{"uuid":"453eb8c4-90c3-4978-aa47-1b55116e0d7f","name":"Sensitive Information Disclosure","description":"<p>Applications sometimes inadvertently expose sensitive data such as user’s passwords, financial\ndata, health records, PII etc. and this data can be stolen by attackers to perform identity theft,\nconduct credit card frauds and large no. of other crimes.</p>","question":"Does the application discloses sensitive information?","success-message":"The application does not discloses sensitive information","business-implication":"","intro":"<p>Data in transit or at rest needs to be secured from exposure using proper access controls and\ncryptography. Sometimes, even if cryptography is in place, it may not be sufficient as many\napplication still use weak cryptographic algorithms or vulnerable hash algorithms to protect\nsensitive data. The application APIs can also reveal sensitive information if proper access\ncontrols are not kept in place revealing sensitive information to outside world. Also, many\napplications leave the sensitive directories open publicly which may reveal lot of sensitive\ninformation including internal software versions, passwords, internal IPs etc.</p>","compliant":"<p>Data should never be transmitted in clear text. Sensitive Data at rest should be stored with\nproper use of encryption and proper access controls should be kept in place in order to protect\nthe data exposure across users and to the outside world.</p>","non-compliant":"","related-to":"<ol>\n<li><a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Sensitive Data Exposure</a></li>\n<li><a href=\"https://www.owasp.org/index.php/Information_exposure_through_query_strings_in_url\">OWASP Information Exposure</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/200.html\">CWE-200</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/359.html\">CWE-359</a></li>\n</ol>","types":[3]},"relationships":{}},{"id":46,"type":"vulnerabilities","attributes":{"uuid":"2f90d3dd-e722-4346-9794-1939aecbce99","name":"Content Provider File Traversal Vulnerability","description":"<p>Depending on the implementation of <code>ContentProvider</code>, use of the method\ncan lead to a directory traversal vulnerability.</p>","question":"Is the application vulnerable to content provider directory traversal attacks?","success-message":"Application does not seem to be vulnerable to content provider directory traversal attacks.","business-implication":"<p>Directory Traversal exploits allow attackers to escape the context of\nthe sandboxed application and read/write local files compromising the\napplication/device.</p>","intro":"<p>Content Providers are databases addressable by their application-defined\nURIs. They are used for both persistent internal data storage and as a\nmechanism for sharing information between applications.</p>\n<p>By using the <code>ContentProvider.openFile()</code> method, you can provide a\nfacility for another application to access your application data (file).\nDepending on the implementation of ContentProvider, use of the method\ncan lead to a directory traversal vulnerability. Hence, when exchanging\na file through a content provider, the path should be canonicalized\nbefore it is used.</p>","compliant":"<p>By using the canonicalized path, directory traversal will be mitigated\neven when a doubly-encoded path is supplied.</p>\n<pre><code>private static String IMAGE_DIRECTORY = localFile.getAbsolutePath();\npublic ParcelFileDescriptor openFile(Uri paramUri, String paramString) throws FileNotFoundException {\n    String decodedUriString = Uri.decode(paramUri.toString());\n    File file = new File(IMAGE_DIRECTORY, Uri.parse(decodedUriString).getLastPathSegment());\n    if (file.getCanonicalPath().indexOf(localFile.getCanonicalPath()) != 0) {\n        throw new IllegalArgumentException();\n    }\n    return ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);\n}\n</code></pre>\n<p>For example, the following double encoded string will circumvent the fix.</p>\n<pre><code>%252E%252E%252F%252E%252E%252F%252E%252E%252Fdata%252Fdata%252Fcom.example.android.app%252Fshared_prefs%252FExample.xml\n</code></pre>\n<p>The first call of <code>Uri.getLastPathSegment()</code> will decode \"%25\" to \"%\"\nand return the string:</p>\n<pre><code>%2E%2E%2F%2E%2E%2F%2E%2E%2Fdata%2Fdata%2Fcom.example.android.app%2Fshared_prefs%2FExample.xml\n</code></pre>\n<p>When this string is passed to the second <code>Uri.getLastPathSegment()</code>, \"%2E\"\nand \"%2F\" will be decoded and the result will be:</p>\n<pre><code>../../../data/data/com.example.android.app/shared_prefs/Example.xml\n</code></pre>","non-compliant":"<p>This non-compliant code example tries to retrieve the last segment from\nthe path paramUri, which is supposed to denote a file name, by calling\n<code>android.net.Uri.getLastPathSegment()</code>. The file is accessed in the\npre-configured parent directory IMAGE_DIRECTORY.</p>\n<pre><code>private static String IMAGE_DIRECTORY = localFile.getAbsolutePath();\npublic ParcelFileDescriptor openFile(Uri paramUri, String paramString) throws FileNotFoundException {\n    File file = new File(IMAGE_DIRECTORY, paramUri.getLastPathSegment());\n    return ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);\n}\n</code></pre>\n<p>This non-compliant code example attempts to fix the first non-compliant\ncode example by calling <code>Uri.getLastPathSegment()</code> twice. The first call\nis intended for URL decoding and the second call is to obtain the string\nthe developer wanted.</p>\n<pre><code>private static String IMAGE_DIRECTORY = localFile.getAbsolutePath();\npublic ParcelFileDescriptor openFile(Uri paramUri, String paramString) throws FileNotFoundException {\n    File file = new File(IMAGE_DIRECTORY, Uri.parse(paramUri.getLastPathSegment()).getLastPathSegment());\n    return ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);\n}\n</code></pre>","related-to":"<ul>\n<li><a href=\"https://www.securecoding.cert.org/confluence/display/android/DRD08-J.+Always+canonicalize+a+URL+received+by+a+content+provider\">JVN#78601526 GREE for Android vulnerable to directory traversal</a></li>\n</ul>","types":[1]},"relationships":{}},{"id":48,"type":"vulnerabilities","attributes":{"uuid":"7a1c94eb-71ea-4227-a060-c6261008d9b1","name":"iOS SecKeyEncrypt implementation","description":"<p><code>SecKeyEncrypt</code> determines how to encrypt data from a PUBLIC KEY in iOS</p>","question":"Does the application use proper SecKeyEncrypt implementation?","success-message":"The application uses proper SecKeyEncrypt, or SecKeyEncrypt is not implemented.","business-implication":"","intro":"<p>Most of the time iOS handles all the encryption. It automatically\nencrypts and decrypts HTTPS for network traffic and manages encrypted\nfiles using file protection.</p>\n<p>But in case of custom implementation <code>SecKeyEncrypt</code> and <code>SecKeyDecrypt</code> is\ncalled</p>","compliant":"","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":107,"type":"vulnerabilities","attributes":{"uuid":"048cd099-d002-415e-a284-e39fb11dadc5","name":"OpenSSL CCS Injection Vulnerability","description":"<p>This vulnerability allows malicious intermediate nodes to intercept encrypted\ndata and decrypt them while forcing SSL clients to use weak keys which are\nexposed to the malicious nodes.</p>","question":"Is the backend server vulnerable to OpenSSL CCS Injection?","success-message":"The the host is not vulnerable to OpenSSL CCS Injection","business-implication":"","intro":"<p>OpenSSL’s flaw with ChangeCipherSpec processing makes it possible for\nmalicious third parties to intermediate specific communication.\nThrough this bug, attackers are able to enforce OpenSSL servers and clients\nto use weak key materials.</p>\n<p>There are risks of tampering with and exploits on contents and authentication\ninformation over encrypted communication, when the software uses\nthe affected version of OpenSSL.</p>","compliant":"<p>Upgrade OpenSSL version to the latest. Following are the Affected Versions:</p>\n<ul>\n<li>OpenSSL 1.0.1 through 1.0.1g</li>\n<li>OpenSSL 1.0.0 through 1.0.0l</li>\n<li>all versions before OpenSSL 0.9.8y</li>\n</ul>\n<p>Not Affected Versions:</p>\n<ul>\n<li>OpenSSL 1.0.1h</li>\n<li>OpenSSL 1.0.0m</li>\n<li>OpenSSL 0.9.8za</li>\n<li>latest updated OpenSSL versions 1.1 onwards</li>\n</ul>","non-compliant":"","related-to":"<ol>\n<li><a href=\"https://www.openssl.org/news/secadv/20140605.txt\">OpenSSL Advisory</a></li>\n<li><a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0224\">CVE-2014-0224</a></li>\n<li><a href=\"http://ccsinjection.lepidum.co.jp/\">CCS Injection Vulnerability</a></li>\n</ol>","types":[4]},"relationships":{}},{"id":82,"type":"vulnerabilities","attributes":{"uuid":"112eac90-d34f-4a88-afba-69052aae3b3e","name":"Sending Address Book Data over Unencrypted Insecure Transport Layer","description":"<p>If Contact List is sent via Network Layer, ensure that Proper\nCertificate Pinning and encryption is being used.</p>","question":"Does the application sends sensitive data and Personal Identifiable Information from address book over the network","success-message":"The Application doesn't sends Address Book over Insecured Network","business-implication":"<p>In the event that a user (anonymous or verified) is able to aceess the\nAddress Book of others, the business may experience:</p>\n<ul>\n<li>Reputational Damage</li>\n<li>Fraud</li>\n<li>Information Theft</li>\n</ul>","intro":"<p>Information stored in the Contacts list along with the private notes are\nstore in clear text without any encryption. It was found that the application\nsends the data from address book over the network. Lack of encryption might\nresult in leakage of information to third parties. Insecure Transport Layer\nProtection might allow Man-In-The-Middle Attack, via which the\nAddressBook data or Personal Identifiable Information can be stolen</p>","compliant":"","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":29,"type":"vulnerabilities","attributes":{"uuid":"4dcbab1d-ceb2-46bc-b7f3-ab1dd8c0c704","name":"PhoneGap JavaScript Injection","description":"<p>Application using older version of Phonegap has Javascript Injection\nVulnerability</p>","question":"Does the application have PhoneGap javascript injection vulnerability?","success-message":"The application does not seem to be affected by PhoneGap javascript injection.","business-implication":"<p>With the presence of this vulnerability, attackers may:</p>\n<ul>\n<li>Open and send data to arbitrary applications.</li>\n<li>Bypass the HTTP whitelist and connect to arbitrary servers.</li>\n<li>Change the start page via a crafted intent URL.</li>\n</ul>","intro":"<p>PhoneGap uses web technology to help bridge the gap between mobile and\nweb.</p>\n<p>Applications built for PhoneGap are hybrid apps, and are neither fully\nnative or truly web-based, living somewhere in between. Because mobile\nOSes don't natively support HTML5 and JavaScript, PhoneGap apps use\nWebView, a web container that allows mobile devices to execute\nJavaScript and HTML5. WebView (called various terms for differing\nplatforms) helps bridge the gap between web and mobile, and various\nplugins help make an application more robust and native-feeling.</p>\n<p>Communicating with each OS, PhoneGap uses different APIs (built by\nPhoneGap) and plugins (both native and custom), which act as the bridge\nbetween each platform's native language and the PhoneGap script. Out of\nthe box, PhoneGap comes with APIs for Camera, Contacts, Compass, Media,\nFileSystem and more. Plugins extend those functionalities not accessible\nwith the available APIs.</p>","compliant":"<p>Upgrade Phonegap or Apache Cordova to the latest version.</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":16,"type":"vulnerabilities","attributes":{"uuid":"334cc1f5-173f-4e28-8ed9-a6254b5fa328","name":"Derived Crypto Keys","description":"<p>Traces of Crypto Keys which might be intermediate keys used when loading\nthe different libraries.</p>","question":"Does the application use insecure encryption methods?","success-message":"Application seems to be using the correct cryptographic encryption method, if any.","business-implication":"<p>Broken cryptography will result in the following:</p>\n<ul>\n<li>Privacy Violations</li>\n<li>Information Theft</li>\n<li>Code Theft</li>\n<li>Intellectual Property Theft</li>\n<li>Reputational Damage</li>\n</ul>","intro":"<p>The predominant Android cryptographic security provider API defaults to\nusing an insecure AES encryption method: ECB block cipher mode for AES\nencryption. Android's default cryptographic security provider (since\nversion 2.1) is BouncyCastle.</p>\n<p>Note that Java also selects ECB as a default value when only the AES\nencryption method is chosen. So, this rule also applies to Java, but for\nJava's different default cryptographic security provider. Oracle Java's\ndefault cryptographic security provider is SunJCE.</p>\n<p>Default behaviors of cryptographic libraries used in Android systems\noften do not use recommended practices. For example, the predominant\nAndroid Java security provider API defaults to using an insecure AES\nencryption method: ECB block cipher mode for AES encryption. Extensive\napp testing by Egele 2013 has shown that the following 6 rules are\noften not followed, resulting in 88 percent of apps with cryptographic APIs on\nGoogle Play making at least one mistake.</p>\n<p>Six common cryptography rules that were tested:</p>\n<ol>\n<li>Do not use ECB mode for encryption.</li>\n<li>Do not use a non-random IV for CBC encryption.</li>\n<li>Do not use constant encryption keys.</li>\n<li>Do not use constant salts for PBE.</li>\n<li>Do not use fewer than 1,000 iterations for PBE.</li>\n<li>Do not use static seeds to seed SecureRandom().</li>\n</ol>","compliant":"<p>The following are the rules which should be followed while using\nencryption:</p>\n<ul>\n<li>If AES encryption is used, always pair it with CBC (Cipher Block Chaining)</li>\n<li>Never use just AES as encryption because it defaults to AES/ECB (Electronic Codebook)</li>\n<li>Always use padding with the encryption, for example, AES/CBC/PKCS7 is stronger than just AES/CBC</li>\n<li>Never use older algorithm like DES (Data Encryption Standard)</li>\n<li>Assume that the network layer is not secure and may potentially be hostile and eavesdropping.</li>\n<li>Enforce the use of SSL/TLS for all transport channels in which\n  sensitive information, session tokens, or other sensitive data is\n  going to be communicated to a backend API or web service.</li>\n<li>Remember to account for outside entities like third-party analytics,\n  social networks, etc. and use their SSL versions even when an\n  application runs a routine via the browser/webkit. Mixed SSL\n  sessions should be avoided and may expose the user's session ID.</li>\n<li>Use strong, industry standard encryption algorithms and appropriate\n  key lengths.</li>\n<li>Use certificates signed by a trusted CA provider.</li>\n<li>Never allow self-signed certificates, and consider certificate\n  pinning for security conscious applications.</li>\n<li>Do not disable or ignore SSL chain verification.</li>\n<li>Only establish a secure connection after verifying the identity of\n  the endpoint server with trusted certificates in the key chain.</li>\n<li>Alert users through the UI if an invalid certificate is detected.</li>\n<li>Do not send sensitive data over alternate channels, such as SMS,\n  MMS, or notifications.</li>\n</ul>","non-compliant":"","related-to":"","types":[1,2]},"relationships":{}},{"id":50,"type":"vulnerabilities","attributes":{"uuid":"b62b17e1-8757-48ec-98a4-6a916e931d76","name":"Unsecured Keychain Data","description":"<p>Insecured data kept in iOS Keychain</p>","question":"Does the application insecurely store data in Keychain?","success-message":"The application does not store sensitive data in Keychain.","business-implication":"<p>Failing to take proper precautions may result in loss of login\ncredentials, passwords and other highly sensitive data stored in the\nkeychain.</p>","intro":"<p>iOS provides the Keychain for secure data storage. However, in several\nscenarios, the Keychain can be compromised and subsequently decrypted.</p>\n<p>In all versions of iOS up to and including iOS 11, Keychain can be\npartially compromised if attacker has access to the encrypted iTunes\nbackup. Due to the way iOS re-encrypts Keychain entries when creating\niTunes backups, it is possible to partially decrypt Keychain when iTunes\nbackup is available and password for backup encryption is known (note\nthat iTunes backups that are not encrypted do not allow decryption of\nKeychain items).</p>\n<p>Keychain access controls are rendered ineffective if a jailbreak has\nbeen applied to the device. In this case any application running on the\ndevice can potentially read every other application's Keychain items.</p>\n<p>Lastly, for older devices, such as the iPhone 4, for which so-called\n\"bootrom exploits\" exist, the Keychain can be compromised by an attacker\nwith physical access to the device.</p>","compliant":"<p>Store the sensitive data such as passwords in an encrypted form on the\ndevice keychain so that even if the device is compromised no one can\ninfer correct passwords.</p>\n<p>When storing data in the Keychain, use the most restrictive protection\nclass (as defined by <code>kSecAttrAccessible</code> attribute) that still allows\nyour application to function properly. For example, if your application\nis not designed to be running in the background, use\n<code>kSecAttrAccessibleWhenUnlocked</code> or <code>kSecAttrAccessibleWhenUnlockedThisDeviceOnly</code></p>\n<p>To prevent Keychain item exposure via iTunes backup, use one of\n<code>...ThisDeviceOnly</code> protection classes if practical.</p>\n<p>Finally, for highly sensitive data, consider augmenting protections\noffered by the Keychain with application-level encryption. For example,\nrely upon the user to enter a passphrase to authenticate within the\napplication and use that passphrase to encrypt data before storing it\ninto the Keychain.</p>\n<pre><code>#define SALT_HASH @\"FvTivqTqZXsgLLx1v3P8TGRyVHaSOB1pvfm02wvGadj7RLHV8GrfxaZ84oGA8RsKdNRpxdAojXYg9iAj\"\n\n+ (NSString *)securedSHA256DigestHashForPIN:(NSUInteger)pinHash\n{\n    // 1\n    NSString *name = [[NSUserDefaults standardUserDefaults] stringForKey:USERNAME];\n    name = [name stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    // 2\n    NSString *computedHashString = [NSString stringWithFormat:@\"%@%i%@\", name, pinHash, SALT_HASH];\n    // 3\n    NSString *finalHash = [self computeSHA256DigestForString:computedHashString];\n    NSLog(@\" Computed hash: %@ for SHA256 Digest: %@\", computedHashString, finalHash);\n    return finalHash;\n}\nNSLog(@\"User entered PIN\");\nif ([textField.text length] &gt; 0) {\n    NSUInteger fieldHash = [textField.text hash];\n    // 4\n    NSString *fieldString = [KeychainWrapper securedSHA256DigestHashForPIN:fieldHash];\n    NSLog(@\" Password Hash - %@\", fieldString);\n    // Save PIN hash to the keychain (NEVER store the direct PIN)\n    if ([KeychainWrapper createKeychainValue:fieldString forIdentifier:PIN_SAVED]) {\n        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:PIN_SAVED];\n        [[NSUserDefaults standardUserDefaults] synchronize];\n        NSLog(@\" Key saved successfully to Keychain!!\");\n    }\n}\n</code></pre>","non-compliant":"<p>Not in compliance with OWASP Mobile Top 10 for M8 - Side Channel Data\nLeakage Example keychain implementation where the pincode is stored\ninsecurely:</p>\n<pre><code>NSLog(@\"User entered PIN\");\nif ([textField.text length] &gt; 0) {\n    NSUInteger fieldHash = [textField.text hash];\n\n    NSLog(@\" Password Is - %@\", fieldString);\n\n    // Save PIN  to the keychain (NEVER store the direct PIN)\n    if ([KeychainWrapper createKeychainValue:fieldString forIdentifier:PIN_SAVED]) {\n        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:PIN_SAVED];\n        [[NSUserDefaults standardUserDefaults] synchronize];\n        NSLog(@\" Key saved successfully to Keychain!!\");\n    }\n}\n</code></pre>","related-to":"<ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/security/Conceptual/keychainServConcepts/01introduction/introduction.html#//apple_ref/doc/uid/TP30000897\">Keychain Services Programming Guide</a></li>\n<li><a href=\"https://www.owasp.org/index.php/Mobile_Top_10_2014-M2\">M2 - Insecure Data Storage</a></li>\n<li><a href=\"https://www.owasp.org/index.php/Mobile_Top_10_2014-M5\">M5 - Poor Authorization and Authentication</a></li>\n</ul>","types":[3]},"relationships":{}},{"id":51,"type":"vulnerabilities","attributes":{"uuid":"0a6438d4-c837-4881-87f2-b5bbed7835b1","name":"Exposed Pasteboard Data","description":"<p>Exposing sensitive data like passwords in pasteboard/clipboard which can\nbe used by other applications</p>","question":"Does the application allow copy/paste functionalities in sensitive fields?","success-message":"The application has proper protection from general pasteboard.","business-implication":"<p>Failing to take proper precautions may result in loss of login\ncredentials, passwords and other sensitive data stored in the clipboard.</p>","intro":"<p>Both iOS and Android support copy/paste. Sensitive data may be stored,\nrecoverable, or could be modified from the clipboard in clear text,\nregardless of whether the source of the data was initially encrypted. If\nit is in plaintext at the moment the user copies it, it will be in\nplaintext when other applications access the clipboard.</p>","compliant":"<p>Use application specific pasteboard. Also mark fields like passwords as\nsecure so that their data can never be copied</p>\n<p>Pasteboards may be public or private. Public pasteboards are called\nsystem pasteboards; private pasteboards are created by apps, and hence\nare called app pasteboards. Pasteboards must have unique names.\nUIPasteboard defines two system pasteboards, each with its own name and\npurpose:</p>\n<ul>\n<li><code>UIPasteboardNameGeneral</code> is for cut, copy, and paste operations\n  involving a wide range of data types. You can obtain a singleton\n  object representing the General pasteboard by invoking the\n  generalPasteboard class method.</li>\n<li><code>UIPasteboardNameFind</code> is for search operations. The string currently\n  typed by the user in the search bar (<code>UISearchBar</code>) is written to this\n  pasteboard, and thus can be shared between apps. You can obtain an\n  object representing the Find pasteboard by calling the\n  pasteboardWithName:create: class method, passing in\n  UIPasteboardNameFind for the name.</li>\n</ul>\n<p>Typically you use one of the system-defined pasteboards, but if\nnecessary you can create your own app pasteboard using\npasteboardWithName:create: If you invoke pasteboardWithUniqueName,\nUIPasteboard gives you a uniquely-named app pasteboard. You can discover\nthe name of a pasteboard through its name property</p>\n<p>Clear the Pasteboard once the application enters background. You can do\nthis by adding the following line in the method</p>\n<p><code>- (void)applicationDidEnterBackground:(UIApplication \\*)</code> application in AppDelegate.</p>\n<p>If you are using a custom Pasteboard, replace <code>[UIPasteboard generalPasteboard]</code> with your custom pasteboard.</p>\n<pre><code>- (void)applicationDidEnterBackground:(UIApplication *)application\n{\n    // Use this method to release shared resources, save user data, invalidate\n    timers, and store enough application state information to restore your application\n    to its current state in case it is terminated later.\n\n    // If your application supports background execution, this method is called\n    instead of applicationWillTerminate: when the user quits.\n\n    [UIPasteboard generalPasteboard].items = nil;\n}\n</code></pre>","non-compliant":"<p>Not in compliance with OWASP Mobile Top 10 for M8 - Side Channel Data\nLeakage A general Pasteboard implementation looks like the following</p>\n<pre><code>// setup: let's put some stuff in the UIPasteboard\n\nlet pasteboard = UIPasteboard.general()\npasteboard.string = \"andy\"\npasteboard.url = URL(string: \"http://cleanswifter.com\")\npasteboard.image = UIImage()\npasteboard.color = UIColor.red()\n\n// understanding the UIPasteboard contents\n\nif pasteboard.hasStrings {\n    print(\"The pasteboard has Strings!\")\n}\nif pasteboard.hasURLs {\n    print(\"The pasteboard has URLs!\")\n}\nif pasteboard.hasImages {\n    print(\"The pasteboard has images!\")\n}\nif pasteboard.hasColors {\n    print(\"The pasteboard has colors!\")\n}\n</code></pre>","related-to":"<ul>\n<li><a href=\"https://jvn.jp/en/jp/JVN76662040/\">JVN#76662040</a> Clipboard\n  contents alteration vulnerability in Grani</li>\n<li><a href=\"http://jvn.jp/en/jp/JVN64764004/index.html\">JVN#64764004</a> Clipboard\n  contents alteration vulnerability in Sleipnir</li>\n</ul>","types":[3]},"relationships":{}},{"id":56,"type":"vulnerabilities","attributes":{"uuid":"b274d633-5065-4e3b-bb5c-5db1801cf857","name":"App Transport Security","description":"<p>App Transport Security (ATS), which is a networking security feature\nthat ensures network connections employ the most secure protocols and\nciphers, was found to be misconfigured.</p>","question":"Is App Transport Security (ATS) properly configured?","success-message":"App Transport Security (ATS) is properly configured.","business-implication":"<p>Misconfiguring App Transport Security (ATS) may lead to:</p>\n<ul>\n<li>Triggering App Store review and requiring justification</li>\n<li>Data getting accidentally leaked to malicious parties during transmission</li>\n<li>Loss of user trust</li>\n</ul>","intro":"<p>On Apple platforms, a networking security feature called App Transport\nSecurity (ATS) is available to apps and app extensions, and is enabled\nby default. It improves privacy and data integrity by ensuring your\napp's network connections employ only industry-standard protocols and\nciphers without known weaknesses. This helps instill user trust that\nyour app does not accidentally leak transmitted data to malicious\nparties.</p>\n<p>By configuring this key's value in your app's <code>Info.plist</code> file, you can\ncustomize the security of your network connections in a variety of ways.\nYou can:</p>\n<ul>\n<li>Allow insecure communication with particular servers</li>\n<li>Allow insecure loads for web views or for media, while maintaining ATS protections elsewhere in your app</li>\n<li>Enable new security features such as Certificate Transparency</li>\n</ul>","compliant":"<p>App Transport Security (ATS) is enabled by default for apps linked\nagainst the iOS 9.0 or later, as indicated by the default Boolean value\nof NO for the NSAllowsArbitraryLoads key. This key is at the root level\nof the NSAppTransportSecurity dictionary. With ATS enabled, HTTP\nconnections must use HTTPS. Attempts to connect using insecure HTTP\nfail. ATS employs the Transport Layer Security (TLS) protocol version\n1.2.</p>\n<p>The <code>NSAppTransportSecurity</code> key is available in both apps and app\nextensions. Starting in iOS 10.0 and later, the following subkeys are\nsupported:</p>\n<ul>\n<li><code>NSAllowsArbitraryLoadsInMedia</code></li>\n<li><code>NSAllowsArbitraryLoadsInWebContent</code></li>\n<li><code>NSRequiresCertificateTransparency</code></li>\n<li><code>NSAllowsLocalNetworking</code></li>\n</ul>\n<p>For detailed documentation on configuring ATS, please read <a href=\"https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW35\">Information Property List Key\nReference</a>.</p>","non-compliant":"","related-to":"<p>For background on secure Internet connections, please read <a href=\"https://developer.apple.com/library/content/technotes/tn2232/_index.html\">HTTPS Server Trust\nEvaluation</a>.</p>","types":[1]},"relationships":{}},{"id":66,"type":"vulnerabilities","attributes":{"uuid":"17a49201-3fbc-4757-917f-7f961f0cec53","name":"Buffer Overflow Vulnerabilities in HTTP Requests","description":"<p>One or more API requests may be vulnerable to Buffer overflow issues</p>","question":"Did buffer overflows occur in HTTP requests?","success-message":"Buffer overflow vulnerabilities were not detected in HTTP request.","business-implication":"<ul>\n<li>Buffer overflows generally lead to crashes. Other attacks leading to lack of\n  availability are possible, including putting the program into an infinite loop.</li>\n<li>Buffer overflows often can be used to execute arbitrary code, which is usually\n  outside the scope of a program’s implicit security policy.</li>\n<li>When the consequence is arbitrary code execution, this can often be used to\n  subvert any other security service.</li>\n</ul>","intro":"<p>A buffer overflow occurs when a program attempts to put more data in a buffer than\nit can hold or when a program attempts to put data in a memory area past a buffer.\nIn this case, a buffer is a sequential section of memory allocated to contain anything\nfrom a character string to an array of integers. Writing outside the bounds of a\nblock of allocated memory can corrupt data, crash the program, or cause the execution of malicious code.</p>\n<p>Attackers use buffer overflows to corrupt the execution stack of a web application.\nBy sending carefully crafted input to a web application, an attacker can cause the\nweb application to execute arbitrary code.</p>\n<p>Buffer overflow flaws can be present in both the web server or application server\nproducts that serve the static and dynamic aspects of the site, or the web application itself.</p>","compliant":"","non-compliant":"","related-to":"","types":[4]},"relationships":{}},{"id":21,"type":"vulnerabilities","attributes":{"uuid":"332a1a4a-b922-4e45-ba9f-32babaa74583","name":"Sensitive Information in Property Lists","description":"<p>Plist files contain data in plaintext format</p>","question":"Does the application store sensitive information in Property Lists (plist)?","success-message":"The application does not store sensitive information in Property Lists.","business-implication":"<p>An attacker can steal sensitive data if they have access to the device\nor device backup</p>","intro":"<p>Information Property List Files are the files that contain configuration\ninformation about the application executable. These files are stored in\nunencrypted form on the device &amp; hence, can be read by anyone by\naccessing the application sandbox via any third-party tools (up to iOS\nv8.2), by gaining root access to the device (after v8.2) or by taking an\niOS backup.</p>","compliant":"<p>It's recommended not to store any sensitive data such as usernames,\nauthentication tokens, passwords, personal information in any of the\nplist files of the application.</p>","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":57,"type":"vulnerabilities","attributes":{"uuid":"217f3203-2214-40f2-9484-d7db276e4d8a","name":"Insecure Hashing Algorithms","description":"<p>Using cryptographically insecure hash function algorithms may severely compromise\nthe integrity of data.</p>","question":"Are any insecure hash functions used?","success-message":"No insecure hash functions are used.","business-implication":"<p>Using salted MD5 for passwords is a bad idea. Not because of MD5's cryptographic\nweaknesses, but because it is fast. This means that an attacker can try billions\nof candidate passwords per second on a single GPU. (See <a href=\"https://www.sans.org/reading-room/whitepapers/authentication/dangers-weak-hashes-34412\">Dangers of Weak Hashes</a>)</p>\n<p>Using MD5 for file integrity may or may not be a practical problem, depending on\nthe exact usage scenario. The attacks against MD5 are collision attacks, not\npre-image attacks. This means an attacker can produce two files with the same\nhash, if they have control over both of them. But they can't match the hash of\nan existing file they didn't influence.</p>\n<p>Although SHA1 remains the world's widely used hashing algorithm, with Git and\nGnuPG relying on it for data integrity, it was recently\n<a href=\"https://shattered.io/static/shattered.pdf\">proven</a> to be susceptible to collision attacks.</p>","intro":"<p>The MD5 algorithm is commonly used hash function producing a 128-bit hash value.\nMD5 was designed to be used as a cryptographic hash function, but can be used as\na checksum to verify data integrity against unintentional corruption. However, MD5\ncan be reversed by a brute-force attack and suffers from extensive vulnerabilities.</p>","compliant":"<p><strong>For passwords</strong>, deliberately slow hash constructions, such as scrypt, bcrypt and\nPBKDF2 should be used. Simple salted SHA-2 is not good enough because, like most\ngeneral purpose hashes, it is fast. (<a href=\"https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords\">How to securely hash passwords</a>)</p>\n<p><strong>For file integrity</strong>, the current best solution is SHA-2 (SHA-256). Once SHA-3 gets\nstandardized it will be a good choice too.</p>","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":53,"type":"vulnerabilities","attributes":{"uuid":"4736bc9e-749c-490e-ae0c-31c75b0860c8","name":"Jailbreak Detection","description":"<p>Jailbroken devices may make it easier for attackers to break into the\napplication. Employing jailbreak detection and limiting functionality of\napplication on jailbroken devices is recommended.</p>","question":"Does the app implement any form of jailbreak detection?","success-message":"The app seems to implement routines that check if device has been jailbroken.","business-implication":"<p>Attackers can run tools like Cycript, GDB, Snoop-it etc. to perform\nruntime analysis and steal sensitive data from within applications. To\nadd an extra layer of security for your application, you should not\nallow your application to be run on a jailbroken device. Note that there\nare millions of jailbroken devices, so preventing your app from running\non a jailbroken device could lead to a limited userbase and/or bad App\nStore reviews. An alternative option is to block some features in your\napplication rather than disabling the functionality entirely.</p>","intro":"<p>Jailbreaking is the removing of software restrictions imposed by Apple.\nJailbreaking permits root access to the iOS file system and manager,\nallowing the download of additional applications and extensions that are\nunavailable through the official Apple App Store. Attackers often target\njailbroken iPhones on which malware can be installed more easily.</p>","compliant":"<p>Consider using jailbreak detection SDKs or libraries. Note that by\nnature, jailbroken devices may prevent these methods from being 100%\naccurate.</p>","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":62,"type":"vulnerabilities","attributes":{"uuid":"bd3b10cd-f77d-4d31-a11e-5b7746944c7d","name":"Insufficient Transport Layer Protection","description":"<p>Insufficient transport layer protection issues happen when the data is\nsent from the mobile app to the server over unsecure channels. Whether\nthe data is transmitted through the carrier network or through WiFi, it\nwill end up through the Internet either way before it could reach the\nremote server. There are several ways where unprotected data transmitted\nover the network could be sniffed; things like routers, proxies, cell\ntowers, are some of the few ways data could be sniffed while in transit.</p>","question":"Does the application use Transport Layer protection? Is HTTPS enabled globally in the application?","success-message":"Application has SSL enabled and sufficient protection is being used to prevent information leakage.","business-implication":"<p>The violation of a user's confidentiality may result in:</p>\n<ul>\n<li>Identity theft</li>\n<li>Fraud</li>\n<li>Reputational Damage</li>\n</ul>","intro":"<p>Insufficient transport layer protection issues happen when the data is\nsent from the mobile app to the server over unsecured channels. Whether\nthe data is transmitted through the carrier network or through WiFi, it\nwill end up through the Internet either way before it could reach the\nremote server. There are several ways where unprotected data transmitted\nover the network could be sniffed; things like routers, proxies, cell\ntowers, are some of the few ways data could be sniffed while in transit.</p>","compliant":"<p>When making network transmissions, all connections should strictly use TLS.</p>\n<p>Never use just an HTTP connection to upload/download data. Instead, create an HTTPS\nrequest to perform transmission.</p>","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":81,"type":"vulnerabilities","attributes":{"uuid":"f401126a-7fd0-434d-b20b-ff40b1ffe530","name":"PhoneGap Whitelist RegEx Bypass","description":"<p>If a regular expression is used within the whitelist, check if HTTPS can be\nbypassed with the regex.</p>","question":"Can the PhoneGap whitelist be bypassed with a special RegEx","success-message":"The app does not allow whitelist to be bypassed, or PhoneGap is not used.","business-implication":"<p>An attacker can bypass the whitelisting mechanism and initiate connections to\nunauthorized remote servers. This could aid in further attacks.</p>","intro":"<p>Domain whitelisting is a security model that controls access to external domains\nover which the app has no control. The default security policy allows access to\nany site. Before moving your application to production, you should formulate\na whitelist and allow access to specific network domains and subdomains.</p>","compliant":"","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":40,"type":"vulnerabilities","attributes":{"uuid":"aa939089-291f-4a62-b6e7-d97a74b251b2","name":"Unprotected Exported Service","description":"<p>The Android application exports Service for use by other applications,\nbut does not properly restrict which applications can launch the\ncomponent or access the data it contains.</p>","question":"Are any services insecurely exported?","success-message":"The application does not export any services insecurely.","business-implication":"<p>Attackers may use non-privileged services to intercept and track the\nuser's activity. Furthermore, it may be possible to insert data that may\nmaliciously modify the behaviour of the application.</p>","intro":"<p>Services run in the background and do not interact with the user.\nDownloading a file or decompressing an archive are examples of\noperations that may take place in a Service. Other components can bind\nto a Service, which lets the binder invoke methods that are declared in\nthe target Service's interface. Intents are used to start and bind to\nServices</p>\n<p>Exported Services can be called by any other application installed in\nthe phone to bind into the service leading to XAS (Cross Application\nScripting)</p>","compliant":"<p>If you are using a Service for sharing data between only your own apps,\nit is preferable to use the <code>android:protectionLevel</code> attribute set to\n\"signature\" protection. Signature permissions do not require user\nconfirmation, so they provide a better user experience and more\ncontrolled access to the Service when the apps accessing the data are\nsigned with the same key</p>\n<p>If the Service is called within itself, then don't export it or use\nIntent-Filter for custom permissions</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":52,"type":"vulnerabilities","attributes":{"uuid":"aecc24fe-31b5-409d-8eb1-e6081c41cce7","name":"Buffer Overflows and Underflows","description":"<p>Buffer overflows, both on the stack and on the heap, are a major source\nof security vulnerabilities in C, Objective-C, and C++ code.</p>","question":"Does the application have buffer overflow or underflow vulnerabilities?","success-message":"The application does not seem have buffer overflow or underflow vulnerabilities.","business-implication":"","intro":"<p>iOS has several mechanisms which prevent the application from being\ncompromised at runtime. In order to understand the security issues that\naffect iOS applications, it is important to understand and to known the\nsecurity features of the platform. The main <a href=\"http://www.apple.com/ipad/business/docs/iOS_Security_Feb14.pdf\">security features of iOS</a> are:</p>\n<ul>\n<li>Code signing: ensures that all applications come from a approved source (using\n  Apple-issued certificates)</li>\n<li>Generic exploit mitigations<ul>\n<li>Address Space Layout Randomization (ASLR): Usually compiled using <code>-fPIE -pie</code></li>\n<li>Non Executable Memory (ARM's Execute Never feature)</li>\n<li>Stack Smashing Protections (SSP): Usually compiled with <code>-fstack-protector-all</code> flag</li>\n</ul>\n</li>\n<li>Sandboxing<ul>\n<li>run applications as non-privileged user</li>\n<li>3rd-party apps are restricted in accessing files stored by other\n  apps</li>\n</ul>\n</li>\n<li>Memory Management<ul>\n<li>Automatic Reference Counting (ARC) protects applications\n  from memory corruption issues by letting the compiler do the\n  memory management stuff</li>\n</ul>\n</li>\n</ul>","compliant":"<p>Usually the ipa file will be decrypted at runtime by the kernel's mach\nloader. If the binary is encrypted or not is easily found using otool</p>\n<p>An example where the binary is encrypted:</p>\n<pre><code># otool -l OTHER_BINARY | grep -A 4 LC_ENCRYPTION_INFO\n       cmd LC_ENCRYPTION_INFO\n   cmdsize 20\n  cryptoff 16384\n cryptsize 10502144\n cryptid   1\n</code></pre>\n<ul>\n<li>ASLR<ul>\n<li>Usually the binary is compiled using the <code>PIE</code> flag</li>\n</ul>\n</li>\n<li>Stack Smashing Protection<ul>\n<li>iOS applications usually use <code>[stack canaries]()</code></li>\n<li>therefore you should find certain symbols inside the binary\n    (like <code>_stack_chk_guard</code> and <code>_stack_chk_fail</code>)</li>\n</ul>\n</li>\n<li>Automatic Reference Counting<ul>\n<li>this option can be enabled by activating the compiler option\n  <code>Objective-C Automatic Reference Counting</code></li>\n<li>binaries built with this option should include symbols called\n  <code>_objc_release</code>, <code>_obj_autorelease</code>, <code>_obj_storeStrong</code>,\n  <code>_obj_retain</code></li>\n</ul>\n</li>\n</ul>","non-compliant":"","related-to":"<ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/Security/Conceptual/SecureCodingGuide/Articles/BufferOverflows.html\">Avoiding Buffer Overflows and Underflows by\n  Apple</a></li>\n<li><a href=\"http://books.google.de/books?id=huy8AwAAQBAJ&amp;printsec=frontcover#v=onepage&amp;q&amp;f=false\">Hacking and Securing iOS\n  Applications</a></li>\n</ul>","types":[3]},"relationships":{}},{"id":36,"type":"vulnerabilities","attributes":{"uuid":"938e5e3b-bed3-4cb0-9dd9-9df905656474","name":"PhoneGap Whitelisted URLs","description":"<p>While using PhoneGap to develop application, always try to whitelist the\nURL via which it connects</p>","question":"Does the PhoneGap application properly whitelist URLs","success-message":"Application has proper whitelisted URLs, or does not use PhoneGap.","business-implication":"<p>Without Domain Whitelisting, an attacker can load any domain in an\niframe and any script on that page within the iframe can directly access\nCordova JavaScript objects and the corresponding native Java objects.</p>","intro":"<p>Domain whitelisting is a security model that controls access to external\ndomains over which your application has no control. Cordova provides a\nconfigurable security policy to define which external sites may be\naccessed. By default, new apps are configured to allow access to any\nsite. Before moving your application to production, you should formulate\na whitelist and allow access to specific network domains and subdomains.</p>","compliant":"<p>Cordova adheres to the W3C Widget Access specification, which relies on\nthe <code>&lt;access&gt;</code> element within the app's <code>config.xml</code> file to enable\nnetwork access to specific domains. For projects that rely on the CLI\nworkflow described in The Command-Line Interface, this file is located\nin the project's top-level directory. Otherwise for platform-specific\ndevelopment paths, locations are listed in the sections below:</p>\n<p>The following examples demonstrate whitelist syntax:</p>\n<p>Access to google.com:</p>\n<pre><code>&lt;access origin=\"http://google.com\" /&gt;\n</code></pre>\n<p>Access to the secure google.com:</p>\n<pre><code>&lt;access origin=\"https://google.com\" /&gt;\n</code></pre>\n<p>Access to the subdomain maps.google.com:</p>\n<pre><code>&lt;access origin=\"http://maps.google.com\" /&gt;\n</code></pre>\n<p>Access to all the subdomains on google.com, for example, mail.google.com and docs.google.com:</p>\n<pre><code>&lt;access origin=\"http://*.google.com\" /&gt;\n</code></pre>\n<p>Access to all domains, for example, google.com and developer.mozilla.org:</p>\n<pre><code>&lt;access origin=\"*\" /&gt;\n</code></pre>\n<p>This is the default value for newly created CLI projects which not secured.</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":85,"type":"vulnerabilities","attributes":{"uuid":"b3927e7a-3013-43c4-a5b9-5013fc73e1e5","name":"Android Fragment Injection","description":"<p>With this vulnerability the attacker will be able to call non exported\nActivities or fragments inside the target application.</p>","question":"Is your application vulnerable to Fragment Injection?","success-message":"Application is not vulnerable to Fragment Injection","business-implication":"<p>In the event that a user (anonymous or verified) is able to execute\nover-privileged functionality, the business may experience:</p>\n<ul>\n<li>Reputational Damage</li>\n<li>Fraud</li>\n<li>Information Theft</li>\n</ul>","intro":"<p>Android SDK offers a way for developers to present a\n<a href=\"https://developer.android.com/reference/android/preference/PreferenceActivity.html\"><code>Preferences activity</code></a>.\nto users, allowing them to extend this abstract class and adapt it to their needs.</p>\n<p>This abstract class will parse the extra data fields received on a Intent,\nin particular the\n<code>PreferenceActivity.EXTRA_SHOW_FRAGMENT(:android:show_fragment)</code> and\n<code>PreferenceActivity.EXTRA_SHOW_FRAGMENT_ARGUMENTS(:android:show_fragment_arguments)</code></p>\n<p>It is expected that the first field contains the <code>Fragment</code>\nclass name and the second one contains the input bundle passed\nto the <code>Fragment</code>.</p>\n<p>Due to the fact that the <code>PreferenceActivity</code> uses reflection to\nload the fragment, this can lead to load an arbitrary class inside the\npackage or the Android SDK. The loaded class runs in the context of the\napplication that exports this activity.</p>","compliant":"<p>To mitigate this vulnerability, a new method called <code>isValidFragment</code> was\nadded in Android 4.4 KitKat (API Level 19), that allows developers to override\nit and define which fragments are allowed to be used in this context.</p>","non-compliant":"<ul>\n<li>Determine the minSDKVersion and maxSDKVersion to determine what will be the behaviour of the class.</li>\n<li>Find exported Activities that extends the <code>PreferenceActivity</code> class.</li>\n</ul>\n<p>The following example shows a Activity that extends this activity :</p>\n<pre><code>public class MyPreferences extends PreferenceActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n</code></pre>","related-to":"","types":[1]},"relationships":{}},{"id":100,"type":"vulnerabilities","attributes":{"uuid":"82dc942a-8391-444f-9134-f4c94d556a02","name":"Improper Session Management","description":"<p>If the application does not manage sessions securely, an attacker may be able to remotely compromise accounts, reuse the tokens to make unauthorised API calls on behalf of other users.</p>","question":"Does the application uses proper Session Management?","success-message":"The application does uses proper Session Management","business-implication":"","intro":"<p>Once the user successfully logs in to the application with credentials, access tokens are generated by the server and assigned to the user. Thereafter, access tokens are used to identify the users and maintain the session until they logout. It is critical to generate, assign, invalidate access tokens securely since they provide a way to authenticate and authorize to the server resources post login. Failing to do so may result in loss of confidentiality and integrity.</p>","compliant":"<p>The application server should generate access tokens which are cryptographically strong, dynamic and expires as soon as the user logs off or is inactive for a particular amount of time</p>","non-compliant":"<p>1) The application generates an access token based on the username, ID or cryptographically insecure algorithm which can be easily enumerated.</p>\n<pre><code>POST /api/sessions HTTP/1.1\nHost: site.com\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\nAccept-Language: en-us\nAccess-Token: testuser\nConnection: close\nAccept: */*\nUser-Agent: Chrome/5.5.1 (iPhone/10.0.2; iPhone OS; en_IN;)\nContent-Length: 40\n\nPOST /api/sessions HTTP/1.1\nHost: site.com\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\nAccept-Language: en-us\nAccess-Token: 560192\nConnection: close\nAccept: */*\nUser-Agent: Chrome/5.5.1 (iPhone/10.0.2; iPhone OS; en_IN;)\nContent-Length: 40\n\nPOST /api/sessions HTTP/1.1\nHost: site.com\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\nAccept-Language: en-us\nAccess-Token: 5d9c68c6c50ed3d02a2fcf54f63993b6\nConnection: close\nAccept: */*\nUser-Agent: Chrome/5.5.1 (iPhone/10.0.2; iPhone OS; en_IN;)\nContent-Length: 40\n</code></pre>\n<p>2) The application does not invalidate the session token at the backend. So, even after the use logs out, it is possible to make successful requests using the expired token to access the resources of the user.</p>\n<p>3) In case of critical functionalities, the application should reject if the requests are replayed. For example, if a request is made to the server to recharge or pay the amount, on repeating the same request, the server should reject the replayed request.</p>\n<p>4) Session tokens does not have an expiry and they are valid for an indefinite time.</p>","related-to":"","types":[3]},"relationships":{}},{"id":28,"type":"vulnerabilities","attributes":{"uuid":"165646ab-f5b4-4c0f-8b7f-b26575ba74ae","name":"Deprecated NSURLConnection","description":"<p><code>NSURLConnection</code> is the most common API used for establishing network\nconnections with the server. However, it has been replaced by\n<code>NSURLSession</code> &amp; deprecated by Apple starting iOS 9.0</p>","question":"Does this application use NSURLConnection?","success-message":"This application does not use NSURLConnection to connect over Internet.","business-implication":"<p>Using deprecated routines may potentially result in:</p>\n<ul>\n<li>Programming errors due to fatal flaws in deprecated methods.</li>\n<li>Data corruption due to unsafe deprecated methods.</li>\n</ul>","intro":"<p><code>NSURLConnection</code> is the most common API used for establishing network\nconnections with the server. However, it has been replaced by\n<code>NSURLSession</code> &amp; deprecated by Apple starting iOS 9.0. <code>NSURLSession</code>\nprovides support for configuring per-session cache, protocol, cookie,\nand credential policies, rather than sharing them across the app which\nhandles authentication challenge in a more appropriate way.</p>","compliant":"<p>It is advisable to use <code>NSURLSession</code> for all types of network connections\ninstead of <code>NSURLConnection</code> because Apple can stop supporting\n<code>NSURLConnection</code> anytime in near future.</p>\n<p><code>NSURLSession</code> is the key object responsible for sending and receiving\nHTTP requests. It can be created via <code>NSURLSessionConfiguration</code>, which\ncomes in three flavors:</p>\n<p><code>defaultSessionConfiguration</code>: Creates a default configuration object\nthat uses the disk-persisted global cache, credential and cookie storage\nobjects.</p>\n<p><code>ephemeralSessionConfiguration</code>: Similar to the default configuration,\nexcept that all session-related data is stored in memory. Think of this\nas a \"private\" session.</p>\n<p><code>backgroundSessionConfiguration</code>: Lets the session perform upload or\ndownload tasks in the background. Transfers continue even when the app\nitself is suspended or terminated.</p>\n<p>NSURLSessionConfiguration also lets you configure session properties\nsuch as timeout values, caching policies and additional HTTP headers.\nRefer to the documentation for a full list of configuration options.</p>\n<pre><code>/* Sent when a download task that has completed a download.  The delegate should\n * copy or move the file at the given location to a new location as it will be\n * removed when the delegate message returns. URLSession:task:didCompleteWithError: will\n * still be called.\n */\n- (void)URLSession:(NSURLSession *)session downloadTask:(NSURLSessionDownloadTask *)downloadTask\n                              didFinishDownloadingToURL:(NSURL *)location;\n\n/* Sent periodically to notify the delegate of download progress. */\n- (void)URLSession:(NSURLSession *)session downloadTask:(NSURLSessionDownloadTask *)downloadTask\n                                           didWriteData:(int64_t)bytesWritten\n                                      totalBytesWritten:(int64_t)totalBytesWritten\n                              totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;\n\n/* Sent when a download has been resumed. If a download failed with an\n * error, the -userInfo dictionary of the error will contain an\n * NSURLSessionDownloadTaskResumeData key, whose value is the resume\n * data.\n */\n- (void)URLSession:(NSURLSession *)session downloadTask:(NSURLSessionDownloadTask *)downloadTask\n                                      didResumeAtOffset:(int64_t)fileOffset\n                                     expectedTotalBytes:(int64_t)expectedTotalBytes;\n</code></pre>","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":60,"type":"vulnerabilities","attributes":{"uuid":"096f151b-a014-4a37-87a2-18910082644b","name":"Insecure Direct Object Reference","description":"<p>To test for this vulnerability, all locations in the application need to be mapped where user input is used to reference objects directly.\nFor example, locations where user input is used to access a database row, a file or even an application page.\nNext, the value of the parameter used to reference objects is modified and assessed whether it is possible to\nretrieve objects belonging to other users or otherwise bypass authorisation.</p>","question":"Do Insecure Direct Object References exist within the app?","success-message":"No occurrences of Insecure Direct Object References were found.","business-implication":"","intro":"<p>Insecure Direct Object References occur when an application provides direct access to objects based on user-supplied input.\nAs a result of this vulnerability, attackers can bypass authorisation and access resources in the system directly, by modifying\nthe value of a parameter used to point to an object. Such resources can be database entries belonging to other users, files in the system, or others.\nThis is caused by the fact that the application takes user supplied input and uses it to retrieve an object without performing sufficient authorisation checks.</p>","compliant":"","non-compliant":"","related-to":"","types":[3]},"relationships":{}},{"id":19,"type":"vulnerabilities","attributes":{"uuid":"ddc74305-9d67-497f-8873-6f252a1dc237","name":"Business Logic","description":"<p>Logical Flaws through API which can bypass Authorization and get\ninformation about other users. Authorization and\nauthenticated sessions were not properly validated on both client or\nserver side</p>","question":"Were flaws found in the business logic?","success-message":"No flaws were found in the business logic.","business-implication":"","intro":"<p>Most security problems are weaknesses in an application that result from\na broken or missing security control (authentication, access control,\ninput validation, etc.). By contrast, business logic vulnerabilities are\nways of using the legitimate processing flow of an application in a way\nthat results in a negative consequence to the organization.</p>\n<p>Too often, the business logic category is used for vulnerabilities that\ncan't be scanned for automatically. This makes it very difficult to\napply any kind of categorization scheme. Business logic problems are\ndifferent from authentication problems and every other category. There\nare many significant business logic vulnerabilities, but they are far\nless common than the type of items.</p>","compliant":"","non-compliant":"","related-to":"","types":[3]},"relationships":{}},{"id":11,"type":"vulnerabilities","attributes":{"uuid":"dbf558b2-1905-4bb8-a3a5-95ee6df367b9","name":"JavascriptInterface Remote Code Execution","description":"<p>Application seems to use <code>JavascriptInterface</code>. An attacker can use it to\ndo a Remote Code Execution on your application and steal sensitive\ninformation.</p>","question":"Is the application using JavascriptInterface? Does the application communicate over non-SSL or broken SSL Implementation?","success-message":"Application is safe from remote code execution through JavascriptInterface.","business-implication":"<p>The app may be susceptible to JavaScript scripting attacks from\nuser-supplied content or content from HTTP causing loss of sensitive\ninformation.</p>","intro":"<p>For API level JELLY_BEAN or below, allowing an app to use the\naddJavascriptInterface method with untrusted content in a WebView leaves\nthe app vulnerable to scripting attacks using reflection to access\npublic methods from JavaScript. Untrusted content examples include\ncontent from any HTTP URL (as opposed to HTTPS) and user-provided\ncontent. The method <code>addJavascriptInterface(Object, String)</code> is called\nfrom the <code>android.webkit.WebView</code> class. Sensitive data and app control\nshould not be exposed to scripting attacks.</p>","compliant":"<ul>\n<li>\n<p>Compliant code could refrain from calling the addJavascriptInterface() method.</p>\n<pre><code>WebView webView = new WebView(this);\nsetContentView(webView);\n</code></pre>\n</li>\n<li>\n<p>Another compliant solution is to specify in the app's manifest that\n    the app is only for API levels JELLY_BEAN_MR1 and above. For these\n    API levels, only public methods that are annotated with\n    JavascriptInterface can be accessed from JavaScript. API level 17\n    is JELLY_BEAN_MR1.</p>\n<pre><code>&lt;manifest&gt;\n    &lt;uses-sdk android:minSdkVersion=\"17\" /&gt;\n    ...\n&lt;/manifest&gt;\n</code></pre>\n</li>\n</ul>","non-compliant":"<p>This non-compliant code example shows an application that calls the\n<code>addJavascriptInterface()</code> method, and hence is not secure for API level\nJELLY_BEAN and lower.</p>\n<pre><code>WebView webView = new WebView(this);\nsetContentView(webView);...\nclass JsObject {\n    private String sensitiveInformation;\n    ...\n    public String toString() {\n        return sensitiveInformation;\n    }\n}\nwebView.addJavascriptInterface(new JsObject(), \"injectedObject\");\nwebView.loadData(\"\", \"text/html\", null);\nwebView.loadUrl(\"http://www.example.com\");\n</code></pre>\n<p>JavaScript can now control the host. Java reflection could be used to\naccess any of the public methods of an injected object, using the\npermissions of the app.</p>","related-to":"","types":[1]},"relationships":{}},{"id":32,"type":"vulnerabilities","attributes":{"uuid":"34e59bc7-f8f3-4e3d-ac6f-237d69372b1a","name":"PhoneGap HTTPS Bypass Vulnerability","description":"<p>Deprecated Android PhoneGap application is affected with CVE-3501 via\nwhich attackers can downgrade HTTPS connection to HTTP</p>","question":"Is the application using deprecated version of PhonGap which is susceptible to HTTPS Bypass?","success-message":"The application does not use a vulnerable version of PhoneGap, or is not using PhoneGap.","business-implication":"<p>The attacker can open a WebSocket connection from the application\nJavaScript which will connect to any remote server bypassing the HTTP\nwhitelist.</p>","intro":"<p>Android applications built with the Cordova framework use a WebView\ncomponent to display content. Cordova applications can specify a\nwhitelist of URLs which the application will be allowed to display, or\nto communicate with via XMLHttpRequest. This whitelist, however, is not\nused by the WebView component when it is directed via JavaScript to\ncommunicate over non-http channels.</p>\n<p>Specifically, it can be possible to open a WebSocket connection from the\napplication JavaScript which will connect to any reachable server on the\nInternet. If an attacker is able to execute arbitrary JavaScript within\nthe application, then that attacker can cause a connection to be opened\nto any server, bypassing the HTTP whitelist.</p>\n<p>This is a limitation of the hybrid app architecture on Android in\ngeneral, and not specific to Apache Cordova.</p>","compliant":"<p>Upgrade Phonegap or Apache Cordova to the latest version.</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":49,"type":"vulnerabilities","attributes":{"uuid":"2f393ffb-53f1-4e27-9db5-8fa43acb3f50","name":"Insecure Peer Connections","description":"<p>MultiPeer Connectivity Framework is used for establishing connection\nwith the devices in close proximity</p>","question":"Does the application securely communicate with other devices over MultiPeer Framework?","success-message":"The application uses MultiPeer Framework properly, or MultiPeer Framework is not being used.","business-implication":"<p>Failing to use encrypted channels may undermine the confidentiality of\nthe transmitted data.</p>","intro":"<p>Multi-peer Connectivity Framework makes the task of exchanging data or\nother resources with the nearby devices easy. The framework provides a\nprovision where the connection with the peers can be created in an\nencrypted manner. Applications should enable the encryption feature\nwhile exchanging data with the peers which ensures the confidentiality\nof data.</p>","compliant":"<p>While establishing a connection with the peer always initialize the\nsession with encryption preference set as <code>MCEncryptionRequired</code> to\nensure that complete data is shared on an encrypted channel.</p>","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":76,"type":"vulnerabilities","attributes":{"uuid":"0a220cc5-d4a6-4d52-8af0-882758e11d39","name":"CORS Wild Character Vulnerabilities in HTTP Headers","description":"<p>One or more API requests were found to have CORS wild character vulnerability within in HTTP headers</p>","question":"Are there CORS wild character vulnerabilities in HTTP header?","success-message":"No CORS wild character vulnerabilities were found in HTTP headers.","business-implication":"","intro":"<p>Cross Origin Resource Sharing (CORS) is a specification that allows cross domain\ncommunication in a web browser. It works by defining new HTTP headers that describe\nthe origins that are allowed cross domain information transmission, thus allowing\nrestricted resources (e.g. fonts) on a web page to be requested from another\ndomain outside the domain from which the first resource was served.</p>\n<p><code>Access-Control-Allow-Origin</code> header should be never set to <code>*</code> especially if the resource\ncontains sensitive information. It should be set to allow requests only from the\ndomains that are trusted.</p>","compliant":"","non-compliant":"","related-to":"","types":[4]},"relationships":{}},{"id":35,"type":"vulnerabilities","attributes":{"uuid":"2a637393-d962-4ac4-97d0-09709d68409b","name":"PhoneGap Debug Logging","description":"<p>While using PhoneGap to develop application, always stop debugging logs\nvia PhoneGap</p>","question":"Are PhoneGap application debug logs enabled?","success-message":"PhoneGap debug logs are not enabled, or PhoneGap is not being used.","business-implication":"<p>An attacker can attach a debugger and change the logical flow of the\napplication. Additionally, sensitive logs can get leaked which can be\nused to determine the URL endpoints of the application.</p>","intro":"<p>Once a PhoneGap app gets shipped with debug mode switched \"on\" then\nanyone can attach a debugger and change the logical flow of the\napplication. Also, sensitive logs get leaked which can be used to\ndetermine the URL endpoints of the application.</p>","compliant":"<p>If using Cordova, please publish the plugin using</p>\n<pre><code>cordova build android --release\n</code></pre>\n<p>If using PhoneGap, please turn of all console.logs() and other logging\ncodes before publishing</p>\n<p>Also, Loglevel should be set to \"<strong>INFO</strong>\" in \"<em>config.xml</em>\"</p>\n<p><code>&lt;preference name=\"loglevel\" value=\"INFO\" /&gt;</code></p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":61,"type":"vulnerabilities","attributes":{"uuid":"60a99c6c-9b7e-4200-8a15-adec9f544d87","name":"Insecure Direct Object Reference","description":"<p>To test for this vulnerability, all locations in the application need to be mapped where user input is used to reference objects directly.\nFor example, locations where user input is used to access a database row, a file or even an application page.\nNext, the value of the parameter used to reference objects is modified and assessed whether it is possible to\nretrieve objects belonging to other users or otherwise bypass authorisation.</p>","question":"Do Insecure Direct Object References exist within the app?","success-message":"No occurrences of Insecure Direct Object References were found.","business-implication":"","intro":"<p>Insecure Direct Object References occur when an application provides direct access to objects based on user-supplied input.\nAs a result of this vulnerability, attackers can bypass authorisation and access resources in the system directly, by modifying\nthe value of a parameter used to point to an object. Such resources can be database entries belonging to other users, files in the system, or others.\nThis is caused by the fact that the application takes user supplied input and uses it to retrieve an object without performing sufficient authorisation checks.</p>","compliant":"","non-compliant":"","related-to":"","types":[3]},"relationships":{}},{"id":91,"type":"vulnerabilities","attributes":{"uuid":"057ca152-f13c-47de-a3ac-950c66ee8eea","name":"iOS Binary having ASLR Protection","description":"<p>Buffer overflows, both on the stack and on the heap, are a major source\nof security vulnerabilities in C, Objective-C, and C++ code.</p>","question":"Does the application have ASLR Protection?","success-message":"The application does seem to have ASLR Protection.","business-implication":"","intro":"<p>iOS has several mechanisms which prevent the application from being\ncompromised at runtime. In order to understand the security issues that\naffect iOS applications, it is important to understand and to known the\nsecurity features of the platform.</p>\n<ul>\n<li>Code signing: ensures that all applications come from a approved source (using\n  Apple-issued certificates)</li>\n<li>Address Space Layout Randomization (ASLR): Usually compiled using <code>-fPIE -pie</code></li>\n</ul>","compliant":"<p>Usually the binary is compiled using the <code>PIE</code> flag by using <code>-fPIE -pie</code>\n during compilation time</p>","non-compliant":"","related-to":"<ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/Security/Conceptual/SecureCodingGuide/Articles/BufferOverflows.html\">Avoiding Buffer Overflows and Underflows by\n  Apple</a></li>\n<li><a href=\"http://books.google.de/books?id=huy8AwAAQBAJ&amp;printsec=frontcover#v=onepage&amp;q&amp;f=false\">Hacking and Securing iOS\n  Applications</a></li>\n</ul>","types":[1]},"relationships":{}},{"id":17,"type":"vulnerabilities","attributes":{"uuid":"9da5891c-9155-4a97-b703-a7284a0abc78","name":"Application Logs","description":"<p>Application was found to be writing logs to the system logs</p>","question":"Is this application leaking data through logs?","success-message":"No application logs were found.","business-implication":"<p>Sensitive data can inadvertently leak into the logs and may aid in\nfurther attacks</p>","intro":"<p>Android provides capabilities for an app to output logging information\nand obtain log output. Applications can send information to log output\nusing the android.util.Log class. To obtain log output, applications can\nexecute the logcat command.</p>","compliant":"<p>Never use logs in production. Find all <code>Log.d()</code> and remove them.</p>\n<p>Use exception parsers and crash-based-analytics tool capture crashes in\nproduction so that it can be debugged</p>","non-compliant":"<p>Facebook SDK for Android contained the following code which sends Facebook access tokens to log output in plain text format.</p>\n<pre><code>Log.d(\"Facebook-authorize\", \"Login Success! access_token=\" + getAccessToken() + \" expires=\" + getAccessExpires());\n</code></pre>\n<p>Here is another example. A weather report for Android sent a user's location data to the log output as follows:</p>\n<pre><code>I/MyWeatherReport( 6483): Re-use MyWeatherReport data\nI/ ( 6483): GET JSON:\nhttp://example.com/smart/repo_piece.cgi?arc=0&amp;lat=26.209026&amp;lon=127.650803&amp;rad=50&amp;dir=-999&amp;lim=52&amp;category=1000\n</code></pre>\n<p>If a user is using Android OS 4.0 or before, other applications with READ_LOGS\npermission can obtain the user's location information without declaring\nACCESS_FINE_LOCATION permission in the manifest file.</p>","related-to":"<ul>\n<li><a href=\"http://readwrite.com/2012/04/10/what-developers-and-users-can#awesm=~o9iqZAMlUPshPu\">Facebook SDK for Android</a></li>\n<li><a href=\"https://jvn.jp/en/jp/JVN23328321/\">JVN#23328321</a> Puella Magi\n  Madoka Magica iP for Android vulnerable to information disclosure</li>\n<li><a href=\"https://jvn.jp/en/jp/JVN86040029/\">JVN#86040029</a> Weathernews Touch\n  for Android stores location information in the system log file</li>\n<li><a href=\"https://jvn.jp/en/jp/JVN33159152/\">JVN#33159152</a> Loctouch for\n  Android information management vulnerability</li>\n<li><a href=\"https://jvn.jp/en/jp/JVN56923652/\">JVN#56923652</a> Monaca Debugger\n  for Android information management vulnerability</li>\n</ul>","types":[1,2]},"relationships":{}},{"id":43,"type":"vulnerabilities","attributes":{"uuid":"25d8a450-74ce-4f0d-828c-64c4f33be3cd","name":"Non-signature Protected Exported Receivers","description":"<p>The Android application exports Broadcast Receiver for use by other\napplications, but does not properly restrict which applications can\nlaunch the component or access the data it containscustom signature\ndefined by <code>android:protectionLevel</code>.</p>","question":"Are any Broadcast Receivers exported without a ProtectionLevel?","success-message":"The application does not export any Broadcast Receivers without a ProtectionLevel.","business-implication":"<p>Attackers may use non-privileged services to intercept and track the\nuser's activity. Furthermore, it may be possible to insert data that may\nmaliciously modify the behaviour of the application.</p>","intro":"<p>Broadcast Receivers receive Intents sent to multiple applications.\nReceivers are triggered by the receipt of an appropriate Intent and then\nrun in the background to handle the event. Receivers are typically\nshort-lived; they often relay messages to Activities or Services. There\nare three types of broadcast Intents: normal, sticky, and ordered.\nNormal broadcasts are sent to all registered Receivers at once, and then\nthey disappear. Ordered broadcasts are delivered to one Receiver at a\ntime; also, any Receiver in the delivery chain of an ordered broadcast\ncan stop its propagation. Broadcast Receivers have the ability to set\ntheir priority level for receiving ordered broadcasts. Sticky broadcasts\nremain accessible after they have been delivered and are re-broadcast to\nfuture Receivers.</p>\n<p>Exported Unprotected Broadcast Receiver can be called by any other\nmalicious application installed in the phone to invoke the Broadcast\nReceiver leading to XAS (Cross Application Scripting)</p>","compliant":"<p>If you are using a Broadcast Receiver for sharing data between only your\nown apps, it is preferable to use the <code>android:protectionLevel</code> attribute\nset to \"signature\" protection. Signature permissions do not require user\nconfirmation, so they provide a better user experience and more\ncontrolled access to the Broadcast Receiver when the apps accessing the\ndata are signed with the same key</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":55,"type":"vulnerabilities","attributes":{"uuid":"3e69d275-397b-4632-a201-9d8b704c669d","name":"WebView Exploits","description":"<p>WebView can be susceptible to various exploits including client side\nJavascript injection and network sniffing if improperly implemented.</p>","question":"Are there instances of WebView used insecurely in the app?","success-message":"WebViews, if any, are properly implemented.","business-implication":"<p>An improperly implemented WebView instance may be vulnerable to XSS can\nbe used to gain access to shared preference files using <code>file:///</code>. When\nJavascript is enabled, it may allow adversaries to perform XSS attacks.\nFurthermore, not loading WebView over HTTPS may allow attackers to sniff\ndata from network transmissions and perform Man-in-the-Middle attack by\ninjecting arbitrary JavaScript into the WebView.</p>","intro":"<p>Android API offers WebView to deliver a web application (or just a web\npage) as a part of a client app. A common scenario in which using\nWebView is helpful is when you want to provide information in your\napplication that you might need to update, such as an end-user agreement\nor a user guide. Another scenario is if your application provides data\nto the user that always requires an Internet connection to retrieve\ndata, such as email. In this case, you might find that it's easier to\nbuild a WebView in your Android application that shows a web page with\nall the user data, rather than performing a network request, then\nparsing the data and rendering it in an Android layout.</p>","compliant":"<p>When using WebView, ensure the following:</p>\n<ul>\n<li>Use WebView to load only trusted content</li>\n<li>Always load resources over HTTPS</li>\n<li>Avoid using Javascript within WebView. If Javascript is absolutely\n  required, be sure that each context is escaped properly by using an\n  XSS filter component such as the OWASP Java Encoder Project</li>\n<li>Accept only plain-text user input and sanitize it before displaying\n  in WebView</li>\n</ul>","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":88,"type":"vulnerabilities","attributes":{"uuid":"624c4e2b-79d0-48e0-8fb6-e5469238d9c1","name":"Insecure Broadcast Receivers registered dynamically","description":"<p>Broadcast Receivers which are set Dynamically and are not protected</p>","question":"Does the Android Application registers Broadcast Receivers dynamically?","success-message":"There is no insecure Dynamically registered Broadcast Receiver","business-implication":"","intro":"<p>A BroadcastReceiver represents one main component of an essential\npublish/subscribe messaging platform in Android. It, known as a subscriber,\ncan be used to receive and respond to specific messages (or broadcasts) from\nthe system or other components in the same application or different\napplications, such as notifying Android users when cellphone power is low as\na system event-driven. This is generally achieved through the utilization of\nintent filters defined in the app manifest file.</p>\n<p>The dynamically Broadcastreceiver is in the java source code to realize the\nbroadcast mechanism using onReceive(). This mechanism is managed by the Activity\nManager Service (AMS) on the second framework layer in the Android architecture.</p>","compliant":"<p>To protect broadcast, it needs to be registered with permissions when it\nis declare.</p>\n<p>Secondly never trust the data that is being sent with it.\nIt's passing through a trust zone to arrive in the app,\nso it needs to be validated</p>","non-compliant":"<p>If the broadcast filter is listening for an intent that isn't a restricted\nbroadcast then the malicious app can start sending them without needing any\npermissions.</p>\n<p>Secondly if the receiver goes on to use the extras sent with the broadcast,\nor to start running other functions, then the malware has a whole new entry\npoint to yTheour application.</p>","related-to":"","types":[1]},"relationships":{}},{"id":71,"type":"vulnerabilities","attributes":{"uuid":"56096882-e0af-40f3-bddb-f495e0975de9","name":"Regex DoS Vulnerabilities in HTTP Requests","description":"<p>Instances of Regex DoS vulnerabilities were found in API requests</p>","question":"Are there Regex DoS vulnerabilities in HTTP requests?","success-message":"No Regex DoS vulnerabilities were found in HTTP request.","business-implication":"","intro":"<p>The Regular Expression Denial of Service (ReDoS) is a Denial of Service attack,\nthat exploits the fact that most Regular Expression implementations may reach\nextreme situations that cause them to work very slowly (exponentially related\nto input size). An attacker can then cause a program using a regular expression\nto enter these extreme situations and then hang for a very long time.</p>","compliant":"","non-compliant":"","related-to":"","types":[4]},"relationships":{}},{"id":75,"type":"vulnerabilities","attributes":{"uuid":"814769ab-f2f0-43f5-acf9-a3a002dca895","name":"Cross-site-scripting Vulnerabilities in HTTP Body","description":"<p>One or more API calls were found to be vulnerable to Cross-Site Scripting (XSS) attacks</p>","question":"Are there cross-site-scripting vulnerabilities in HTTP body?","success-message":"No Cross-site-scripting vulnerabilities were found in HTTP body.","business-implication":"","intro":"<p>Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious\nscripts are injected into otherwise benign and trusted web sites. XSS attacks\noccur when an attacker uses a web application to send malicious code, generally\nin the form of a browser side script, to a different end user. Flaws that allow\nthese attacks to succeed are quite widespread and occur anywhere a web application\nuses input from a user within the output it generates without validating or encoding it.</p>\n<p>An attacker can use XSS to send a malicious script to an unsuspecting user. The\nend user's browser has no way to know that the script should not be trusted,\nand will execute the script. Because it thinks the script came from a trusted\nsource, the malicious script can access any cookies, session tokens, or other\nsensitive information retained by the browser and used with that site.\nThese scripts can even rewrite the content of the HTML page.</p>\n<p>The impace of XSS attacks may range from a petty nuisance to a significant\nsecurity risk, depending on the sensitivity of the data handled by the\nvulnerable site and the nature of any security mitigation implemented by the\nsite's owner.</p>","compliant":"","non-compliant":"","related-to":"","types":[4]},"relationships":{}},{"id":73,"type":"vulnerabilities","attributes":{"uuid":"04ddc100-7bce-4c21-8278-f7bd0d1a82c7","name":"String Validation Vulnerabilities in HTTP Requests","description":"<p>Our scanner found string validation vulnerabilities in one or more HTTP requests</p>","question":"Are there string validation vulnerabilities in HTTP request?","success-message":"No string validation vulnerabilities were found in HTTP requests.","business-implication":"","intro":"<p>Failure to properly validate input from the client or environment is the most\ncommon web application security weakness. This leads to almost all of the major\nvulnerabilities in applications, such as Interpreter Injection, locale/Unicode attacks,\nfile system attacks and buffer overflows. Data from the client should never be\ntrusted for the client has every possibility to tamper with the data.</p>","compliant":"","non-compliant":"","related-to":"","types":[4]},"relationships":{}},{"id":68,"type":"vulnerabilities","attributes":{"uuid":"95acd1f8-1e34-47e4-b730-f2497e7cda96","name":"Integer Overflow Vulnerabilities in HTTP Requests","description":"<p>The API may be vulnerable to integer overflow issues</p>","question":"Are there integer overflow vulnerabilities in HTTP request?","success-message":"No integer overflow vulnerabilities were found in HTTP request.","business-implication":"<ul>\n<li>An integer overflow during a buffer length calculation can result in allocating a buffer that\nis too small to hold the data to be copied into it. This in turn can cause a buffer overflow when the data is copied.</li>\n<li>Withdrawing 1 unit from an account with a balance of 0 could cause an integer underflow and yield\na new balance of 4,294,967,295.</li>\n<li>A very large positive number in a transaction could be cast as a signed integer by backend. The interpreted value\ncould become a negative number and reverse the direction of the transaction.</li>\n</ul>","intro":"<p>An integer overflow occurs when the result of an arithmetic operation exceeds the maximum size\nof the integer data type used to store it. When an integer overflow occurs, the calculated value\nwill wrapped around the maximum value allowed by the data structure and start from the minimum value.</p>\n<p>Attackers use integer overflows to corrupt the data stack of the web application.\nBy sending carefully crafted input to the server, an attacker can cause the data corruption.\nAttackers can use these defects to influence the value of variables in ways that the application is not meant\nto.</p>","compliant":"","non-compliant":"","related-to":"","types":[4]},"relationships":{}},{"id":6,"type":"vulnerabilities","attributes":{"uuid":"3e2f54ef-bbbb-4688-a32c-0c2fdf1417ad","name":"Broken HostnameVerifier for SSL","description":"<p>Implements naive hostname verification. This HostnameVerifier breaks\ncertificate validation!</p>","question":"Is the HostnameVerifier for SSL implemented properly?","success-message":"HostnameVerifiers for SSL, if any, seem to be verifying hostnames properly.","business-implication":"<p>In the event that a user (anonymous or verified) is able to execute\nover-privileged functionality, the business may experience:</p>\n<ul>\n<li>Reputational Damage</li>\n<li>Fraud</li>\n<li>Information Theft</li>\n</ul>","intro":"<p>Allowing All Hostnames: The app does not verify if the certificate is\nissued for the URL the client is connecting to. For example, when a\nclient connects to example.com, it will accept a server certificate\nissued for some-other-domain.com.</p>\n<p>On Android, using <code>HttpURLConnection</code> is recommended for HTTP client\nimplementation.</p>","compliant":"<p>The code example shows how to verify hostname using a\nwrapper <code>HostnameVerifier</code> which also checks for custom loaded certificates</p>\n<pre><code>public HostnameVerifier wrapHostnameVerifier(final HostnameVerifier defaultVerifier) {\n    if (defaultVerifier == null)\n        throw new IllegalArgumentException(\"The default verifier may not be null\");\n\n    return new SecuringHostnameVerifier(defaultVerifier);\n}\n\nclass SecuringHostnameVerifier implements HostnameVerifier {\n    private HostnameVerifier defaultVerifier;\n\n    public MemorizingHostnameVerifier(HostnameVerifier wrapped) {\n        defaultVerifier = wrapped;\n    }\n\n    @Override\n    public boolean verify(String hostname, SSLSession session) {\n        Log.d(\"log\", \"hostname verifier for \" + hostname + \", trying default verifier first\");\n        // if the default verifier accepts the hostname, we are done\n        if (defaultVerifier.verify(hostname, session)) {\n            Log.d(\"log\", \"default verifier accepted \" + hostname);\n            return true;\n        }\n        // otherwise, we check if the hostname is an alias for this cert in our keystore\n        try {\n            X509Certificate cert = (X509Certificate)session.getPeerCertificates()[0];\n            if (cert.equals(appKeyStore.getCertificate(hostname.toLowerCase(Locale.US)))) {\n                Log.d(\"log\", \"certificate for \" + hostname + \" is in keystore. accepting.\");\n                return true;\n            } else {\n                Log.d(\"log\", \"server \" + hostname + \" provided wrong certificate.\");\n                return false;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n}\n</code></pre>","non-compliant":"<p>The following code inherits <code>javax.net.ssl.SSLContext</code>:</p>\n<pre><code>public void HostnameVerifier() {\n    HostnameVerifier hv = new HostnameVerifier() {\n        @Override\n        public boolean verify(String hostname, SSLSession session) {\n            // Always return true -&gt; Accept any host names\n            return true;\n        }\n    };\n}\n</code></pre>\n<p><code>HostnameVerifier</code> will always return true without checking the contents\nor verifying the hostname</p>","related-to":"<ul>\n<li><a href=\"http://jvn.jp/en/jp/JVN39218538/\">JVN#39218538</a> Pizza Hut Japan\n  Official Order App for Android has a problem whereby it fails to\n  verify SSL server certificates.</li>\n<li><a href=\"http://jvn.jp/en/jp/JVN75084836/\">JVN#75084836</a> Yome Collection\n  for Android has a problem with management of IMEI.</li>\n<li><a href=\"http://jvn.jp/en/jp/JVN68156832/\">JVN#68156832</a> Yafuoku! contains\n  an issue where it fails to verify SSL server certificates</li>\n</ul>","types":[1]},"relationships":{}},{"id":5,"type":"vulnerabilities","attributes":{"uuid":"8c85a7d6-f632-4cf3-8249-343e878ac450","name":"Broken SSL Trust Manager","description":"<p>Implements naive certificate check. This Trust Manager breaks\ncertificate validation.</p>","question":"Is the Trust Manager for SSL implemented properly?","success-message":"Trust Managers for SSL, if any, seem to be properly implemented.","business-implication":"<p>In the event that a user (anonymous or verified) is able to execute\nover-privileged functionality, the business may experience:</p>\n<ul>\n<li>Reputational Damage</li>\n<li>Fraud</li>\n<li>Information Theft</li>\n</ul>","intro":"<p>Android apps that use SSL/TLS protocols for secure communication should\nproperly verify server certificates. The basic verification includes:</p>\n<ul>\n<li>verify that the subject (CN) of X.509 certificate and the URL\n  matches</li>\n<li>verify that the certificate is signed by the trusted CA</li>\n<li>verify that the signature is correct</li>\n<li>verify that the certificate is not expired</li>\n</ul>\n<p>A developer has the freedom to customize their SSL implementation. The\ndeveloper should properly use SSL as appropriate to the intent of the\napp and the environment the apps are used in. If the SSL is not\ncorrectly used, a user's sensitive data may leak via the vulnerable SSL\ncommunication channel.</p>\n<p>Fahl et al <a href=\"https://www.securecoding.cert.org/confluence/display/java/AA.+References#AA.References-Fahl2012\">Fahl\n2012</a>\ndescribes the following patterns of the insecure use of SSL:</p>\n<ul>\n<li>Trusting All Certificates: The developer implements the\n  TrustManager interface so that it will trust all the server\n  certificate (regardless of who signed it, what is the CN etc.)</li>\n<li>Mixed-Mode/No SSL: A developer mixes secure and insecure\n  connections in the same app or does not use SSL at all.</li>\n</ul>\n<p>On Android, using <code>HttpURLConnection</code> is recommended for HTTP client\nimplementation.</p>","compliant":"<p>The compliant solution is given below which shows how to solve the issue\nwith the non compliant code:</p>\n<pre><code>public void checkCertTrusted(X509Certificate[] chain, String authType, boolean isServer) throws CertificateException {\n    try {\n        if (isServer)\n            appTrustManager.checkServerTrusted(chain, authType);\n        else\n            appTrustManager.checkClientTrusted(chain, authType);\n    } catch (CertificateException ae) {\n        // if the cert is stored in our appTrustManager, we ignore expiredness\n        if (isExpiredException(ae)) {\n            Log.i(\"log\", \"accepting expired certificate from keystore\");\n            return;\n        }\n        if (isCertKnown(chain[0])) {\n            Log.i(\"log\", \"accepting cert already stored in keystore\");\n            return;\n        }\n        try {\n            if (defaultTrustManager == null)\n                throw ae;\n            Log.d(\"log\", \"trying defaultTrustManager\");\n            if (isServer)\n                defaultTrustManager.checkServerTrusted(chain, authType);\n            else\n                defaultTrustManager.checkClientTrusted(chain, authType);\n        } catch (CertificateException e) {\n            Log.d(\"log\", \"defaultTrustManager failed: \" + e);\n            interactCert(chain, authType, e);\n        }\n    }\n}\n\npublic void checkTrustManager() throws IOException, KeyManagementException, NoSuchAlgorithmException {\n    TrustManager tm = new X509TrustManager() {\n\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain,\n                String authType) throws CertificateException {\n            checkCertTrusted(chain, authType, false);\n        }\n\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain,\n                String authType) throws CertificateException {\n            checkCertTrusted(chain, authType, false);\n        }\n\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return defaultTrustManager.getAcceptedIssuers();\n        }\n    };\n}\n</code></pre>\n<p>The method <code>checkCertTrusted()</code> gives an idea about how to solve this\nissue. If a custom keystore is being used to load certificates then we\nneed to define and do a failsafe load of those certificates.</p>","non-compliant":"<p>The following code implements a custom <code>MySSLSocketFactory</code> class that\ninherits <code>javax.net.ssl.SSLContext:</code></p>\n<pre><code>public void emptyTrustManager() throws IOException, KeyManagementException, NoSuchAlgorithmException {\n    TrustManager tm = new X509TrustManager() {\n\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain,\n                String authType) throws CertificateException {\n            // Do nothing -&gt; accept any certificates\n        }\n\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain,\n                String authType) throws CertificateException {\n            // Do nothing -&gt; accept any certificates\n        }\n\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    };\n}\n</code></pre>\n<p>In the example above, <code>checkClientTrusted()</code> and <code>checkServerTrusted()</code> are\noverridden to make a blank implementation so that SSLSocketFactory does\nnot verify the SSL certificate. The MySSLSocketFactory class is used to\ncreate an instance of HttpClient in another part of the application.</p>","related-to":"<ul>\n<li><a href=\"http://jvn.jp/en/jp/JVN39218538/\">JVN#39218538</a> Pizza Hut Japan\n  Official Order App for Android has a problem whereby it fails to\n  verify SSL server certificates.</li>\n<li><a href=\"http://jvn.jp/en/jp/JVN75084836/\">JVN#75084836</a> Yome Collection\n  for Android has a problem with management of IMEI.</li>\n<li><a href=\"http://jvn.jp/en/jp/JVN68156832/\">JVN#68156832</a> Yafuoku! contains\n  an issue where it fails to verify SSL server certificates</li>\n</ul>","types":[1]},"relationships":{}},{"id":8,"type":"vulnerabilities","attributes":{"uuid":"8864cf82-07b0-45a7-8242-e255f621e3b7","name":"HostnameVerifier Allowing All Hostnames","description":"<p>Implements AllowAllHostname verifier which might allow hacker to\neavesdrop into the connection.</p>","question":"Does the application have AllowAllHostnameVerification?","success-message":"AllowAllHostname is properly configured, or is disabled.","business-implication":"<p>In the event that a user (anonymous or verified) is able to execute\nover-privileged functionality, the business may experience:</p>\n<ul>\n<li>Reputational Damage</li>\n<li>Fraud</li>\n<li>Information Theft</li>\n</ul>","intro":"<p>Android apps that use SSL/TLS protocols for secure communication should\nproperly verify server certificates which should verify that the subject\n(CN) of X.509 certificate and the URL matches</p>\n<p>Allowing All Hostnames: The app does not verify if the certificate\nissued is for the URL the client is connecting to. For example, when a\nclient connects to example.com, it will accept a server certificate\nissued for some-other-domain.com.</p>\n<p>On Android, using <code>HttpURLConnection</code> is recommended for HTTP client\nimplementation.</p>","compliant":"<p>Never use <code>SSLSocketFactory.ALLOW\\_ALL\\_HOSTNAME\\_VERIFIER</code> in\nproduction code</p>\n<p>Please refer to <a href=\"http://www.jssec.org/dl/android_securecoding.pdf\">Android Application Secure Design/Secure Coding\nGuidebook</a>, Section\n5.4 Communicate by HTTPS.</p>","non-compliant":"<p>The following code extends <code>HttpClient</code> class that inherits\n<code>javax.net.ssl.SSLContext</code>:</p>\n<pre><code>public void allowAllHostnameVerifier() {\n    SSLSocketFactory sf = null;\n\n    sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n}\n</code></pre>\n<p>This will enable the use of\n<code>SSLSocketFactory.ALLOW\\_ALL\\_HOSTNAME\\_VERIFIER</code> as a result, host\nname verification that should take place when establishing an SSL\nconnection is disabled and will lead to the same situation as all the\ncertificate is trusted.</p>","related-to":"<ul>\n<li><a href=\"http://jvn.jp/en/jp/JVN39218538/\">JVN#39218538</a> Pizza Hut Japan\n  Official Order App for Android has a problem whereby it fails to\n  verify SSL server certificates.</li>\n<li><a href=\"http://jvn.jp/en/jp/JVN75084836/\">JVN#75084836</a> Yome Collection\n  for Android has a problem with management of IMEI.</li>\n<li><a href=\"http://jvn.jp/en/jp/JVN68156832/\">JVN#68156832</a> Yafuoku! contains\n  an issue where it fails to verify SSL server certificates</li>\n</ul>","types":[1]},"relationships":{}},{"id":12,"type":"vulnerabilities","attributes":{"uuid":"8575c436-c54c-4ee3-b12e-ac37e569bca7","name":"Unprotected Activities","description":"<p>An activity was found to be shared with other apps on the device without\nan intent filter or a permission requirement, therefore leaving it\naccessible to any other application on the device.</p>","question":"Are application activities protected?","success-message":"Activities seem to be sufficiently protected.","business-implication":"<p>Unauthorized apps may use vulnerable activities to perform malicious\nactions.</p>","intro":"<p>On Android, declaring an intent filter for an activity in the\n<code>AndroidManifest.xml</code> file means that the activity may be exported to\nother apps. If the activity is intended solely for the internal use of\nthe app and an intent filter is declared, then any other apps, including\nmalware, can activate the activity for unintended use.</p>\n<p>In the case of the vulnerability in the Twicca app (in versions 0.7.0\nthrough 0.9.30), by launching Twicca's activity, another app that does\nnot have permission to access the SD card or network could upload images\nor movies stored on the SD card to a social networking service with the\nTwicca user's Twitter account.</p>","compliant":"<ul>\n<li>\n<p>In this compliant solution the activity is not exported:</p>\n<p><activity\n    android:configChanges=\"keyboard|keyboardHidden|orientation\"\n    android:name=\".media.yfrog.YfrogUploadDialog\"\n    android:theme=\"@style/ VulnerableTheme.Dialog\"\n    android:windowSoftInputMode=\"stateAlwaysHidden\"\n    android:exported=\"false\">\n</activity></p>\n<p>By declaring android:exported=\"false\" for an activity tag in the\nAndroidManifest.xml file, the activity is restricted to only accept\nintents from within the same app or from an app with the same\nuser ID.</p>\n</li>\n<li>\n<p>This vulnerability was fixed in Twicca v0.9.31. Instead of declaring\n    the activity exported=\"false\" in AndroidManifest.xml, Twicca fixed\n    this vulnerability by validating the caller of this activity. In\n    the onCreate() method of the activity class, code was added to check\n    if the package name of the caller is the same as the package name\n    of itself. If the package names are different, the activity exits:</p>\n<p>public void onCreate(Bundle arg5) {\n    super.onCreate(arg5);\n    ...\n    ComponentName v0 = this.getCallingActivity();\n    if (v0 == null) {\n        this.finish();\n    } else if (!jp.r246.twicca.equals(v0.getPackageName())) {\n        this.finish();\n    } else {\n        this.a = this.getIntent().getData();\n        if (this.a == null) {\n            this.finish();\n        }\n        ...\n    }\n}</p>\n</li>\n</ul>\n<p>An Android developer can arbitrarily choose a package name, so\ndifferent app developers could choose the same package name.\nTherefore, it is generally not recommended to use the package name\nfor validating the caller of the activity. The recommended\nalternative is to check the developer's certificate, instead of the\npackage name.</p>\n<p>However, considering the following facts, Twicca's solution may be\nlogical and safe against the exploit:</p>\n<ul>\n<li>\n<p>Only one app with a particular package name can exist on\n  Google Play.</p>\n</li>\n<li>\n<p>If a user tries to install an app whose package name already\n  exists on the device, the installation either will fail or will\n  overwrite the previously installed app.</p>\n</li>\n</ul>","non-compliant":"<p>This non-compliant code example shows an <code>AndroidManifest.xml</code> file for an\napplication that exports the activity to other apps, but does not\nrestrict access to its sensitive activity:</p>\n<pre><code>&lt;activity\n    android:configChanges=\"keyboard|keyboardHidden|orientation\"\n    android:name=\".media.yfrog.YfrogUploadDialog\"\n    android:theme=\"@style/Vulnerable.Dialog\"\n    android:windowSoftInputMode=\"stateAlwaysHidden\"&gt;\n    &lt;intent-filter android:icon=\"@drawable/yfrog_icon\" android:label=\"@string/YFROG\"&gt;\n        &lt;action android:name=\"jp.co.vulnerable.ACTION_UPLOAD\" /&gt;\n        &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\n        &lt;data android:mimeType=\"image/*\" /&gt;\n        &lt;data android:mimeType=\"video/*\" /&gt;\n    &lt;/intent-filter&gt;\n&lt;/activity&gt;\n</code></pre>\n<p><code>android:name</code> refers to the name of the class that implements this\nactivity. The name of the package is <code>jp.co.vulnerable</code> so the fully\nqualified name of the class implementing this activity is\n<code>jp.co.vulnerable.media.yfrog.YfrogUploadDialog</code>. Since the intent filter\nis defined, this activity is exported to other apps.</p>","related-to":"<ul>\n<li><a href=\"https://jvn.jp/en/jp/JVN31860555/\">JVN#31860555</a> Twicca fails to\n  restrict access permissions</li>\n</ul>","types":[1]},"relationships":{}},{"id":14,"type":"vulnerabilities","attributes":{"uuid":"89a34bf1-cb04-4604-a824-be726db63209","name":"Storing Information in Shared Preferences","description":"<p>Insecured information was found in shared preference. One shouldn't\nuse un-encrypted information in SharedPreference.</p>","question":"Is any sensitive information is leaking through Shared Preferences?","success-message":"No leakage of data were found via Shared Preference.","business-implication":"<p>Typically, malicious code steals sensitive information (passwords,\nsession cookies, personally identifiable information, etc). Hence, the\nassociated business impacts include:</p>\n<ul>\n<li>Fraud</li>\n<li>Privacy Violations</li>\n</ul>","intro":"<p>In Android apps, data can be communicated via intents, or data can be\nwritten to files, distributed using shared references, or stored in\ndatabases. In all these cases, if the data is sensitive, it is important\nto keep the data secure. That is, it should not be possible for other\napps (or, more strictly, apps with different userids) to be able to\naccess this data, or for the data to be accessible to other programs or\npeople, if the data owner does not intend that.</p>\n<p>Data security (for non-intent communication channels) can be supported\nby creating the file, shared preference or database with MODE_PRIVATE\non internal storage or with MODE_PRIVATE and encrypted (using secure\nencryption techniques, and using an encryption key only secure\nparties/apps have) on external storage. MODE_PRIVATE is a constant\ndefined by the class android.content.Context. It may be used as the mode\nparameter in the methods openFileOutput(), getSharedPreferences(),\nandopenOrCreateDatabase() (which are all also defined in the class\nandroid.content.Context).</p>\n<p>Static taint flow analysis can be done for a set of apps, to trace data\nfrom each source (an input of data which cannot be fully predicted by\nstatic analysis, e.g., text input by a user) to reachable sinks (data\noutput to a location that other applications or methods can access,\ne.g., sending the data over a Bluetooth connection). Taint flow analysis\nhelps users understand many possible source to sink flows, including\nflows that include intents and/or static fields.</p>","compliant":"<p>In this compliant solution the file is created using MODE_PRIVATE, so\nit can be accessed only by the app that created the file.</p>\n<pre><code>openFileOutput(\"someFile\", MODE_PRIVATE);\n</code></pre>","non-compliant":"<p>This non-compliant code example shows an application that creates a file\nthat is world readable, and hence not secure.</p>\n<pre><code>openFileOutput(\"someFile\", MODE_WORLD_READABLE);\n</code></pre>\n<p>Any application could read the file and access any data stored in it.</p>","related-to":"","types":[2]},"relationships":{}},{"id":22,"type":"vulnerabilities","attributes":{"uuid":"60916016-e57e-42f3-96d5-65864eb53f48","name":"Sensitive Data in NSUserDefaults","description":"<p>NSUserDefaults is an alternative way by which data can be stored in\nPlist files</p>","question":"Does this application store sensitive information in NSUserDefaults?","success-message":"This application does not store sensitive information in NSUserDefaults.","business-implication":"<p>Sensitive information can get compromised since plist files store data\nunencrypted.</p>","intro":"<p>NSUserDefaults are stored in plist in binary format, with no encryption,\nand is stored in your app's directory. Any user can edit, see, share,\nmove and whatever they want to. Thus, if any sensitive information is\nstored in NSUserDefaults then it may reach wrong hands &amp; can be used for\npersonal use later on.</p>","compliant":"<p>Avoid using NSUserDefaults to store sensitive pieces of information as\nit stores data in plist files which contain information in unencrypted\nform.</p>","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":23,"type":"vulnerabilities","attributes":{"uuid":"c60a5ac6-bafe-46d4-938f-95e2f8eeec17","name":"Sensitive Information in SQLite3 Databases","description":"<p>SQLite3 databases are stored in unencrypted form on the device. Storing\nsensitive information in such databases may lead to leakage of data.</p>","question":"Does this application store sensitive information in SQLite3 databases?","success-message":"This application does not store sensitive information in SQLite3 databases.","business-implication":"<p>Failure to use encryption routines may result in the database and its\nassociated data including user credentials getting compromised.</p>","intro":"<p>SQLite databases are often used by the applications to store persistent\nor temporary data which can be further used by the application at later\nstages. For example, in order to provide seamless experience to the\nuser, an application may store user credentials in SQLite database so\nthat the user doesn't need to enter them again later on. However, these\ndatabases don't have any built-in support for encryption and hence, all\nthe information is stored in plain-text format in these files.</p>","compliant":"<p>It is suggested to use custom encryption while storing data in SQLite\ndatabases.</p>\n<p>SQLite engine writes the data into Write Ahead Log (WAL) before storing\nit in the actual database file. Using WAL, there is a possibility to\nrecover the deleted data from the database file. Hence, before deleting\nany SQLite record, always overwrite it with some junk data so that it\ncan't be read even if someone tries to recover it.</p>","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":26,"type":"vulnerabilities","attributes":{"uuid":"3031e765-6194-425a-8f88-e86798db668d","name":"Unsecured Data in RealmDB","description":"<p>Realm databases are used by the applications to store data which can be\nfurther used by the application at later stages. However, these\ndatabases do not have any built-in support for encryption and hence, all\nthe information is stored in plaintext format in these files. If an\napplication stores user credentials or some sensitive user specific data\nin this database then it can be accessed by any third party.</p>","question":"Does this application store data in RealmDB?","success-message":"This application does not store sensitive information in RealmDB.","business-implication":"<p>Failure to use encryption routines may result in the database and its\nassociated data including user credentials getting compromised.</p>","intro":"<p>Realm databases are used by the applications to store data which can be\nfurther used by the application at later stages. However, these\ndatabases don't have any built-in support for encryption and hence, all\nthe information is stored in plain-text format in these files. If an\napplication stores user credentials or some sensitive user specific data\nin this database then it can be accessed by any third party.</p>","compliant":"<p>It is suggested to use custom encryption while storing data in Realm\ndatabases.</p>\n<p>An encrypted copy of the unencrypted Realm file, which can be done by\nusing</p>\n<pre><code>Realm().writeCopyToPath(_:encryptionKey:)\n</code></pre>\n<p>and then can use the encrypted file at the new location.</p>","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":30,"type":"vulnerabilities","attributes":{"uuid":"c6cdb945-8e81-45b1-a8be-af4e1965daaf","name":"Remote URL Redirection Vulnerability","description":"<p>Android application which uses older version of PhoneGap is vulnerable\nto URL redirection to arbitrary website as defined by CVE-3500</p>","question":"Does the application use an older version of PhoneGap that allows remote attackers to perform URL redirection?","success-message":"The application is not vulnerable to URL redirection vulnerability, or is not using PhoneGap.","business-implication":"<p>With the presence of this vulnerability, attackers may:</p>\n<ul>\n<li>Open and send data to arbitrary applications.</li>\n<li>Bypass the HTTP whitelist and connect to arbitrary servers.</li>\n<li>Change the start page via a crafted intent URL.</li>\n</ul>","intro":"<p>Android applications built with the Cordova framework can be launched\nthrough a special intent URL. A specially-crafted URL could cause the\nCordova-based application to start up with a different start page than\nthe developer intended, including other HTML content stored on the\nAndroid device. This has been the case in all released versions of\nCordova up to 3.5.0, and has been fixed in the latest release (3.5.1).\nWe recommend affected projects to update their applications to the\nlatest release.</p>","compliant":"<p>Upgrade your Phonegap or Apache Cordova application to the latest\nVersion</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":34,"type":"vulnerabilities","attributes":{"uuid":"dcf899ec-c009-43b0-b32f-fbc52d68d0a6","name":"Cordova Remote Start Page Manipulation Vulnerability","description":"<p>According to CVE-3500 Apache Cordova had a vulnerability to change the\nstart page</p>","question":"Is the application affected by CVE-3500 that allows remote attackers to change the start page?","success-message":"The application is not affected by CVE-3500, or Apache Cordova is not being used.","business-implication":"<p>With Cordova 3.5.0 or prior, attackers may:</p>\n<ul>\n<li>Open and send data to arbitrary applications.</li>\n<li>Bypass the HTTP whitelist and connect to arbitrary servers.</li>\n<li>Change the start page via a crafted intent URL.</li>\n</ul>","intro":"<p>Apache Cordova for Android version 3.5.0 and prior are vulnerable.\nAttackers can exploit these issues to bypass security restrictions to\nperform unauthorized actions. This may aid in further attacks.</p>","compliant":"<p>Upgrade PhoneGap or Apache Cordova to the latest version.</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":47,"type":"vulnerabilities","attributes":{"uuid":"a3a99b4b-27b9-41a5-9e0c-45b2a4bf35e5","name":"Insecure Cryptographic Keys","description":"<p>Application seems to be using the incorrect cryptographic encryption\nmethod, or is not using it.</p>","question":"Does the application use insecure encryption algorithms or configurations?","success-message":"The application does not use insecure encryption algorithms or configurations.","business-implication":"<p>Using an insecure initialization vector allows the attacker to perform\nfrequency analysis on the ciphertext. An all-zero IV would mean that the\ninitial portion of ciphertext is effectively just substitution.</p>","intro":"<p>Using the CCCryptor, one can use common sounding functions such as\n<code>CCCryptorCreate</code>, <code>CCCryptorUpdate</code>, <code>CCCryptorFinal</code> (or simply <code>CCCrypt()</code>\none-shot function) to perform symmetric encryption using different\nalgorithms like AES, 3DES and hardcore security ciphers like RC4, DES,\netc.</p>\n<p>Apple supports ECB and CBC mode for their ciphers, and fortunately a\ndeveloper really needs to explicitly prove stupidity by using ECB since\nAPIs default to CBC, the Cipher Block Chaining mode. What could possibly\ngo wrong? Right, there is some minor thing that is called the \"IV\".\nApple supposedly translated the acronym IV to \"Ignorance Vector\" when\nwriting their Common Crypto API man-pages, but we should read\n\"Initialization Vector\" - used to initialize the very first block of\ncipher text.</p>","compliant":"<p>In CBC-mode, each 16-byte encryption influences the next 16-byte encryption. It's also the\ndefault. The problem is about block 0. It is a random block -1 which is\nthe IV.</p>\n<p>This is listed as optional in <code>CCCrypt()</code> which is confusing because it\nisn't really optional in CBC mode. If it is not provided, then it'll\nautomatically generate an all-0 IV. That throws away significant\nprotection on the first block. IV is just 16 random bytes.</p>\n<p>The method returns the encrypted data (nil for error), and returns the\nIV, salt and error by reference.</p>\n<pre><code>NSData *iv;\nNSData *salt;\nNSError *error;\nNSData *encryptedData = [RNCryptManager encryptedDataForData:plaintextData\n                                                    password:password\n                                                          iv:&amp;iv\n                                                        salt:&amp;salt\n                                                       error:&amp;error];\n</code></pre>\n<p>Example implementation</p>\n<pre><code>#import &lt;CommonCrypto/CommonCryptor.h&gt;\n#import &lt;CommonCrypto/CommonKeyDerivation.h&gt;\n\nNSString * const\nkRNCryptManagerErrorDomain = @\"net.robnapier.RNCryptManager\";\n\nconst CCAlgorithm kAlgorithm = kCCAlgorithmAES128;\nconst NSUInteger kAlgorithmKeySize = kCCKeySizeAES128;\nconst NSUInteger kAlgorithmBlockSize = kCCBlockSizeAES128;\nconst NSUInteger kAlgorithmIVSize = kCCBlockSizeAES128;\nconst NSUInteger kPBKDFSaltSize = 8;\nconst NSUInteger kPBKDFRounds = 10000;  // ~80ms on an iPhone 4\n\n+ (NSData *)encryptedDataForData:(NSData *)data\n                        password:(NSString *)password\n                              iv:(NSData )iv\n                            salt:(NSData )salt\n                           error:(NSError )error {\n  NSAssert(iv, @\"IV must not be NULL\");\n  NSAssert(salt, @\"salt must not be NULL\");\n\n  *iv = [self randomDataOfLength:kAlgorithmIVSize];\n  *salt = [self randomDataOfLength:kPBKDFSaltSize];\n\n  NSData *key = [self AESKeyForPassword:password salt:*salt];\n\n  size_t outLength;\n  NSMutableData *\n  cipherData = [NSMutableData dataWithLength:data.length +\n                kAlgorithmBlockSize];\n\n  CCCryptorStatus\n  result = CCCrypt(kCCEncrypt, // operation\n                   kAlgorithm, // Algorithm\n                   kCCOptionPKCS7Padding, // options\n                   key.bytes, // key\n                   key.length, // keylength\n                   (*iv).bytes,// iv\n                   data.bytes, // dataIn\n                   data.length, // dataInLength,\n                   cipherData.mutableBytes, // dataOut\n                   cipherData.length, // dataOutAvailable\n                   &amp;outLength); // dataOutMoved\n\n  if (result == kCCSuccess) {\n    cipherData.length = outLength;\n  }\n  else {\n    if (error) {\n      *error = [NSError errorWithDomain:kRNCryptManagerErrorDomain\n                                   code:result\n                               userInfo:nil];\n    }\n    return nil;\n  }\n\n  return cipherData;\n}\n\n+ (NSData *)randomDataOfLength:(size_t)length {\n  NSMutableData *data = [NSMutableData dataWithLength:length];\n\n  int result = SecRandomCopyBytes(kSecRandomDefault,\n                                  length,\n                                  data.mutableBytes);\n  NSAssert(result == 0, @\"Unable to generate random bytes: %\n            d\", errno);\n\n  return data;\n}\n\n// Replace this with a 10,000 hash calls if you don't have CCKeyDerivationPBKDF\n+ (NSData *)AESKeyForPassword:(NSString *)password\n                         salt:(NSData *)salt {\n  NSMutableData *\n  derivedKey = [NSMutableData dataWithLength:kAlgorithmKeySize];\n\n  int\n  result = CCKeyDerivationPBKDF(kCCPBKDF2,            // algorithm\n                                password.UTF8String,  // password\n                                [password lengthOfBytesUsingEncoding:NSUTF8StringEncoding],  // passwordLength\n                                salt.bytes,           // salt\n                                salt.length,          // saltLen\n                                kCCPRFHmacAlgSHA1,    // PRF\n                                kPBKDFRounds,         // rounds\n                                derivedKey.mutableBytes, // derivedKey\n                                derivedKey.length); // derivedKeyLen\n\n  // Do not log password here\n  NSAssert(result == kCCSuccess, @\"Unable to create AES key for password: %\n           d\", result);\n\n  return derivedKey;\n}\n</code></pre>","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":33,"type":"vulnerabilities","attributes":{"uuid":"c3c95d0f-5d66-4eef-b92e-b3552effb42b","name":"PhoneGap HTTPS Whitelist Bypass","description":"<p>In PhoneGap if regex is used to whitelist, this checks if HTTPS can be\nbypassed from that regex</p>","question":"Does the PhoneGap application use vulnerable regex for whitelisting?","success-message":"The PhoneGap application seems to be using proper regex check, or is not using PhoneGap.","business-implication":"<p>An attacker can bypass the Cordova's white-listing mechanism and\ninitiate connections to unauthorized remote servers. This may aid in\nfurther attacks.</p>","intro":"<p>In order to ensure that a Cordova WebView only allows requests to URLs\nin the configured whitelist, the framework overrides Android's\n<code>shouldInterceptRequest()</code></p>\n<p>The use of <code>shouldInterceptRequest()</code> to provide the whitelisting\nmechanism is problematic in that it is used to intercept only certain\nrequests (such as those serviced over HTTP/S or through the file URI).\nThere may be protocols for which this function is not called by the\nAndroid framework. As of Android 4.4 KitKat, the WebView is rendered by\nChromium and supports Web Sockets which one such protocol. An attacker\ncan therefore make use of a WebSocket connection to bypass the Cordova's\nwhite-listing mechanism.</p>","compliant":"<p>Domain whitelisting is a security model that controls access to external\ndomains over which you application has no control. Cordova's default\nsecurity policy allows access to any site. Before moving your\napplication to production, you should formulate a whitelist and allow\naccess to specific network domains and subdomains.</p>\n<p>Cordova adheres to the W3C Widget Access specification, which relies on\nthe <code>&lt;access&gt;</code> element within the app's <code>config.xml</code> file to enable\nnetwork access to specific domains. For projects that rely on the CLI\nworkflow described in The Command-Line Interface, this file is located\nin the project's top-level directory. Otherwise for platform-specific\ndevelopment paths, locations are listed in the sections below:</p>\n<p>The following examples demonstrate whitelist syntax:</p>\n<p>Access to google.com</p>\n<pre><code>&lt;access origin=\"http://google.com\" /&gt;\n</code></pre>\n<p>Access to the secure google.com:</p>\n<pre><code>&lt;access origin=\"https://google.com\" /&gt;\n</code></pre>\n<p>Access to the subdomain maps.google.com:</p>\n<pre><code>&lt;access origin=\"http://maps.google.com\" /&gt;\n</code></pre>\n<p>Access to all the subdomains on google.com, for example, mail.google.com and docs.google.com:</p>\n<pre><code>&lt;access origin=\"http://*.google.com\" /&gt;\n</code></pre>\n<p>Access to all domains, for example, google.com and developer.mozilla.org:</p>\n<pre><code>&lt;access origin=\"*\" /&gt;\n</code></pre>\n<p>This is the default value for newly created CLI projects which not secured.</p>\n<p>Also upgrade your PhoneGap or Apache Cordova application to the latest version</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":92,"type":"vulnerabilities","attributes":{"uuid":"ce2f58aa-2082-435c-bef8-cd714bd78c84","name":"MediaProjection: Android Service Allows Recording of Audio, Screen Activity","description":"<p>Protect all sensitive windows within the App by enabling the <code>FLAG_SECURE</code> flag. This flag will prevent Apps from being able to record the protected windows. Also, the flag will prevent users from taking screenshots of these windows (by pressing the VOLUME_DOWN and POWER buttons). As such screenshots are stored on the SDCard by default, they are accessible to all Apps and sensitive data may be exposed.</p>","question":"Does the application protect sensitive screens from being displayed in screencasts initiated by third-party Apps?","success-message":"The application does seem protect sensitive screens from being displayed in screencasts initiated by third-party Apps.","business-implication":"","intro":"<p>Starting with Android 5.0, Google introduced the android.media.projection API which allows any third-party App to perform screen capture and screen sharing (fixed in Android 8).</p>\n<p>Such an App can capture everything on the device’s screen, including sensitive activity from all other Apps such as password keystrokes, credit card data, etc. The capturing ability remains on even if the user terminates/closes the App, but not after a reboot.</p>","compliant":"<p>Below is an example of how to use <code>FLAG_SECURE</code> inside your activity</p>\n<pre><code>public class SecureActivity extends Activity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // Set the Secure flag for this Window\n        getWindow().setFlags(LayoutParams.FLAG_SECURE, LayoutParams.FLAG_SECURE);\n    }\n}\n</code></pre>","non-compliant":"","related-to":"<ul>\n<li><a href=\"https://developer.android.com/about/versions/android-5.0.html\">Android 5.0 Docs</a></li>\n<li><a href=\"https://developer.android.com/reference/android/view/WindowManager.LayoutParams#FLAG_SECURE\">FLAG_SECURE docs</a></li>\n</ul>","types":[1]},"relationships":{}},{"id":90,"type":"vulnerabilities","attributes":{"uuid":"ad1c8b3b-61e5-4f76-a1bb-8ade8d30f23a","name":"Sensitive information in Sqlite database","description":"<p>SQLITE databases which are leaking information and their queries are listed\nbelow:</p>","question":"Is the application leaking any sensitive information in SQLITE DB?","success-message":"Application is not vulnerable to SQLITE db","business-implication":"<p>Failure to use encryption routines may result in the database and its\nassociated data including user credentials getting compromised.</p>","intro":"<p>Android apps contain a lot of user information which also includes some\nsensitive ones such as username, password, email id, banking details, etc. This\ninformation is stored by the app in SQLite database in various tables using\ndiﬀerent attributes. To keep them secure, an app is expected to keep the\ninformation in secure and encrypted format.</p>\n<p>Whenever an app creates a database, by default it is saved\nin a location: <code>/data/data/app name/database/</code>. This location is private to an\napp and not accessible to the user or other apps. To share data stored in SQLite\ndatabase, an app can use Content Provider</p>\n<p>However, these databases don't have any built-in support for encryption and\nhence, all the information is stored in plain-text format in these files</p>","compliant":"<ol>\n<li>Wherever possible you must avoid storing sensitive data within your app.</li>\n<li>Use libraries like SQLcipher to encrypt the information stored</li>\n<li>set <code>\"allow backup=false\"</code> to avoid exploiting data using ADB</li>\n</ol>\n<p>With the library SQLCipher, SQLite databases can be password-encrypted.</p>\n<pre><code>SQLiteDatabase secureDB = SQLiteDatabase.openOrCreateDatabase(database, \"password123\", null);\nsecureDB.execSQL(\"CREATE TABLE IF NOT EXISTS Accounts(Username VARCHAR,Password VARCHAR);\");\nsecureDB.execSQL(\"INSERT INTO Accounts VALUES('admin','AdminPassEnc');\");\nsecureDB.close();\n</code></pre>\n<p>If encrypted SQLite databases are used, determine whether the password is\nhard-coded in the source, stored in shared preferences, or hidden somewhere\nelse in the code or filesystem. Secure ways to retrieve the key include:</p>\n<ul>\n<li>Asking the user to decrypt the database with a PIN or password once\n  the app is opened (weak passwords and PINs are vulnerable to\n  brute force attacks)</li>\n<li>Storing the key on the server and allowing it to be accessed from\n  a web service only (so that the app can be used only when the device\n  is online)</li>\n</ul>","non-compliant":"<p>SQLite is an SQL database engine that stores data in .db files.\nThe Android SDK has built-in support for SQLite databases.\nThe main package used to manage the databases is android.database.sqlite.\nYou may use the following code to store sensitive information within an\nactivity:</p>\n<pre><code>SQLiteDatabase notSoSecure = openOrCreateDatabase(\"privateNotSoSecure\",MODE_PRIVATE,null);\nnotSoSecure.execSQL(\"CREATE TABLE IF NOT EXISTS Accounts(Username VARCHAR, Password VARCHAR);\");\nnotSoSecure.execSQL(\"INSERT INTO Accounts VALUES('admin','AdminPass');\");\nnotSoSecure.close();\n</code></pre>\n<p>Once the activity has been called, the database file privateNotSoSecure will\nbe created with the provided data and stored in the clear text\nfile <code>/data/data/&lt;package-name&gt;/databases/privateNotSoSecure</code></p>","related-to":"","types":[2]},"relationships":{}},{"id":72,"type":"vulnerabilities","attributes":{"uuid":"8782aa3c-42c5-4542-95f5-fc1dc463d4dd","name":"SQL Injection Vulnerabilities in HTTP Requests","description":"<p>One or more API requests were found to be vulnerable to SQL injection</p>","question":"Are there SQL injection vulnerabilities in HTTP request?","success-message":"No SQL injection vulnerabilities were found in HTTP request.","business-implication":"","intro":"<p>A SQL injection attack consists of insertion or <em>injection</em> of a SQL query via\nthe input data from the client to the application. A successful SQL injection\nexploit can read sensitive data from the database, modify database data\n(Insert/Update/Delete), execute administration operations on the database\n(such as shutdown the DBMS), recover the content of a given file present on the\nDBMS file system and in some cases issue commands to the operating system.\nSQL injection attacks are a type of injection attack, in which SQL commands are\ninjected into data-plane input in order to effect the execution of predefined SQL commands.</p>","compliant":"","non-compliant":"","related-to":"","types":[4]},"relationships":{}},{"id":1,"type":"vulnerabilities","attributes":{"uuid":"6348622b-d65b-4e82-b9ff-a3982310a1f4","name":"Unprotected Services","description":"<p>A service was found to be shared with other apps on the device without\nan intent filter or a permission requirement therefore leaving it\naccessible to any other application on the device.</p>","question":"Are exported services sufficiently protected?","success-message":"Exported services in the app are sufficiently protected.","business-implication":"<p>Data can be shared through other services resulting in loss of sensitive\ninformation.</p>","intro":"<p><a href=\"https://www.securecoding.cert.org/confluence/display/java/AA.+References#AA.References-Chin11\">Chin, et al.</a>\nsay: \"If a Service is exported and not\nprotected with strong permissions, then any application can start and\nbind to the Service. Depending on the duties of a particular Service, it\nmay leak information or perform unauthorized tasks. Services sometimes\nmaintain singleton application state, which could be corrupted.\"</p>\n<p>To guard against such eventualities, an exported service should always\nbe protected with strong permissions.</p>","compliant":"<p>Always protect the Activity with <code>export=false</code></p>\n<pre><code>&lt;activity exported=\"false\" /&gt;\n</code></pre>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":2,"type":"vulnerabilities","attributes":{"uuid":"dacc0a5b-c7b5-4a76-8a90-d3ee5d052276","name":"Improper Content Provider Permissions","description":"<p>A content provider permission was set to allow access from any other app\non the device. Content providers may contain sensitive information about\nan app and therefore should not be shared.</p>","question":"Are Content Providers sufficiently protected?","success-message":"Application seems to properly implement SSL, or HTTPS is not implemented.","business-implication":"<p>If security controls are not properly implemented, content providers can\nlead to client side attacks like SQL injection. This works similarly to\ntraditional SQL injection attacks.</p>","intro":"<p>The <code>ContentProvider</code> class provides a mechanism for managing and sharing\ndata with other applications. When sharing a provider's data with other\napps, access control should be carefully implemented to prohibit\nunauthorized access to sensitive data.</p>\n<p>There are three ways to limit access to the content provider:</p>\n<ul>\n<li>Public</li>\n<li>Private</li>\n<li>Restricted access</li>\n</ul>","compliant":"<p>The following entry in the AndroidManifest.xml file makes the content\nprovider private so that other apps cannot access the data:</p>\n<pre><code>&lt;provider\n    android:name=\".content.AccountProvider\"\n    android:exported=\"false\"\n    android:authorities=\"jp.co.vulnerable.accountprovider\" /&gt;\n</code></pre>","non-compliant":"<p>MovatwiTouch, a Twitter client application, used a content provider to\nmanage Twitter's consumer key, consumer secret, and access token.\nHowever, the content provider was made public, which enabled\napplications installed on users' devices to access this sensitive\ninformation.</p>\n<p>The following entry in the AndroidManifest.xml does not have the\n<code>android:exported</code> attribute, which means, before API Level 16, the\ncontent provider is made public:</p>\n<pre><code>&lt;provider\n    android:name=\".content.AccountProvider\"\n    android:authorities=\"jp.co.vulnerable.accountprovider\" /&gt;\n</code></pre>","related-to":"<ul>\n<li><a href=\"https://jvn.jp/en/jp/JVN90289505/\">JVN#90289505</a> Content provider\n  in MovatwiTouch fails to restrict access permissions</li>\n</ul>","types":[1]},"relationships":{}},{"id":83,"type":"vulnerabilities","attributes":{"uuid":"c27913e4-5508-467f-afd1-89a276a5be30","name":"Disabled SSL CA Validation and Certificate Pinning","description":"<p>A host or service's certificate or public key can be added to an\napplication at development time, or it can be added upon first encountering\nthe certificate or public key. The former - adding at development time -\nis preferred since preloading the certificate or public key out of band\nusually means the attacker cannot taint the pin.</p>","question":"Does the application has Certificate Pinning enabled","success-message":"Application uses Certificate Pinning","business-implication":"<p>In the event that a user (anonymous or verified) is able to execute\nover-privileged functionality, the business may experience:</p>\n<ul>\n<li>Reputational Damage</li>\n<li>Fraud</li>\n<li>Information Theft</li>\n</ul>","intro":"<p>Certificate Pinning is the process of associating a host with their expected\nX509 certificate or public key. Once a certificate or public key is known or\nseen for a host, the certificate or public key is associated or 'pinned' to\nthe host. If more than one certificate or public key is acceptable.\nIn this case, the advertised identity must match one of the\nelements in the pinset.</p>","compliant":"<p>Certificate Pinning can be done with these two options:</p>\n<p>You can\n1. pin the certificate or\n2. pin the public key</p>\n<p>If you choose public keys, you have two additional choices:\n- pin the <code>subjectPublicKeyInfo</code> or\n- pin one of the concrete types such as <code>RSAPublicKey</code> or <code>DSAPublicKey</code>.</p>\n<p>The three choices are explained below in more detail. I would encourage you to pin the subjectPublicKeyInfo because it has the public parameters (such as {e,n} for an RSA public key) and contextual information such as an algorithm and OID. The context will help you keep your bearings at times, and the figure to the right shows the additional information available.</p>\n<h3>Certificate</h3>\n<p>The certificate is easiest to pin. You can fetch the certificate out of band for the website, have the IT folks email your company certificate to you, use openssl s_client to retrieve the certificate etc. At runtime, you retrieve the website or server's certificate in the callback. Within the callback, you compare the retrieved certificate with the certificate embedded within the program. If the comparison fails, then fail the method or function. There is a downside to pinning a certificate. If the site rotates its certificate on a regular basis, then your application would need to be updated regularly. For example, Google rotates its certificates, so you will need to update your application about once a month (if it depended on Google services). Even though Google rotates its certificates, the underlying public keys (within the certificate) remain static.</p>\n<h3>Public Key</h3>\n<p>Public key pinning is more flexible but a little trickier due to the extra steps necessary to extract the public key from a certificate. As with a certificate, the program checks the extracted public key with its embedded copy of the public key. There are two downsides to public key pinning. First, it's harder to work with keys (versus certificates) since you must extract the key from the certificate. Extraction is a minor inconvenience in Java and .Net, buts it's uncomfortable in Cocoa/CocoaTouch and OpenSSL. Second, the key is static and may violate key rotation policies.</p>\n<h3>Hashing</h3>\n<p>While the three choices above used DER encoding, its also acceptable to use a hash of the information. In fact, the original sample programs were written using digested certificates and public keys. The samples were changed to allow a programmer to inspect the objects with tools like dumpasn1 and other ASN.1 decoders.</p>\n<p>Hashing also provides three additional benefits. First, hashing allows you to anonymize a certificate or public key. This might be important if you application is concerned about leaking information during decompilation and re-engineering. Second, a digested certificate fingerprint is often available as a native API for many libraries, so its convenient to use. Finally, an  organization might want to supply a reserve (or back-up) identity in  case the primary identity is compromised. Hashing ensures your adversaries  do not see the reserved certificate or public key in advance of its use. In fact,  Google's IETF draft websec-key-pinning uses the technique.</p>","non-compliant":"","related-to":"<ul>\n<li>OWASP <a href=\"/index.php/Transport_Layer_Protection_Cheat_Sheet\" title=\"Transport Layer Protection Cheat Sheet\">Transport Layer Protection Cheat Sheet</a></li>\n<li>IETF <a href=\"http://www.ietf.org/rfc/rfc1421.txt\">RFC 1421 (PEM Encoding)</a></li>\n<li>IETF <a href=\"http://www.ietf.org/rfc/rfc4648.txt\">RFC 4648 (Base16, Base32, and Base64 Encodings)</a></li>\n<li>IETF <a href=\"http://www.ietf.org/rfc/rfc5280.txt\">RFC 5280 (Internet X.509, PKIX)</a></li>\n<li>IETF <a href=\"http://www.ietf.org/rfc/rfc3279.txt\">RFC 3279 (PKI, X509 Algorithms and CRL Profiles)</a></li>\n<li>IETF <a href=\"http://www.ietf.org/rfc/rfc4055.txt\">RFC 4055 (PKI, X509 Additional Algorithms and CRL Profiles)</a></li>\n<li>IETF <a href=\"http://www.ietf.org/rfc/rfc2246.txt\">RFC 2246 (TLS 1.0)</a></li>\n<li>IETF <a href=\"http://www.ietf.org/rfc/rfc4346.txt\">RFC 4346 (TLS 1.1)</a></li>\n<li>IETF <a href=\"http://www.ietf.org/rfc/rfc5246.txt\">RFC 5246 (TLS 1.2)</a></li>\n<li>RSA Laboratories <a href=\"http://www.rsa.com/rsalabs/node.asp?id=2125\">PKCS#1, RSA Encryption Standard</a></li>\n<li>RSA Laboratories <a href=\"http://www.rsa.com/rsalabs/node.asp?id=2128\">PKCS#6, Extended-Certificate Syntax Standard</a></li>\n</ul>","types":[1]},"relationships":{}},{"id":27,"type":"vulnerabilities","attributes":{"uuid":"fc34262d-567e-4d06-892b-8d740f38658d","name":"Unsecured Data in YapDB","description":"<p>YapDB is an alternative to SQLite3 database, used by applications to\nstore data</p>","question":"Does this application store data in RealmDB?","success-message":"This application does not store sensitive information in YapDB.","business-implication":"<p>Failure to use encryption routines may result in the database and its\nassociated data including user credentials getting compromised.</p>","intro":"<p>Yap databases are used by the applications to store data which can be\nfurther used by the application at later stages. However, these\ndatabases don't have any built-in support for encryption and hence, all\nthe information is stored in plain-text format in these files. If an\napplication stores user credentials or some sensitive user specific data\nin this database then it can be accessed by any third party.</p>","compliant":"<p>It is suggested to use custom encryption while storing data in Yap\ndatabases.</p>\n<p>SQLCipher is a SQLite extension that transparently encrypts the entire\ndatabase, and is available under a BSD-style license. SQLCipher support\nhas been added as a Cocoapod subspec. Simply change your Podfile:</p>\n<pre><code>pod 'YapDatabase/SQLCipher'\n</code></pre>\n<p>If you aren't using the SQLCipher subspec, the project won't compile the\nencryption configuration options to prevent the case of accidentally\ntrying to use encryption when support is not available.</p>\n<p>Once the project is configured to use SQLCipher, it then needs to tell\nYapDatabase the passphrase. This is done by setting the cipherKeyBlock\nof YapDatabaseOptions.</p>\n<pre><code>YapDatabaseOptions *options = [[YapDatabaseOptions alloc] init];\n    options.corruptAction = YapDatabaseCorruptAction_Fail;\n    options.cipherKeyBlock = ^ NSData *(void){\n        // You can also do things like fetch from the keychain in here.\n        return [@\"super secure passphrase\" dataUsingEncoding:NSUTF8StringEncoding];\n\n        // Note: The return type is NSData, and does NOT have to be a string in UTF-8.\n        // It can be any kind of blob of data, including randomly generated bytes.\n    };\n\n    self.database = [[YapDatabase alloc] initWithPath:databasePath options:options];\n</code></pre>\n<p>The cipherKeyBlock helps prevent storing the credentials in memory any\nlonger than necessary. This block will be executed on database setup,\nand when new connections are made to the database.</p>","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":110,"type":"vulnerabilities","attributes":{"uuid":"f8ac682a-3f9e-4b14-b7b7-dd36a7810b2a","name":"TLS ROBOT Attack","description":"<p>An attacker can passively record the traffic and later on decrypt it.\nEven though forward secrecy is enabled, the risk depends on how fast an\nattacker is able to perform the attack.\nAlso, a server impersonation or a man-in-the-middle attack is possible</p>","question":"Is the backend server vulnerable to ROBOT Attack?","success-message":"The the host is not vulnerable to ROBOT Attack","business-implication":"","intro":"<p>ROBOT also known as Return Of Bleichenbacher's Oracle Threat vulnerability that\nallows anyone on the Internet to perform RSA decryption and signing operations\nwithout the private key of a TLS server. Expression, Strong Oracle, means\nthat the attack is possible by collecting less than a million packets.</p>","compliant":"<p>Ensure you have no vulnerable applications on your SSL stack.\nIf you do have any vulnerable applications, make sure that you applied the\nrelated fix released by the vendor (if any available).</p>\n<p>RSA encryption modes are so risky that the only safe course of action is to\ndisable them. These encryption modes also lack forward secrecy.\nThus we strongly recommend, as a preventive measure, to disable all the\nTLS_RSA cipher suites on your SSL stack (except for the ones that have\nDHE or ECDHE in their name).</p>","non-compliant":"","related-to":"<ol>\n<li><a href=\"https://robotattack.org/\">The ROBOT Attack</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-6168\">CVE-2017-6168</a></li>\n<li><a href=\"https://www.kb.cert.org/vuls/id/144389/\">VU#144389 TLS implementations may disclose side channel information via discrepancies between valid and invalid PKCS#1 padding</a></li>\n</ol>","types":[4]},"relationships":{}},{"id":111,"type":"vulnerabilities","attributes":{"uuid":"f94b4bdc-a478-4f1d-9211-73a2a0e428b2","name":"TLS/SSL CRIME Attack","description":"<p>CRIME (Compression Ratio Info-leak Made Easy) is a security exploit against\nsecret web cookies over connections using the HTTPS and SPDY protocols\nthat also use data compression</p>","question":"Is the backend server vulnerable to TLS/SSL CRIME Attack?","success-message":"The the host is not vulnerable to TLS/SSL CRIME Attack","business-implication":"","intro":"<p>ROBOT also known as Return Of Bleichenbacher's Oracle Threat vulnerability that\nallows anyone on the Internet to perform RSA decryption and signing operations\nwithout the private key of a TLS server. Expression, Strong Oracle, means\nthat the attack is possible by collecting less than a million packets.</p>","compliant":"<p>CRIME can be defeated by preventing the use of compression, and disabling the\ncompression of SPDY requests, or by the website preventing the use of\ndata compression on such transactions using the protocol negotiation features\nof the TLS protocol. As detailed in The Transport Layer Security (TLS)\nProtocol Version 1.2, the client sends a list of compression algorithms\nin its ClientHello message, and the server picks one of them and sends it\nback in its ServerHello message. The server can only choose a compression\nmethod the client has offered, so if the client only offers\n'none' (no compression), the data will not be compressed.</p>\n<p>Similarly, since 'no compression' must be allowed by all TLS clients, a\n server can always refuse to use compression.</p>","non-compliant":"","related-to":"<ol>\n<li><a href=\"https://en.wikipedia.org/wiki/CRIME\">Wikipedia CRIME</a></li>\n<li><a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4929\">CVE-2012-4929</a></li>\n</ol>","types":[4]},"relationships":{}},{"id":64,"type":"vulnerabilities","attributes":{"uuid":"33d21495-0cf7-43a5-bfab-5fdc0fbfdc92","name":"Vulnerable Hash Algorithms","description":"<p>Using salted MD5 for passwords should be avoided, not because of its cryptographic\nweaknesses, but because it is fast. An attacker can try billions of candidate passwords\nper second on a single GPU.</p>\n<p>Using MD5 for file integrity may or may not be a practical problem, depending on\nthe exact usage scenario. The attacks against MD5 are collision attacks, not\npre-image attacks which means an attacker can produce two files with the same\nhash, if they have control over both of them. However, they cannot match the hash of\nan existing file they didn't influence.</p>\n<p>Although SHA1 remains the world's widely used hashing algorithm with Git and\nGnuPG relying on it for data integrity, it has <a href=\"https://shattered.io/static/shattered.pdf\">also been proven</a>\nto be susceptible to collision attacks.</p>","question":"Are any deprecated or vulnerable hash algorithms used?","success-message":"No deprecated or vulnerable hash algorithms are being used.","business-implication":"<p>Using cryptographically weak hash function algorithms may severely compromise the integrity of data.</p>","intro":"<p>The MD5 algorithm is commonly used hash function producing a 128-bit hash value.\nMD5 was designed to be used as a cryptographic hash function, but can be used as\na checksum to verify data integrity against unintentional corruption. However, MD5\ncan be reversed by a brute-force attack and suffers from extensive vulnerabilities.</p>","compliant":"","non-compliant":"<p><strong>For passwords</strong>, deliberately slow hash constructions such as scrypt, bcrypt and\nPBKDF2 should be used. Simple salted SHA2 is not good enough because, like most\ngeneral purpose hashes, it is fast.</p>\n<p><strong>For file integrity</strong>, the current best solution is SHA-2 (SHA-256). SHA-3 will also be\na good choice once it gets standardised.</p>","related-to":"","types":[2]},"relationships":{}},{"id":24,"type":"vulnerabilities","attributes":{"uuid":"af897c38-1833-454d-8cb2-400d97a71793","name":"Unsecured Data in CoreData","description":"<p>Core Data is often used by applications to store data to improve\napplication performance</p>","question":"Does this application store sensitive information in CoreData?","success-message":"This application does not store sensitive information in CoreData.","business-implication":"<p>Failure to use encryption routines may result in the database and its\nassociated data including user credentials getting compromised.</p>","intro":"<p>Core Data is used by the applications to store data which can be further\nused by the application at later stages. However, these databases don't\nhave any built-in support for encryption and hence, all the information\nis stored in plain-text format in these files. If an application stores\nuser credentials or some sensitive user specific data in this database\nthen it can be accessed by any third party.</p>","compliant":"<p>It is suggested to use custom encryption while storing data in Core\nData.</p>\n<p>EncryptedStore is known to work successfully on iOS versions 6.0 through\n9.3.4 to store CoreData in encrypted format</p>\n<p>If you wish to set a custom cache size and/or custom database URL:\ncreate an NSDictionary to set the options for your EncryptedStore,\nreplacing customPasscode, customCacheSize, and/or customDatabaseURL:</p>\n<pre><code>NSDictionary *options = @{ EncryptedStorePassphraseKey: (NSString *) customPasscode,\n                           EncryptedStoreCacheSize: (NSNumber *) customCacheSize,\n                           EncryptedStoreDatabaseLocation: (NSURL *) customDatabaseURL\n};\n</code></pre>\n<p>In your application delegate source file (i.e. AppDelegate.m) you should see</p>\n<pre><code>NSPersistentStoreCoordinator *coordinator = [self persistentStoreCoordinator];\n</code></pre>\n<p>If you created an NSDictionary with custom options, replace that line with</p>\n<pre><code>NSPersistentStoreCoordinator *coordinator = [EncryptedStore makeStoreWithOptions:options managedObjectModel:[self managedObjectModel]];\n</code></pre>\n<p>The project is available <a href=\"https://github.com/project-imas/encrypted-core-data\">here</a>.</p>","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":3,"type":"vulnerabilities","attributes":{"uuid":"133da64b-9091-40bd-a5fb-e5e9bc09a700","name":"Application Debugging","description":"<p>Debugging was enabled on the app which makes it easier for reverse\nengineers to hook a debugger to it. This allows dumping a stack trace\nand accessing debugging helper classes.</p>","question":"Does the application have debug enabled?","success-message":"Debug was found to be disabled.","business-implication":"<p>Application can be debugged and reverse engineers can debug and manipulate the\nruntime logic of the application.</p>","intro":"<p>Android allows the attribute <code>android:debuggable</code> to be set to true so\nthat the app can be debugged. By default this attribute is disabled,\ni.e., it is set to false, but it may be set to true to help with\ndebugging during development of the app. However, an app should never be\nreleased with this attribute set to true as it enables users to gain\naccess to details of the app that should be kept secure. With the\nattribute set to true, users can debug the app even without access to\nits source code.</p>","compliant":"<p>Ensure that the <code>android:debuggable</code> attribute is set to false before the\napp is released:</p>\n<pre><code>&lt;application\n    ...\n    android:debuggable=\"false\" &gt;\n    ...\n&lt;/application&gt;\n</code></pre>\n<p>Note that some development environments (including Eclipse/ADT and Ant)\nautomatically set <code>android:debuggable</code> to true for incremental or\ndebugging builds but set it to false for release builds.</p>","non-compliant":"<p>This non-compliant code example shows an app that has the\n<code>android:debuggable</code> attribute set to true being accessed to reveal\nsensitive data.</p>\n<pre><code>$ adb shell\nshell@android:/ $ run-as com.example.someapp sh\nshell@android:/data/data/com.example.someapp $ id\nuid=10060(app_60) gid=10060(app_60)\nshell@android:/data/data/com.example.someapp $ ls files/\nsecret_data.txt\nshell@android:/data/data/com.example.some $ cat files/secret_data.txt\npassword=GoogolPlex\naccount_number=31974286\n</code></pre>\n<p>Clearly, with the <code>android:debuggable</code> attribute set to true, sensitive\ndate related to the app can be revealed to any user.</p>","related-to":"","types":[1]},"relationships":{}},{"id":87,"type":"vulnerabilities","attributes":{"uuid":"11c8a12d-2798-4ab0-ab10-118fbd54825c","name":"Misconfigured AWS S3 Buckets","description":"<p>Since the bucket is misconfigured, any user with an AWS access key will be able to read or write\nto the bucket leading to loss of confidentiality and integrity.\nIn case the access keys are leaked, anyone with the keys can gain administrative\nprivileges over the bucket and it’s objects leading to compromise of the data.</p>","question":"Is the AWS S3 bucket misconfigured?","success-message":"No misconfigured AWS S3 buckets were found.","business-implication":"<p>Leaving third party cloud storage open or insecure may result in compromise of sensitive\ndata pertaining to the organization which leads to loss of confidentiality and integrity.</p>","intro":"<p>Amazon S3 is a web service offered by Amazon Web Services.\nIt provides web service interfaces to securely store,\nretrieve any amount of data in the cloud into the buckets in form of objects.\nAWS also gives programmatic way to upload, read, write objects\nin the bucket through the AWS API Key.\nFollowing are the common misconfigurations leading to security issues.</p>\n<ol>\n<li>The access key was unintentionally hardcoded or published</li>\n<li>The bucket permissions were misconfigured.</li>\n</ol>","compliant":"<p>It is also recommended to <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html\">set proper access control</a>\nto the buckets such that only the owner of the bucket is able to view/modify data in the buckets.\nIt is recommended to rotate the access keys, if the keys are leaked. For more information,\nclick <a href=\"http://docs.aws.amazon.com/config/latest/developerguide/s3-bucket-policy.html\">here.</a></p>","non-compliant":"<p>Buckets with misconfigured access control policies or exposed private keys</p>","related-to":"","types":[3]},"relationships":{}},{"id":31,"type":"vulnerabilities","attributes":{"uuid":"7eb33b43-a528-4b07-bbd2-0a61df2fdf3e","name":"PhoneGap Error URL Redirection Vulnerability","description":"<p>Android application which uses older version of PhoneGap is vulnerable\nto Error URL redirection to arbitrary website as defined by CVE-3500</p>","question":"Can the application allow remote attackers to perform Error URL redirection?","success-message":"The application is not vulnerable to error URL redirection vulnerability, or is not using PhoneGap.","business-implication":"<p>With the presence of this vulnerability, attackers may:</p>\n<ul>\n<li>Open and send data to arbitrary applications.</li>\n<li>Bypass the HTTP whitelist and connect to arbitrary servers.</li>\n<li>Change the start page via a crafted intent URL.</li>\n</ul>","intro":"<p>Cordova-based applications make use of a WebView in order to interact\nwith the user. This vulnerability uses the errorurl parameter which can\nbe passed via Intent extras (in CordovaActivity) by a malicious caller,\nbut it is not automatically loaded into a WebView on application load.\nThe errorurl will only be rendered by the WebView when a network request\nfails. This presents a vulnerability which can be exploited whereby a\nmalicious caller could launch the Activity.</p>","compliant":"<p>Upgrade Phonegap or Apache Cordova to the latest version.</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":37,"type":"vulnerabilities","attributes":{"uuid":"745df655-2ff7-433b-a699-7f4933b3be5c","name":"Connection to External Redis Server","description":"<p>Android applications which use Redis to communicate are vulnerable</p>","question":"Does the application communicate with an external Redis server?","success-message":"The application does not communicate with an external Redis server.","business-implication":"<p>The database and associated data including user credentials may get\ncompromised.</p>","intro":"<p>Redis framework should be used strictly in server to server\ncommunication. Using Redis in the client side compromises security\nbecause the credentials can be read in plain text.</p>","compliant":"<p>Remove Redis client completely. If any SDK uses this component, then\nplease remove the SDK itself</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":54,"type":"vulnerabilities","attributes":{"uuid":"b5eb32fc-b27f-4d5d-8aa8-cdfb0578e0d8","name":"UIWebView Exploits","description":"<p>UIWebView can be susceptible to client side Javascript injection. It can\nalso retain sensitive content in the memory as cache</p>","question":"Are there instances of UIWebView used in the app?","success-message":"UIWebView is not used in the app.","business-implication":"<p>UIWebView can be susceptible to client side Javascript injection if\ninputs are not properly validated. Since the code is injected on the\nclient side, it is possible to call native functions in the device and\nperform malicious actions. Currently there are no public APIs to disable\nJavascript in UIWebView.</p>\n<p>Furthermore, UIWebView may cache loaded data into the internal database.\nThis means that sensitive content remains in the memory even after it\nhas been closed.</p>","intro":"<p>iOS offers the UIWebView class to embed web content in the app. This is\noften used when a web application needs to be quickly ported to multiple\nmobile platforms without having to create a specific UI for each.</p>","compliant":"<p>When using UIWebView, make sure the data is loaded over HTTPS. Avoid\nusing it to load content that depends on user input. Validate the\ncontents of the URL by using <code>dataWithContentsOfURL</code> from NSData. Never\nuse loadRequest to render local file resource as this causes a universal\nCross-Site Scripting vulnerability. Instead, use <code>loadHTMLString:baseURL:</code>.\nFinally, disable caching when sensitive content is loaded.</p>","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":41,"type":"vulnerabilities","attributes":{"uuid":"572659fa-474a-4aca-b1c7-935e053b6e07","name":"Unprotected Exported Provider","description":"<p>The Android application exports a Content Provider for use by other\napplications, but does not properly restrict which applications can\nlaunch the component or access the data it contains.</p>","question":"Are any providers insecurely exported?","success-message":"The application does not export any providers insecurely.","business-implication":"<p>Attackers may use non-privileged services to intercept and track the\nuser's activity. Furthermore, it may be possible to insert data that may\nmaliciously modify the behaviour of the application.</p>","intro":"<p>Content Providers are databases addressable by their application-defined\nURIs. They are used for both persistent internal data storage and as a\nmechanism for sharing information between applications.</p>\n<p>Exported Content Provider can be called by any other malicious\napplication installed in the phone to get the data via Content Provider\nleading to XAS (Cross Application Scripting)</p>","compliant":"<p>If you are using a Content Provider for sharing data between only your\nown apps, it is preferable to use the <code>android:protectionLevel</code> attribute\nset to \"signature\" protection. Signature permissions do not require user\nconfirmation, so they provide a better user experience and more\ncontrolled access to the content provider data when the apps accessing\nthe data are signed with the same key</p>\n<p>If the Content Provider is called within itself, then don't export it or\nuse Intent-Filter for custom permissions</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":78,"type":"vulnerabilities","attributes":{"uuid":"16594dce-5a95-4c8b-881e-b99eb70df16e","name":"Response Body Contains Non-HTTPS Links","description":"<p>One or more of the API responses were found to contain URL links that do not employ HTTPS,\nie. that use regular, cleartext HTTP.</p>","question":"Does any response body contain non-https links?","success-message":"Response body does not contain non-https links.","business-implication":"","intro":"<p>When a response is served over HTTPS, the connection with the web server\nis encrypted with TLS and is therefore safeguarded from sniffers and man-in-the-middle\nattacks. If the HTTPS response includes links to content that is\nretrieved through regular, cleartext HTTP, then the connection is only partially\nencrypted; the unencrypted content is accessible to sniffers and can be modified\nby man-in-the-middle attackers, so the connection is not safeguarded.</p>","compliant":"","non-compliant":"","related-to":"","types":[4]},"relationships":{}},{"id":79,"type":"vulnerabilities","attributes":{"uuid":"0134c7b8-53a1-41d7-9084-6ffefed4c736","name":"PhoneGap Debug Logging","description":"<p>When using PhoneGap, disable debug logs before shipping the app.</p>","question":"Is PhoneGap debug logging enabled?","success-message":"PhoneGap debug logging was found to be disabled or PhoneGap is not being used.","business-implication":"<p>If a PhoneGap app is shipped with debug mode switched on, it can allow anyone\nto attach a debugger and change the logical flow of the app. Sensitive logs get\nleaked which can be used to determine the URL endpoints of the application.</p>","intro":"<p>If a PhoneGap app is shipped with debug mode switched on, it can allow anyone to\nattach a debugger and change the logical flow of the app. Sensitive logs get\nleaked which can be used to determine the URL endpoints of the application.</p>","compliant":"<p>If using Cordova, please publish the plugin using</p>\n<pre><code>cordova build ios --release\n</code></pre>\n<p>If using PhoneGap, please turn of all <code>console.logs()</code> and other logging\ncode before publishing.</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":44,"type":"vulnerabilities","attributes":{"uuid":"fb8fe247-224d-4204-b802-0181e7511db0","name":"Non-signature Protected Exported Services","description":"<p>The Android application exports Service for use by other applications,\nbut does not properly restrict which applications can launch the\ncomponent or access the data it containscustom signature defined by\n<code>android:protectionLevel</code>.</p>","question":"Are any services exported without a ProtectionLevel?","success-message":"The application does not export any service without a ProtectionLevel.","business-implication":"<p>Attackers may use non-privileged services to intercept and track the\nuser's activity. Furthermore, it may be possible to insert data that may\nmaliciously modify the behaviour of the application.</p>","intro":"<p>Services run in the background and do not interact with the user.\nDownloading a file or decompressing an archive are examples of\noperations that may take place in a Service. Other components can bind\nto a Service, which lets the binder invoke methods that are declared in\nthe target Service's interface. Intents are used to start and bind to\nServices</p>\n<p>Exported Unprotected Services can be called by any other application\ninstalled in the phone to bind into the service leading to XAS (Cross\nApplication Scripting)</p>","compliant":"<p>If you are using a Service for sharing data between only your own apps,\nit is preferable to use the <code>android:protectionLevel</code> attribute set to\n<code>signature</code> protection. Signature permissions do not require user\nconfirmation, so they provide a better user experience and more\ncontrolled access to the Service when the apps accessing the data are\nsigned with the same key</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":45,"type":"vulnerabilities","attributes":{"uuid":"a939c39e-0967-452e-ac12-a45fceb6db45","name":"Non-signature Protected Exported Providers","description":"<p>The Android application exports Content Provider for use by other\napplications, but does not properly restrict which applications can\nlaunch the component or access the data it containscustom signature\ndefined by <code>android:protectionLevel</code>.</p>","question":"Are any providers exported without a ProtectionLevel?","success-message":"The application does not export any provider without a ProtectionLevel.","business-implication":"<p>Attackers may use non-privileged services to intercept and track the\nuser's activity. Furthermore, it may be possible to insert data that may\nmaliciously modify the behaviour of the application.</p>","intro":"<p>Content Providers are databases addressable by their application-defined\nURIs. They are used for both persistent internal data storage and as a\nmechanism for sharing information between applications.</p>\n<p>Exported and Unprotected Content Provider can be called by any other\nmalicious application installed in the phone to get the data via Content\nProvider leading to XAS (Cross Application Scripting)</p>","compliant":"<p>If you are using a Content Provider for sharing data between only your\nown apps, it is preferable to use the <code>android:protectionLevel</code> attribute\nset to <code>signature</code> protection. Signature permissions do not require user\nconfirmation, so they provide a better user experience and more\ncontrolled access to the content provider data when the apps accessing\nthe data are signed with the same key</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":99,"type":"vulnerabilities","attributes":{"uuid":"c953ca1e-8809-4ff8-bc60-2d1f64d5412f","name":"Improper Session Management","description":"<p>If the application does not manage sessions securely, an attacker may be able to remotely compromise accounts, reuse the tokens to make unauthorised API calls on behalf of other users.</p>","question":"Does the application uses proper Session Management?","success-message":"The application does uses proper Session Management","business-implication":"","intro":"<p>Once the user successfully logs in to the application with credentials, access tokens are generated by the server and assigned to the user. Thereafter, access tokens are used to identify the users and maintain the session until they logout. It is critical to generate, assign, invalidate access tokens securely since they provide a way to authenticate and authorize to the server resources post login. Failing to do so may result in loss of confidentiality and integrity.</p>","compliant":"<p>The application server should generate access tokens which are cryptographically strong, dynamic and expires as soon as the user logs off or is inactive for a particular amount of time</p>","non-compliant":"<p>1) The application generates an access token based on the username, ID or cryptographically insecure algorithm which can be easily enumerated.</p>\n<pre><code>POST /api/sessions HTTP/1.1\nHost: site.com\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\nAccept-Language: en-us\nAccess-Token: testuser\nConnection: close\nAccept: */*\nUser-Agent: Chrome/5.5.1 (iPhone/10.0.2; iPhone OS; en_IN;)\nContent-Length: 40\n\nPOST /api/sessions HTTP/1.1\nHost: site.com\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\nAccept-Language: en-us\nAccess-Token: 560192\nConnection: close\nAccept: */*\nUser-Agent: Chrome/5.5.1 (iPhone/10.0.2; iPhone OS; en_IN;)\nContent-Length: 40\n\nPOST /api/sessions HTTP/1.1\nHost: site.com\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\nAccept-Language: en-us\nAccess-Token: 5d9c68c6c50ed3d02a2fcf54f63993b6\nConnection: close\nAccept: */*\nUser-Agent: Chrome/5.5.1 (iPhone/10.0.2; iPhone OS; en_IN;)\nContent-Length: 40\n</code></pre>\n<p>2) The application does not invalidate the session token at the backend. So, even after the use logs out, it is possible to make successful requests using the expired token to access the resources of the user.</p>\n<p>3) In case of critical functionalities, the application should reject if the requests are replayed. For example, if a request is made to the server to recharge or pay the amount, on repeating the same request, the server should reject the replayed request.</p>\n<p>4) Session tokens does not have an expiry and they are valid for an indefinite time.</p>","related-to":"","types":[3]},"relationships":{}},{"id":103,"type":"vulnerabilities","attributes":{"uuid":"e3dd9748-ea2a-4464-95bc-b8ffef01059a","name":"Stack Trace Enabled","description":"<p>Stack Trace by themselves are not vulnerabilities, but reveal information which can be leveraged by an attacker. Attackers try to get this information by fuzzing and tampering the input data.</p>","question":"Does the application leaks out sensitive information via Stacktrace?","success-message":"The application does not leak sensitive information via stacktrace","business-implication":"","intro":"<p>Application responding with stack trace information are useful to attackers and providing debugging information instead of a generic error response page is considered a bad practice. For instance, it might contain information about internal working of the application.</p>\n<p>An attacker can gain information such as version of software, filepath structure of the server, usernames, information about the exception caused, source code etc.</p>","compliant":"<p>It is recommended to use custom error pages and redirect the user to the same whenever an error is occurred.\nApply following changes on your web.config file to prevent information leakage by applying custom error pages.</p>\n<pre><code>&lt;System.Web&gt;\n    &lt;customErrors mode=\"On\" defaultRedirect=\"~/error/GeneralError.aspx\"&gt;\n        &lt;error statusCode=\"403\" redirect=\"~/error/Forbidden.aspx\" /&gt;\n        &lt;error statusCode=\"404\" redirect=\"~/error/PageNotFound.aspx\" /&gt;\n        &lt;error statusCode=\"500\" redirect=\"~/error/InternalError.aspx\" /&gt;\n    &lt;/customErrors&gt;\n&lt;/System.Web&gt;\n</code></pre>","non-compliant":"<p>Displaying information with stack trace enabled,</p>\n<pre><code>Exception in thread \"main\" java.lang.NullPointerException\n        at com.example.myproject.Book.getTitle(Book.java:16)\n        at com.example.myproject.Author.getBookTitles(Author.java:25)\n\nError: Something unexpected has occurred.\n    at main (app.js:9:15)\n    at Object. (app.js:17:1)\n    at Module._compile (module.js:460:26)\n</code></pre>","related-to":"<p><a href=\"https://www.owasp.org/index.php/Testing_for_Stack_Traces_(OTG-ERR-002)\">OWASP Guide for Stacktrace</a></p>","types":[3]},"relationships":{}},{"id":80,"type":"vulnerabilities","attributes":{"uuid":"648bd1d3-0e1d-4ab5-a0b5-249f32ecf038","name":"PhoneGap Whitelist Open Access","description":"<p>The PhoneGap whitelist was found to be allowing open access to all sites.\nDo not use wildcards (*) alone in whitelists, use fully qualified hostnames.</p>","question":"Does PhoneGap whitelist allow open access or is missing?","success-message":"PhoneGap whitelist does not allow open acces.s or PhoneGap is not used","business-implication":"<p>An attacker can bypass the whitelisting mechanism and initiate connections to\nunauthorized remote servers. This could aid in further attacks.</p>","intro":"<p>Domain whitelisting is a security model that controls access to external domains\nover which the app has no control. The default security policy allows access to\nany site. Before moving your application to production, you should formulate\na whitelist and allow access to specific network domains and subdomains.</p>\n<p>Application Transport Security (ATS) is a new feature in iOS 9 that acts as\na whitelist for the app. All the <code>&lt;access&gt;</code> and <code>&lt;allow-navigation&gt;</code> tags\nautomatically get converted to the appropriate ATS directives.</p>","compliant":"","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":105,"type":"vulnerabilities","attributes":{"uuid":"4cf2422d-d0ef-4094-a181-2abd47890ef9","name":"HTTP TRACE method is enabled","description":"<p>HTTP TRACE method is enabled on this web server.\nIn the presence of other cross-domain vulnerabilities in web browsers,\nsensitive header information could be read from any domains that support\nthe HTTP TRACE method.</p>","question":"Does the backend server have TRACE method enabled?","success-message":"The application backend server doesn't have TRACE method enabled","business-implication":"","intro":"<p>The HTTP TRACE method is normally used to return the full HTTP request back to\nthe requesting client for proxy-debugging purposes.\nAn attacker can create a webpage using XMLHTTP, ActiveX, or XMLDOM to\ncause a client to issue a TRACE request and capture the client's cookies.\nThis effectively results in a Cross-Site Scripting attack.</p>","compliant":"<p>Disable the TRACE method on your Webserver.</p>\n<p>Following are the configurations you can do depending on what kind of server is used:</p>\n<h1>Apache</h1>\n<p>To disable these methods, add the following lines for each virtual host in your configuration file :</p>\n<pre><code>RewriteEngine on\nRewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK)\nRewriteRule .* – [F]\n</code></pre>\n<p>Alternatively, note that Apache versions 1.3.34, 2.0.55, and 2.2 support disabling the TRACE method natively via the ‘TraceEnable’ directive.</p>\n<h1>Microsoft IIS</h1>\n<p>The TRACK method can be added to Microsoft’s URLScan DenyVerbs section. It should not be in the AllowVerbs section in the urlscan.ini file.</p>\n<p>Use the URL Scan Tool to deny HTTP TRACE requests or to permit only the methods needed to meet site requirements and policy. The default configurations of Urlscan 2.5 (both baseline and SRP) only permit GET and HEAD methods.</p>\n<h1>NGINX</h1>\n<p>The majority of web sites only require the GET, HEAD &amp; POST HTTP methods. Enabling the TRACE or DELETE method can pose a risk to your server leaving it vulnerable to a Cross-Site Tracking attack.</p>\n<p>Modify the default.conf file and add the following under “server block” to mitigate the risk of a Cross-Site Tracking attack.</p>\n<pre><code>if ($request_method !~ ^(GET|HEAD|POST)$ )\n{\n    return 405;\n}\n</code></pre>\n<p>Modifying the code will return a “405 – Not Allowed” if anyone attempts to use the DELETE, TRACE, PUT or OPTIONS method.</p>","non-compliant":"","related-to":"<ol>\n<li><a href=\"https://owasp.org/www-community/attacks/Cross_Site_Tracing\">OWASP Cross Site Tracing</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2005-3398\">CVE-2005-3398</a></li>\n</ol>","types":[4]},"relationships":{}},{"id":86,"type":"vulnerabilities","attributes":{"uuid":"a135545a-2cad-4189-b4a1-cbf92e5c7fc2","name":"Do not allow WebView to access sensitive local resource through file scheme","description":"<p>Allowing WebView to access sensitive resources may result in information leaks.</p>","question":"Are webview file-scheme being used and vulnerable?","success-message":"Webview file-scheme is not being used or vulnerable","business-implication":"<p>In the event that a user (anonymous or verified) is able to execute\nover-privileged functionality, the business may experience:</p>\n<ul>\n<li>Reputational Damage</li>\n<li>Fraud</li>\n<li>Information Theft</li>\n</ul>","intro":"<p>The WebView class displays web pages as part of an activity layout.\nThe behavior of a WebView  object can be customized using the WebSettings\nobject, which can be obtained from WebView.getSettings().</p>\n<p>Major security concerns for WebView are about the\n<code>setJavaScriptEnabled()</code>, <code>setPluginState()</code>,\nand <code>setAllowFileAccess()</code> methods.</p>\n<p>When an activity has WebView embedded to display web pages, any application\ncan create and send an Intent object with a given URI to the activity to\nrequest that a web page be displayed.</p>\n<p>WebView can recognize a variety of schemes, including the <code>file:scheme</code>.\nA malicious application may create and store a crafted content on its\nlocal storage area, make it accessible with MODE_WORLD_READABLE permission,\nand send the URI (using the <code>file:scheme</code>) of this content to a target activity.</p>","compliant":"<p>Any URI received via an intent from outside a trust-boundary should be\nvalidated before rendering it with WebView. For example,\nthe following code checks an received URI and uses it only when it\nis not a <code>file:scheme</code> URI.</p>\n<pre><code>String intentUrl = getIntent().getStringExtra(\"url\");\nString localUrl = \"about:blank\";\nif (!intentUrl.startsWith(\"file:\")) {\n    loadUrl = intentUrl;\n}\n</code></pre>","non-compliant":"<p>The following noncompliant code example uses the WebView component with\nJavaScript enabled and processes any URI passed through\nIntent without any validation:</p>\n<pre><code>public class MyBrowser extends Activity {\n    @override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n\n        WebView webView = (WebView) findViewById(R.id.webview);\n\n        // turn on javascript\n        WebSettings settings = webView.getSettings();\n        settings.setJavaScriptEnabled(true);\n\n        String turl = getIntent().getStringExtra(\"URL\");\n        webView.loadUrl(turl);\n    }\n}\n</code></pre>\n<p>This code shows how the vulnerability can be exploited:</p>\n<pre><code>// Malicious application prepares some crafted HTML file,\n// places it on a local storage, makes accessible from\n// other applications. The following code sends an\n// intent to a target application (jp.vulnerable.android.app)\n// to make it access and process the malicious HTML file.\n\nString pkg = \"jp.vulnerable.android.app\";\nString cls = pkg + \".DummyLauncherActivity\";\nString uri = \"file:///[crafted HTML file]\";\nIntent intent = new Intent();\nintent.setClassName(pkg, cls);\nintent.putExtra(\"url\", uri);\nthis.startActivity(intent);\n</code></pre>","related-to":"<ul>\n<li><a href=\"https://jvn.jp/en/jp/JVN59652356/\">JVN#59652356</a> Cybozu KUNAI for Android vulnerable in the WebView class</li>\n<li><a href=\"https://jvn.jp/en/jp/JVN99813183/\">JVN#99813183</a> Galapagos Browser vulnerable in the WebView class</li>\n<li><a href=\"https://jvn.jp/en/jp/JVN79301570/\">JVN#79301570</a> Angel Browser vulnerable in the WebView class</li>\n<li><a href=\"https://jvn.jp/en/jp/JVN77393797/\">JVN#77393797</a> Cybozu Live for Android vulnerable in the WebView class</li>\n<li><a href=\"https://jvn.jp/en/jp/JVN03015214/\">JVN#03015214</a> KUNAI Browser for Remote Service beta vulnerable in the WebView class</li>\n<li><a href=\"https://jvn.jp/en/jp/JVN46088915/\">JVN#46088915</a> Yahoo! Browser vulnerable in the WebView class</li>\n</ul>","types":[1]},"relationships":{}},{"id":7,"type":"vulnerabilities","attributes":{"uuid":"13197cae-788e-4549-b8f8-94e0ad028d4f","name":"Insecure SSLSocketFactories","description":"<p>SSL Implementations are not proper in this application</p>","question":"Does the application have a probable SSL error in implementation?","success-message":"No implementation errors were found.","business-implication":"<p>If proper implementation of SSL is not used, sensitive data may leak\nfrom the vulnerable SSL communication channel.</p>","intro":"<p>Android SDK 4.0 and later offers packages to implement capabilities to\nestablish network connections. For example, by using <code>java.net</code>\n<code>javax.net</code> <code>android.net</code> <code>org.apache.http</code> a developer can create server\nsockets or HTTP connection. <code>org.webkit</code> offers functions necessary to\nimplement web browsing capabilities.</p>\n<p>A developer has the freedom to customize their SSL implementation. The\ndeveloper should properly use SSL as appropriate to the intent of the\napp and the environment the apps are used in.</p>\n<p>On Android, using <code>HttpURLConnection</code> is recommended for HTTP client\nimplementation.</p>","compliant":"<p>The compliant solution may vary, depending on the actual implementation.\nFor examples of secure implementation such as using a self-signed server\ncertificate, please refer to <a href=\"http://www.jssec.org/dl/android_securecoding.pdf\">Android Application Secure Design/Secure\nCoding Guidebook</a>,\nSection 5.4 Communicate by HTTPS.</p>","non-compliant":"<p>The following code implements a custom MySSLSocketFactory class that\ninherits <code>javax.net.ssl.SSLContext</code>:</p>\n<pre><code>public class InsecureSocketFactory extends SSLSocketFactory {\n    protected SSLSocketFactory _factory;\n    public InsecureSocketFactory() {\n        try {\n            SSLContext ctx = SSLContext.getInstance(\"SSL\");\n            ctx.init(null, new TrustManager[] { new InsecureTrustManager() }, null);\n            _factory = ctx.getSocketFactory();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n</code></pre>\n<p>In the example above, the <code>InsecureSocketFactory</code> accepts all certificates\nsilently, which even bypasses the check for trustmanagers</p>","related-to":"<ul>\n<li><a href=\"http://jvn.jp/en/jp/JVN39218538/\">JVN#39218538</a> Pizza Hut Japan\n  Official Order App for Android has a problem whereby it fails to\n  verify SSL server certificates.</li>\n<li><a href=\"http://jvn.jp/en/jp/JVN75084836/\">JVN#75084836</a> Yome Collection\n  for Android has a problem with management of IMEI.</li>\n<li><a href=\"http://jvn.jp/en/jp/JVN68156832/\">JVN#68156832</a> Yafuoku! contains\n  an issue where it fails to verify SSL server certificates</li>\n</ul>","types":[1]},"relationships":{}},{"id":9,"type":"vulnerabilities","attributes":{"uuid":"d60e1535-2ef6-44f2-8f67-c8496b338a3d","name":"App Extending WebViewClient","description":"<p>The default handling of WebViewClient should handle the\nonReceivedSSLError properly, which might break certificate validation</p>","question":"Does the application use WebViewClients correctly and handle the onReceivedSSLError method?","success-message":"Application seems to be handling WebViewClient correctly, or has no implementation of WebViewClient.","business-implication":"<p>If proper implementation of SSL is not used, sensitive data may leak\nfrom the vulnerable SSL communication channel.</p>","intro":"<p>WebViews can introduce a number of security concerns and should be\nimplemented carefully. In particular, many vulnerabilities have been\ndiscovered that exploit the use of the addJavscriptInterface API and\nbypassing onReceivedSslError check.</p>\n<p>WebView does support SSL/TLS, however, the blank screen is an indication\nthat the WebView does not believe that the certificate is valid. This\nmay happen with a certificate that is self-signed or a from a root auth\nthat is not set up in android. However if that check is bypassed, then\nit removes all security from SSL.</p>","compliant":"<p>This can be fixed by using the onReceivedSslError to stop or notify the\nuser and the application.</p>\n<pre><code>public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error)  {\n    //STOP OR ALERT THE USER\n}\n</code></pre>","non-compliant":"<p>The following code shows how onReceivedSslError was used to bypass the\ncheck in WebViewClient:</p>\n<pre><code>public class SSLAcceptingWebViewClient extends CordovaWebViewClient {\n    public SSLAcceptingWebViewClient(DroidGap ctx) {\n        super(ctx);\n    }\n    @Override\n    public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n        //proceed or pass\n        handler.proceed(); // Ignore SSL certificate errors\n    }\n\n}\n</code></pre>","related-to":"<ul>\n<li><a href=\"http://jvn.jp/en/jp/JVN39218538/\">JVN#39218538</a> Pizza Hut Japan\n  Official Order App for Android has a problem whereby it fails to\n  verify SSL server certificates.</li>\n<li><a href=\"http://jvn.jp/en/jp/JVN75084836/\">JVN#75084836</a> Yome Collection\n  for Android has a problem with management of IMEI.</li>\n<li><a href=\"http://jvn.jp/en/jp/JVN68156832/\">JVN#68156832</a> Yafuoku! contains\n  an issue where it fails to verify SSL server certificates</li>\n</ul>","types":[1]},"relationships":{}},{"id":58,"type":"vulnerabilities","attributes":{"uuid":"e0d5d414-e598-4824-a4ee-6cbc7b0e5993","name":"One Time Password Bypass","description":"<p>We used following approaches to check if the OTP could be bypassed:</p>\n<ul>\n<li>Check if the generated OTP can be re-generated by breaking into the logic of how an OTP is generated</li>\n<li>Check if the OTP challenge is present in the client side, which includes in response body or stored in filesystem layer or in the memory layer</li>\n<li>Check if an older OTP can be re-used again in the future transaction</li>\n<li>Check the randomness of the OTP</li>\n<li>Check if the OTP could be brute-forced by requesting wrong OTP until a correct OTP can be verified</li>\n<li>Check the expiry time of a generated OTP</li>\n<li>Check the number of wrong attempts accepted to verify an OTP</li>\n</ul>","question":"Is the application vulnerable to One Time Password Bypass?","success-message":"Application is not vulnerable to One Time Password Bypass.","business-implication":"","intro":"<p>A one-time password (OTP) is a password that is valid for only one login session or transaction.\nOTPs avoid a number of shortcomings that are associated with traditional (static) password-based authentication;\na number of implementations also incorporate two factor authentication by ensuring that the one-time password\nrequires access to something a person has (such as a small keyring fob device with the OTP calculator built\ninto it, or a smartcard or specific cellphone) as well as something a person knows (such as a PIN).</p>","compliant":"","non-compliant":"","related-to":"","types":[3]},"relationships":{}},{"id":10,"type":"vulnerabilities","attributes":{"uuid":"37d8e418-dd40-443d-8e6f-af1f8236830a","name":"Unused Permissions","description":"<p>Application seems to be using extra permissions which are not really\nneeded</p>","question":"Is the application over-privileged?","success-message":"Application seems to have just the essential set of permissions required.","business-implication":"<p>Users may not download your app when presented with a long list of\npermissions. Imagine a flashlight app requesting access to SD card,\ncamera, contacts, SMS and more. This is an invitation to poor ratings\nand reviews on App Stores. This also breaks compliance standards.</p>","intro":"<p>An app might request a user for certain permissions, like access to SD\ncard, contacts, social profiles, etc. which has not actually been\ninvoked while the scan was running. We list out all these permissions so\nthat you can optimize your app and follow proper compliance checks.</p>","compliant":"<p>Do not request for permissions beyond what your app actually needs</p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":59,"type":"vulnerabilities","attributes":{"uuid":"60248b2a-d352-41e7-b20f-4ee9c64cc9a9","name":"One Time Password Bypass","description":"<p>We used following approaches to check if the OTP could be bypassed:</p>\n<ul>\n<li>Check if the generated OTP can be re-generated by breaking into the logic of how an OTP is generated</li>\n<li>Check if the OTP challenge is present in the client side, which includes in response body or stored in filesystem layer or in the memory layer</li>\n<li>Check if an older OTP can be re-used again in the future transaction</li>\n<li>Check the randomness of the OTP</li>\n<li>Check if the OTP could be brute-forced by requesting wrong OTP until a correct OTP can be verified</li>\n<li>Check the expiry time of a generated OTP</li>\n<li>Check the number of wrong attempts accepted to verify an OTP</li>\n</ul>","question":"Is the application vulnerable to One Time Password Bypass?","success-message":"Application is not vulnerable to One Time Password Bypass.","business-implication":"","intro":"<p>A one-time password (OTP) is a password that is valid for only one login session or transaction.\nOTPs avoid a number of shortcomings that are associated with traditional (static) password-based authentication;\na number of implementations also incorporate two factor authentication by ensuring that the one-time password\nrequires access to something a person has (such as a small keyring fob device with the OTP calculator built\ninto it, or a smartcard or specific cellphone) as well as something a person knows (such as a PIN).</p>","compliant":"","non-compliant":"","related-to":"","types":[3]},"relationships":{}},{"id":63,"type":"vulnerabilities","attributes":{"uuid":"ffa7218b-010d-4429-b17b-0cb28ac9bd3c","name":"Short HMAC Keys","description":"<p>The key for HMAC can be of any length. However, less than 32 bytes is strongly discouraged\nas it would decrease the security strength of the function. Keys longer than 64 bytes are acceptable\nbut the extra length would not significantly increase the function strength.\nA longer key may be advisable if the randomness of the key is considered weak.</p>","question":"Are keys used to calculate HMAC too short?","success-message":"Keys used to calculate HMAC, if any, are of recommended length.","business-implication":"<p>Loss of HMAC security may compromise the integrity and authenticity of the data maintained.</p>","intro":"<p>An HMAC (keyed-hash message authentication code) is a type of message authentication\ncode used to simultaneously verify both the data integrity and the authentication of a message.\nAny cryptographic hash function, such as MD5 or SHA-1, may be used in the calculation of an HMAC;\nthe resulting MAC algorithm is termed HMAC-MD5 or HMAC-SHA-1 accordingly.\nThe cryptographic strength of the HMAC depends upon the cryptographic strength of the underlying\nhash function, the size of its hash output, and on the size and quality of the key.</p>","compliant":"","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":93,"type":"vulnerabilities","attributes":{"uuid":"8b346b78-ac2f-4861-8954-062427287ff4","name":"External data in raw SQL queries","description":"<p>Inclusion of input into raw SQL queries can potentially lead to a local SQL injection vulnerability in the mobile application.</p>\n<p>The correct approach is to use prepared SQL statements beyond user's control.</p>","question":"Does the application uses user-input into raw SQL query?","success-message":"The application does not seem to use raw SQL query.","business-implication":"","intro":"<p>Sql injection is possible because we use quotation marks to delimit strings and also to be parts of strings, making it impossible to interpret them sometimes. If we had delimiters that could not be used in string data, sql injection never would have happened. Solving the delimiter problem eliminates the sql injection problem. Structure queries do that.</p>\n<p>Prepared statements are resilient against SQL injection, because parameter values, which are transmitted later using a different protocol, need not be correctly escaped. If the original statement template is not derived from external input, SQL injection cannot occur.</p>","compliant":"<p>Below is an example of how to use Prepeared SQL statement:</p>\n<pre><code>PreparedStatement pstmt = con.prepareStatement(\"UPDATE EMPLOYEES SET SALARY = ? WHERE ID = ?\");\npstmt.setBigDecimal(1, 153833.00)\npstmt.setInt(2, 110592)\n</code></pre>","non-compliant":"<p>Example of an insecure code:</p>\n<pre><code>db.rawQuery(\"SELECT username FROM users_table WHERE id = '\"+ input_id +\"'\");\ndb.execSQL(\"SELECT username FROM users_table WHERE id = '\"+ input_id +\"'\");\n</code></pre>","related-to":"<ul>\n<li><a href=\"https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html\">Android SQLite Docs</a></li>\n<li><a href=\"https://developer.android.com/reference/java/sql/PreparedStatement.html\">Android PrepearedStatement docs</a></li>\n</ul>","types":[1]},"relationships":{}},{"id":84,"type":"vulnerabilities","attributes":{"uuid":"9568a436-8c73-47cb-82f4-52e3f0afcb02","name":"Surreptitious Sharing on Android","description":"<p>This activity receives <code>android.intent.action.SEND</code> or\n<code>android.intent.action.SEND_MULTIPLE</code> intents and accepts a file-scheme as data\nURI <code>(file://...)</code> as parameter. It may be vulnerable to surreptitious sharing:\na malicious application may set a URI referencing a private file of this\napplication, and if no proper sanity checking is done this might be used\nto obtain the referenced file.</p>","question":"Is your application vulnerable to Surreptitious Sharing?","success-message":"Surreptitious Sharing might not be in use in this application","business-implication":"<p>In the event that a user (anonymous or verified) is able to execute\nover-privileged functionality, the business may experience:</p>\n<ul>\n<li>Reputational Damage</li>\n<li>Fraud</li>\n<li>Information Theft</li>\n</ul>","intro":"<p>Many email and messaging apps on Android utilize the Intent API for sending\nfiles shared from other apps such as Android’s gallery. These Intents are\nstandardized for sending and receiving content. Instead of sending entire\nfiles, such as videos, via this API, only URIs are exchanged pointing to the\nactual storage position. A vulnerability in this Intent API, which is\npresent in many published communication apps allowing privilege escalation\nand data leakage.</p>\n<p>The main issue lies in the fact that apps cannot only access their private data\ndirectories using <code>Context.openFileOutput(String name, int mode)</code>, but also\nusing <em>file</em> URIs. While these URIs are normally used to access files on the\nSD card, via <code>file:///sdcard/paper.pdf</code> for example, they can also point to\nprivate files, e.g., <code>file:///data/data/com.example.app/files/paper.pdf</code>.\nIf an app registers Intent Filters to support Android’s sharing API or defines\ncustom Intents accepting URIs, they are potentially accepting <em>file</em> URIs that\ncould also point to their own private files. For apps facilitating\ncommunication, like email or messaging apps, this leads to what we call\n<em>Surreptitious Sharing</em>. Investigating the AOSP source code reveals that\nsupport for <em>file</em> URIs using <code>Context.openFileOutput(String name, int mode)</code>\n(similar checks are present in <code>openAssetFileDescriptor</code>) was planned to be\nremoved (see inline comments in <code>openInputStream</code> method in\n[ContentResolver]\n(https://goo.gl/Qyx84j)).</p>","compliant":"<p>We provided a fix for app developers that checks with <em>fstat</em> if a file is\nowned by the receiving app only and then prevents the opening of it.\nDue to the requirement of using <em>fstat</em> our Java fix was only available for\nAndroid &gt;= 5. We strongly recommend to use this library to fix the\nissue in your app:</p>\n<p><a href=\"https://goo.gl/Gsz1bh\">https://github.com/appknox/SafeContentResolver</a>.</p>","non-compliant":"<p>This example is intended to surreptitiously share IMAP passwords of K-9 Mail\nwith an attacker. Please note that K-9 Mail serves only as an example,\nthe issue has already been fixed in the current release and was present\nin many more apps</p>\n<p>The code required to execute this attack follows:</p>\n<pre><code>Intent i = new Intent();\ni.setComponent(new ComponentName(\"com.fsck.k9\", \"com.fsck.k9.activity.MessageCompose\"));\ni.setAction(Intent.ACTION_SEND); i.setType(\"text/plain\");\nUri uri = Uri.parse(\"file:///data/data/com.fsck.k9/databases/preferences_storage\");\ni.putExtra(Intent.EXTRA_STREAM, uri);\ni.putExtra(Intent.EXTRA_TEXT, \"Hello World\");\ni.putExtra(Intent.EXTRA_EMAIL, new String[]{\"support@company.com\"});\ni.putExtra(Intent.EXTRA_TEXT, \"Dear support team,...\");\ni.putExtra(Intent.EXTRA_SUBJECT, \"Bug Report\");\n</code></pre>\n<p>This can be reproduced by connecting to a Android device via <code>adb shell</code> and\nthen observing the output of <code>dmesg | grep avc</code>.</p>","related-to":"","types":[1]},"relationships":{}},{"id":69,"type":"vulnerabilities","attributes":{"uuid":"9d8c8671-dffa-4dd8-8d29-8e2091e5fcbb","name":"JSON Depth Overflow in HTTP Requests","description":"<p>The JSON parser used by the API may be vulnerable to depth overflow issues</p>","question":"Are there JSON depth overflows in HTTP requests?","success-message":"No JSON depth overflows were found in HTTP request.","business-implication":"","intro":"<p>Altough JSON is intended as a data serialization format, its design as a\nnon-strict subset of the JavaScript scripting language poses several security\nconcerns, which are centered on the use of a JavaScript interpreter to execute\nJSON text dynamically as embedded JavaScript. This easy and popular but risky\ntechnique exploits JSON's compatibility with the JavaScript <code>eval()</code> function.\nIt is possible that the JSON parser will reach depth limit and crash,\nresulting in a successful overflow of the JSON parsers depth limit, leading\nto a DoS vulnerability.</p>","compliant":"","non-compliant":"","related-to":"","types":[4]},"relationships":{}},{"id":108,"type":"vulnerabilities","attributes":{"uuid":"352a575f-d801-40b0-b44d-e900e8f9f873","name":"TLS Protocol Downgrade Attack","description":"<p>To work with legacy servers, many TLS clients implement a downgrade path,\nin a first handshake attempt, offer the highest protocol version supported by\nthe client; if this handshake fails, then retry (possibly repeatedly) with\nearlier protocol versions.</p>","question":"Is the backend server vulnerable to TLS Protocol Downgrade Attack?","success-message":"The the host is not vulnerable to TLS Protocol Downgrade Attack","business-implication":"","intro":"<p>Typically, modern TLS servers support old protocol versions and weak\ncryptographic algorithms for backward compatibility with\nolder client and servers. One of the simplest and most reliable\nmitigation for downgrade attacks which can be easily applied to modern\nTLS implementations is just disabling insecure protocol versions and algorithms.\nBut this may cost too much because of compatibility issues.</p>","compliant":"<p>To mitigate the Protocol Downgrade attack, one have to completely\ndisable SSL 3.0 on the server side and server implementation of\nTLS_FALLBACK_SCSV will make downgrade attacks impossible.</p>","non-compliant":"","related-to":"<ol>\n<li><a href=\"https://en.wikipedia.org/wiki/POODLE\">POODLE Attack</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc7507\">RFC 7507 - TLS Fallback Signaling Cipher Suite</a></li>\n<li><a href=\"https://wiki.openssl.org/index.php/SSL_MODE_SEND_FALLBACK_SCSV\">SSL MODE SEND FALLBACK SCSV</a></li>\n</ol>","types":[4]},"relationships":{}},{"id":112,"type":"vulnerabilities","attributes":{"uuid":"b1eb0513-66ac-4978-b2b4-0b1140bd83e8","name":"SSL/TLS Renegotiation Vulnerability","description":"<p>SSL/TLS Renegotiation an attacker can arrange to inject traffic into a\nlegitimate client-server exchange such that the TLS server will accept\nit as if it came from the client. This may allow the attacker to execute\noperations on the server using the client's credentials</p>","question":"Is the backend server vulnerable to SSL/TLS Renegotiation?","success-message":"The the host is not vulnerable to SSL/TLS Re-Negotiation","business-implication":"","intro":"<p>The attack exploits TLS's renegotiation feature, which allows a client and\nserver who already have a TLS connection to negotiate new parameters,\ngenerate new keys, etc. Renegotiation is carried out in the existing TLS\nconnection, with the new handshake packets being encrypted along with\napplication packets. The difficulty is that they're not otherwise tied to\nthe channel, which gives the attacker a window.</p>","compliant":"<p>Disable SSL/TLS renegotiation in the server.</p>","non-compliant":"","related-to":"<ol>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2009-3555\">CVE-2009-3555</a></li>\n<li><a href=\"https://securitytracker.com/id?1023148\">CISCO Router Flaw in SSL Renegotiation</a></li>\n</ol>","types":[4]},"relationships":{}},{"id":97,"type":"vulnerabilities","attributes":{"uuid":"b6a6258b-745e-4331-8873-dff86ee3b178","name":"Zipperdown Vulnerability leading to Remote Code Execution Attack","description":"<p>The remote code execution occurs inside the affected app allowing a remote attacker to possess the same privileges or permissions as the vulnerable app. For instance, if a vulnerable app has permission to access the user’s address book, the ZipperDown attacker will also have access to the affected user’s address book.</p>","question":"Is the application vulnerable to ZipperDown?","success-message":"The application is not vulnerable to ZipperDown.","business-implication":"","intro":"<p>ZipperDown attack launches a Man-in-the-Middle (MiTM) attack and replace the benign .zip file with malicious .zip file over the unencrypted network.</p>\n<p>The app uses the ZipArchive or SSZipArchive library to decompress it. Since the ZipArchive and SSZipArchive libraries allow unzipping files in parent directories, malicious .zip file can be unzipped to overwrite app data or codes. Apps that dynamically load the codes, such as via JavaScript bridges, make it easier for an attacker to overwrite the codes and launch remote code execution attacks.</p>","compliant":"<p>Use the following pointers to make sure the application is not affected with ZipperDown vulnerability</p>\n<ul>\n<li>Use SSL pinning to download .zip file or any assets</li>\n<li>Use the latest version of SSArchive or Ziparchive third-party decompression library</li>\n</ul>","non-compliant":"","related-to":"<ul>\n<li><a href=\"https://zipperdown.org/\">Zipperdown Web</a></li>\n<li><a href=\"https://github.com/ZipArchive/ZipArchive/issues/453\">Zipperdown Issue in ZipArchive</a></li>\n</ul>","types":[1,2]},"relationships":{}},{"id":104,"type":"vulnerabilities","attributes":{"uuid":"253620c4-362f-491e-8810-d8e51ed216b4","name":"Bytecode Obfuscation","description":"<p>Java source code is typically compiled into Java bytecode – the instruction set of the Java virtual machine.\nThe compiled Java bytecode can be easily reversed engineered back into source\ncode by freely available decompilers. Bytecode Obfuscation is the process of modifying\nJava bytecode (executable or library) so that it is much harder to read and understand\nfor a hacker but remains fully functional.</p>","question":"Does the application has code obfuscation to protect from reverse engineering?","success-message":"The application uses obfuscation to mitigate the threat of reverse engineering","business-implication":"","intro":"<p>Generally, all mobile code is susceptible to reverse engineering. Some apps are more susceptible than others. Code written in languages / frameworks that allow for dynamic introspection at runtime (Java, .NET, Objective C, Swift) are particularly at risk for reverse engineering. Detecting susceptibility to reverse engineering is fairly straight forward. First, decrypt the app store version of the app (if binary encryption is applied). Code will be susceptible if it is fairly easy to understand the app’s controlflow path, string table, and any pseudocode/source-code generated by these tools.</p>\n<p>Bytecode obfuscation consists of multiple complementary techniques\nthat can help create a layered defense against reverse engineering and\ntampering. Some typical examples of obfuscation techniques include:</p>\n<ul>\n<li><b>Renaming</b> to alter the name of methods and variables to make\n    the decompiled source much harder for a human to understand.</li>\n<li><b>Control Flow Obfuscation</b>creates conditional, branching, and\n    iterative constructs that produce valid executable logic, but yield\n    non-deterministic semantic results when decompiled.</li>\n<li><b>String Encryption</b> hides strings in the executable and only\n    restores their original value when needed</li>\n<li><b>Instruction Pattern Transformation</b> converts common\n    instructions to other, less obvious constructs potential confusing\n    decompliers.</li>\n<li><b>Dummy Code Insertion</b> inserts code that does not affect the\n    program’s logic, but breaks decompilers or makes reverse-engineered\n    code harder to analyze.</li>\n<li><b>Unused Code and Metadata Removal</b> prunes out debug,\n    non-essential metadata and used code from applications to reduce the\n    information available to an attacker.</li>\n</ul>","compliant":"<p>To enable shrinking, obfuscation, and optimization, using proguard include the following in your project-level <code>build.gradle</code> file.</p>\n<pre><code>android {\n    buildTypes {\n        release {\n            // Enables code shrinking, obfuscation, and optimization for only\n            // your project's release build type.\n            minifyEnabled true\n\n            // Enables resource shrinking, which is performed by the\n            // Android Gradle plugin.\n            shrinkResources true\n\n            // Includes the default ProGuard rules files that are packaged with\n            // the Android Gradle plugin. To learn more, go to the section about\n            // R8 configuration files.\n            proguardFiles getDefaultProguardFile(\n                    'proguard-android-optimize.txt'),\n                    'proguard-rules.pro'\n        }\n    }\n    ...\n}\n</code></pre>\n<p>Sample <code>proguard-rules.pro</code> which you can use to obfuscate code:</p>\n<pre><code>// Basic proguard rules\n-optimizations !code/simplification/arithmetic\n-keepattributes &lt;em&gt;Annotation&lt;/em&gt;\n-keepattributes InnerClasses\n-keepattributes EnclosingMethod\n-keep class *&lt;em&gt;.R$&lt;/em&gt;\n\n-dontskipnonpubliclibraryclasses\n-forceprocessing\n-optimizationpasses 5\n-overloadaggressively\n\n// Removing logging code\n-assumenosideeffects class android.util.Log {\npublic static *** d();\npublic static *** v();\npublic static *** i();\npublic static *** w();\npublic static *** e();\n}\n\n// Crashlytics code as given below which one can exclude\n\n-keep class com.crashlytics.** { *; }\n-keep class com.crashlytics.android.**\n-keepattributes SourceFile,LineNumberTable\n</code></pre>","non-compliant":"<p>Sample <code>proguard-rules.pro</code> lines which fails obfuscation when used:</p>\n<pre><code>-dontobfuscate\n</code></pre>\n<p>Or if no proguard or obfuscation is used then you can use number of freely\navailable Java decompilers that can\nrecreate source code from Java bytecode (executables or libraries).</p>\n<p>Popular decompilers include:</p>\n<ul>\n<li><a href=\"https://bytecodeviewer.com\">Bytecode Viewer</a> - A Java 8 Jar &amp;\n    Android APK Reverse Engineering Suite (Decompiler, Editor, Debugger\n    &amp; More)</li>\n<li><a href=\"http://www.benf.org/other/cfr/\">CFR</a> - Another Java decompiler</li>\n<li><a href=\"http://jd.benow.ca/\">JDGui</a> - Yet another fast Java decompiler</li>\n<li><a href=\"https://github.com/fesh0r/fernflower\">Fernflower</a> - An analytical\n    decompiler for Java</li>\n<li><a href=\"https://github.com/skylot/jadx\">JadX</a> - tool to decompile APK and DEX files</li>\n</ul>","related-to":"<ul>\n<li><a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m9-reverse-engineering\">M9: Reverse Engineering</a></li>\n<li><a href=\"https://owasp.org/www-community/controls/Bytecode_obfuscation\">Bytecode Obfuscation</a></li>\n<li><a href=\"https://developer.android.com/studio/build/shrink-code\">Android Developer</a> Resource to shrink and obfuscate your code in proguard</li>\n</ul>","types":[1]},"relationships":{}},{"id":109,"type":"vulnerabilities","attributes":{"uuid":"d3db22b5-8cf7-4601-b613-36c4ba524726","name":"Heartbleed Vulnerability","description":"<p>The Heartbleed Bug is a serious vulnerability in the popular OpenSSL\ncryptographic software library.\nThis weakness allows stealing the information protected, under normal\nconditions, by the SSL/TLS encryption used to secure the Internet.</p>","question":"Is the backend server vulnerable to HEARTBLEED bug?","success-message":"The the host is not vulnerable to HEARTBLEED bug","business-implication":"","intro":"<p>The Heartbleed bug allows anyone on the Internet to read the memory of\nthe systems protected by the vulnerable versions of the OpenSSL software.\nThis compromises the secret keys used to identify the service providers and to\nencrypt the traffic, the names and passwords of the users and the actual content.\nThis allows attackers to eavesdrop on communications,\nsteal data directly from the services and users and to impersonate services and users.</p>","compliant":"<p>Status of different versions:</p>\n<ul>\n<li>OpenSSL 1.0.1 through 1.0.1f (inclusive) are vulnerable</li>\n<li>OpenSSL 1.0.1g is NOT vulnerable</li>\n<li>OpenSSL 1.0.0 branch is NOT vulnerable</li>\n<li>OpenSSL 0.9.8 branch is NOT vulnerable</li>\n</ul>\n<p>This bug has been out in the wild since OpenSSL release 1.0.1 on 14th of March 2012.\nOpenSSL 1.0.1g released on 7th of April 2014 fixes the bug.</p>","non-compliant":"","related-to":"<ol>\n<li><a href=\"https://heartbleed.com/\">HEARTBLEED Bug</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20140407.txt\">OpenSSL Security Advisory</a></li>\n<li><a href=\"https://www.kb.cert.org/vuls/id/720951/\">VU#720951 OpenSSL TLS heartbeat extension read overflow discloses sensitive information</a></li>\n</ol>","types":[4]},"relationships":{}},{"id":114,"type":"vulnerabilities","attributes":{"uuid":"f6e08832-6656-4aba-aaad-72453fed46f0","name":"Insecure Biometric Authentication","description":"<p>Biometric authentication bypass is possible if application logic not using the crypto\nobject in the biometric authentication callback.</p>","question":"Has the application securely implemented Biometric authentication?","success-message":"The application has properly implemented biometric authentication","business-implication":"<p>In the event that an anonymous user is able to bypass biometric authentication to gain\nprivileged access to application can result in loss of sensitive information.</p>","intro":"<p>The parameters of Biometric API <code>authenticate</code> method include a <code>CryptoObject</code> which\ncontains a reference to the Keystore entry that should be unlocked, and a callback\nwhich implements <code>onAuthenticationSucceeded</code> method. The <code>onAuthenticationSucceeded</code>\nmethod triggers when a user is successfully authenticated by the system. Most of the\nencountered biometric authentication implementations rely on this method being called,\nwithout caring about the crypto object. Application logic responsible for unlocking\nthe application is usually included in this callback method. This approach is trivially\nexploited by hooking into the application process and directly calling\n<code>onAuthenticationSucceeded</code> method, as a result the application should be unlocked\nwithout providing valid biometrics.</p>\n<p>In order to implement biometric authentication in a secure manner, the Keystore key\nwhich is inside of this crypto object has to be used for some application critical\ncryptographic operation. That way even if a device become compromised and an attacker\nmakes a request, the Android Keystore would refuse to decrypt the data.</p>","compliant":"<ol>\n<li>Create the Android keystore key with <code>setUserAuthenticationRequired</code> and\n    <code>setInvalidatedByBiometricEnrollment</code> set to <code>true</code>. Additionally,\n    <code>setUserAuthenticationParameters</code>'s timeout param should be set to <code>0</code></li>\n<li>Initialize cipher object with keystore key created above.</li>\n<li>Create <code>BiometricPrompt.CryptoObject</code> using cipher object from previous step.</li>\n<li>Implement <code>BiometricPrompt.AuthenticationCallback.onAuthenticationSucceeded</code>\n    callback which will retrieve cipher object from the parameter and use this cipher\n    object to decrypt some other crucial data such as session key, or a secondary\n    symmetric key which will be used to decrypt application data.</li>\n<li>Call <code>BiometricPrompt.authenticate</code> function with crypto object and callbacks\n    created in steps 3 and 4.</li>\n</ol>\n<p>Here is a sample implementation:</p>\n<pre><code>biometricPrompt = new BiometricPrompt(MyActivity.this, executor, new BiometricPrompt.AuthenticationCallback() {\n    @Override\n    public void onAuthenticationSucceeded(BiometricPrompt.AuthenticationResult result) {\n        super.onAuthenticationSucceeded(result);\n        BiometricPrompt.CryptoObject cryptoObject = result.getCryptoObject();\n\n        // Use cryptoObject for grant access logic\n        Cipher cipher = cryptoObject.getCipher();\n        cryptedInfo = cipher.doFinal(info);\n        accessGranted(cryptedInfo);\n    }\n    ...\n});\n...\nKeyGenParameterSpec keyGenParameterSpec = new KeyGenParameterSpec.Builder(KEY_NAME, KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)\n    .setUserAuthenticationRequired(true)\n    .setInvalidatedByBiometricEnrollment(true)\n    .setUserAuthenticationParameters(0, KeyProperties.AUTH_BIOMETRIC_STRONG)\n    .build()\n\nKeyGenerator keyGenerator = KeyGenerator.getInstance(algorithm, \"AndroidKeyStore\");\nkeyGenerator.init(keyGenParameterSpec);\nkeyGenerator.generateKey();\n...\nCipher cipher = Cipher.getInstance(transformation);\nSecretKey secretKey = ((SecretKey) keyStore.getKey(KEY_NAME, password));\ncipher.init(mode, secretKey);\nbiometricPrompt.authenticate(promptInfo, new BiometricPrompt.CryptoObject(cipher));\n</code></pre>","non-compliant":"<p>The vulnerable implementations usually included something similar to the code shown\nbelow:</p>\n<pre><code>biometricPrompt = new BiometricPrompt(MyActivity.this, executor, new BiometricPrompt.AuthenticationCallback() {\n    @Override\n    public void onAuthenticationSucceeded(BiometricPrompt.AuthenticationResult result) {\n        super.onAuthenticationSucceeded(result);\n        accessGranted();\n    }\n    ...\n});\n...\nbiometricPrompt.authenticate(promptInfo);\n</code></pre>\n<p>The code listed above does not use the CryptoObject passed in the\n<code>AuthenticationResult</code>, instead it just assumes that authentication was successful\nsince <code>onAuthenticationSucceeded</code> was called.</p>","related-to":"<ul>\n<li><a href=\"https://medium.com/androiddevelopers/using-biometricprompt-with-cryptoobject-how-and-why-aace500ccdb7\">Using BiometricPrompt with CryptoObject: how and why</a></li>\n<li><a href=\"https://developer.android.com/training/sign-in/biometric-auth\">Show a biometric authentication dialog</a></li>\n</ul>","types":[3]},"relationships":{}},{"id":4,"type":"vulnerabilities","attributes":{"uuid":"4f2fdab5-867d-48fb-897b-8402d22120b3","name":"Improper Custom Permissions","description":"<p>A custom permission controls whether other applications can access the\naffected apps features. The use of the dangerous label places no\nrestrictions on which apps can access the application declaring the\npermission but the user will be warned that the dangerous permission is\nrequired during installation.</p>","question":"Are protection levels of the custom permission safe?","success-message":"Custom permissions in the app have sufficient protection levels, or custom permissions are absent.","business-implication":"","intro":"<p>If an app is using a granted permission to respond to a calling app then\nit must check that the calling app as that permission as well.\nOtherwise, the responding app may be granting privileges to the calling\napp that it should not have. (This is sometimes called the \"confused\ndeputy\" problem.)</p>\n<p>The methods <code>Context.checkCallingPermission()</code> and\n<code>Context.enforceCallingPermission()</code> can be used to ensure that the\ncalling app has the correct permissions.</p>","compliant":"<p>Remove custom permissions which are not required from the\ncustom-permission sets defined in the <code>AndroidManifest.xml</code></p>","non-compliant":"","related-to":"","types":[1]},"relationships":{}},{"id":13,"type":"vulnerabilities","attributes":{"uuid":"74cbb1ab-bc8e-4c20-87a5-0e952f45aef2","name":"SQL Injection","description":"<p>Data retrieved from a mobile app's server contains malformed data that\nresults in a SQL injection within the mobile device's local databases.\nLocal SQL injections may result in local malware injection, information\ntheft, and more</p>","question":"Is the application vulnerable to SQL Injection through Web API?","success-message":"Application is not vulnerable to SQL Injection through Web API.","business-implication":"<p>SQL injection allows the intruder to view and modify data contained in\nthe database. The attacker could also gain much higher privileges over\nthe database over time thus compromising the confidentiality and\nintegrity of the data stored.</p>","intro":"<p>An SQL injection vulnerability arises when the original SQL query can be\naltered to form an altogether different query. Execution of this altered\nquery may result in information leaks or data modification. The primary\nmeans of preventing SQL injection are validating and sanitizing user\ninput, and parameterizing the query.</p>","compliant":"<p>Input validation is a prerequisite for proper query construction. This\ncompliant solution validates the length of the username and password\narguments. It also uses a java.sql.PreparedStatement instead of\njava.sql.Statement.</p>\n<pre><code>class Login {\n    public void doPrivilegedAction(String username, String password) throws SQLException {\n\n        // ensure that the length of username and password is legitimate\n        if ((username.length() &gt;= 8) || (password.length() &gt;= 20)) {\n            // handle error\n            ...\n        }\n\n        DriverManager.registerDriver(new com.microsoft.jdbc.sqlserver.SQLServerDriver());\n        Connection connection = DriverManager.getConnection(\"jdbc:microsoft:sqlserver://:1433\", \"\", \"\");\n\n        if (connection != null) {\n            String sql = \"select * from db_user where username=? and password=?\";\n\n            // use PreparedStatement for type enforcement\n            PreparedStatement stmt = connection.prepareStatement(sql);\n            stmt.setString(1, username);\n            stmt.setString(2, password);\n            ResultSet rs = stmt.executeQuery();\n\n            if (!rs.next()) {\n                throw new SecurityException(\"User name or Password incorrect\");\n            }\n            // we've authenticated; proceed\n            ...\n        }\n    }\n}\n</code></pre>","non-compliant":"<p>This non-compliant code example shows JDBC code that is vulnerable to\nSQL injection. The SQL statement SQL accepts unsanitized input\narguments.</p>\n<pre><code>class Login {\n    public void doPrivilegedAction(String username, String password) throws SQLException {\n\n        DriverManager.registerDriver(new com.microsoft.jdbc.sqlserver.SQLServerDriver());\n        Connection connection = DriverManager.getConnection(\n            \"jdbc:microsoft:sqlserver://&lt;HOST&gt;:1433\", \"&lt;UID&gt;\", \"&lt;PWD&gt;\");\n\n        if (connection != null) {\n            String sql = \"select * from db_user where username = '\" + username +\n                \"' and password = '\" + password + \"'\";\n\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(sql);\n            if (!rs.next()) {\n                throw new SecurityException(\"User name or Password incorrect\");\n            }\n            // Authenticated; proceed\n        }\n    }\n    ...\n</code></pre>\n<p>If the attacker enters a valid user name securecoding and enters 'OR\nusername = 'securecoding for the password argument, the SQL statement\nevaluates to select * from db_user where username = '' OR username =\n'securecoding' and password='', consequently bypassing the login\npassword check. Similarly, an input like user' OR '1' = '1 would bypass\nboth the user name and password checks, granting the attacker\nunrestricted access.</p>","related-to":"","types":[1,2]},"relationships":{}},{"id":15,"type":"vulnerabilities","attributes":{"uuid":"a0236077-a840-4516-9cf1-6aaa8231030a","name":"Insufficient Transport Layer Protection","description":"<p>Insufficient transport layer protection issues happen when the data is\nsent from the mobile app to the server over unsecure channels. Whether\nthe data is transmitted through the carrier network or through WiFi, it\nwill end up through the Internet either way before it could reach the\nremote server. There are several ways where unprotected data transmitted\nover the network could be sniffed; things like routers, proxies, cell\ntowers, are some of the few ways data could be sniffed while in transit.</p>","question":"Is your application using proper Transport Layer protection? Is HTTPS enabled in your application?","success-message":"Application seems to have SSL enabled and sufficient protection is being used to prevent Information leakage.","business-implication":"<p>The violation of a user's confidentiality may result in:</p>\n<ul>\n<li>Identity theft</li>\n<li>Fraud</li>\n<li>Reputational Damage</li>\n</ul>","intro":"<p>Insufficient transport layer protection issues happen when the data is\nsent from the mobile app to the server over unsecured channels. Whether\nthe data is transmitted through the carrier network or through WiFi, it\nwill end up through the Internet either way before it could reach the\nremote server. There are several ways where unprotected data transmitted\nover the network could be sniffed; things like routers, proxies, cell\ntowers, are some of the few ways data could be sniffed while in transit.</p>","compliant":"<p>Applications should make sure that they do not send sensitive\ninformation to log output. If the app includes a third party library,\nthe developer should make sure that the library does not send sensitive\ninformation to log output. One common solution is for an application to\ndeclare and use a custom log class, so that log output is automatically\nturned on/off based on Debug/Release. Developers can use ProGuard to\ndelete specific method calls. This assumes that the method contains no\nside effects.</p>\n<p>Never use HTTP URL to download data. Instead, create a valid HTTPS\nrequest through which only sensitive data can be downloaded.</p>","non-compliant":"<p>Using HTTP with SSL or TLS to connect to internet, or without a proper\ncertificate the connection can be easily eavesdropped by attacker\nwithout the knowledge of the user.</p>\n<pre><code>String link = \"http://www.google.com\";\nURL url = new URL(link);\n\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.connect();\n\nInputStream is = conn.getInputStream();\nBufferedReader reader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));\nString webPage = \"\", data=\"\";\nwhile ((data = reader.readLine()) != null) {\n   webPage += data;\n}\n</code></pre>\n<p>An attacker can perform a MITM attack and the user wouldn't even know\nthat someone is eavesdropping the connection.</p>","related-to":"","types":[1,2]},"relationships":{}},{"id":18,"type":"vulnerabilities","attributes":{"uuid":"05a11c32-cb1a-4ce9-a66c-063f507b5d70","name":"Business Logic","description":"<p>Logical Flaws through API which can bypass authorization and get\ninformation about other users. Authorization and\nauthenticated sessions were not properly validated on both client or\nserver side</p>","question":"Were flaws found in the business logic?","success-message":"No flaws were found in the business logic.","business-implication":"","intro":"<p>Most security problems are weaknesses in an application that result from\na broken or missing security control (authentication, access control,\ninput validation, etc...). By contrast, business logic vulnerabilities\nare ways of using the legitimate processing flow of an application in a\nway that results in a negative consequence to the organization.</p>\n<p>Too often, the business logic category is used for vulnerabilities that\ncan't be scanned for automatically. This makes it very difficult to\napply any kind of categorization scheme. Business logic problems are\ndifferent from authentication problems and every other category. There\nare many significant business logic vulnerabilities, but they are far\nless common than the type of items.</p>","compliant":"<p>The following should be checked and properly fixed</p>\n<ul>\n<li>Check for OTP in server side rather than in Client Side</li>\n<li>Use proper Authentication not same authorization token like\n  Authorization: Basic aW50ZXJhY3Rpb25vbmU6bW9iaTEyMw== which\n  translates to: interactionone:mobi123</li>\n<li>never use passwords like mobi123</li>\n</ul>","non-compliant":"","related-to":"<p>Automated tools find it hard to understand context, hence it's up to a\nperson to perform these kinds of tests. The following two examples will\nillustrate how understanding the functionality of the application, the\ndeveloper's intentions, and some creative \"out-of-the-box\" thinking can\nbreak the application's logic. The first example starts with a\nsimplistic parameter manipulation, whereas the second is a real world\nexample of a multi-step process leading to completely subvert the\napplication.</p>\n<p>Example 1: Suppose an e-commerce site allows users to select items to purchase,\nview a summary page and then tender the sale. What if an attacker was\nable to go back to the summary page, maintaining their same valid\nsession and inject a lower cost for an item and complete the\ntransaction, and then check out?</p>\n<p>Example 2: Holding/locking resources and keeping others from purchases these items\nonline may result in attackers purchasing items at a lower price. The\ncountermeasure to this problem is to implement timeouts and mechanisms\nto ensure that only the correct price can be charged.</p>\n<p>Example 3: What if a user was able to start a transaction linked to their\nclub/loyalty account and then after points have been added to their\naccount cancel out of the transaction? Will the points/credits still be\napplied to their account?</p>","types":[3]},"relationships":{}},{"id":20,"type":"vulnerabilities","attributes":{"uuid":"70e6d8c1-5195-44d5-bc10-22a49080e1d1","name":"Debug Logging with NSLog","description":"<p>Debug Logs are usually left enabled during application development.\nThese application logs are easily accessible via XCode or by root access\nto the device.</p>","question":"Is the application logging to the system logs?","success-message":"Application does not log to system logs.","business-implication":"<p>Sensitive data can inadvertently leak into the logs and may aid in\nfurther attacks</p>","intro":"<p>Applications tend to add some data in logs for debugging purpose. If\nsensitive data is shown in the application logs then it may lead to\nleakage of data.</p>","compliant":"<p>Wipe off the application log at particular intervals or when the user\nsigns out of the application. Do not log any sensitive information.</p>","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":25,"type":"vulnerabilities","attributes":{"uuid":"18078277-e737-4563-b486-a63cfd4283b7","name":"Unsecured Data in CouchDB","description":"<p>CouchDB is an alternative to SQLite3 database, used by applications to\nstore data</p>","question":"Does this application store data in CouchDB?","success-message":"This application does not store sensitive information in CouchDB.","business-implication":"<p>Failure to use encryption routines may result in the database and its\nassociated data including user credentials getting compromised.</p>","intro":"<p>Couch databases are used by the applications to store data which can be\nfurther used by the application at later stages. However, these\ndatabases don't have any built-in support for encryption and hence, all\nthe information is stored in plain-text format in these files. If an\napplication stores user credentials or some sensitive user specific data\nin this database then it can be accessed by any third party.</p>","compliant":"<p>It is suggested to use custom encryption while storing data in Couch\nDatabase.</p>\n<p>Database encryption is available for both ForestDB and SQLite storage\ntypes. It is automatically hooked into ForestDB's filesystem abstraction\nlayer and for SQLite storage, Couchbase Lite uses SQLCipher; an open\nsource extension to SQLite that provides transparent encryption of\ndatabase files. In both cases, the encryption specification is 256-bit\nAES.</p>\n<p>SQLCipher is an optional dependency. The section below describes how to\nadd it to platform.</p>\n<ul>\n<li>Download the iOS SDK from <a href=\"http://www.couchbase.com/nosql-databases/downloads#couchbase-mobile\">here</a>.</li>\n<li>Add the libsqlcipher.a library to your XCode project.</li>\n<li>Go to the Link Binary With Libraries build phase of your app target.</li>\n<li>Remove libsqlite.dylib</li>\n</ul>","non-compliant":"","related-to":"","types":[2]},"relationships":{}},{"id":65,"type":"vulnerabilities","attributes":{"uuid":"e52c3463-7480-469f-bc5f-a2cdf41d5716","name":"General Server Vulnerabilities","description":"<p>The API may be susceptible to general server vulnerabilities, which can lead to\nfurther attacks</p>","question":"Are any general server vulnerabilities present?","success-message":"No general server vulnerabilities were found.","business-implication":"","intro":"<p>This issue is not specific to a certain kind of vulnerabilities. It can be raised as\na result of many different types of attacks and might indicate some server-side\nfault that may lead to further vulnerabilities</p>\n<p>When an attacker explores a web site looking for vulnerabilities, the amount of\ninformation that the site provides is crucial to the eventual success or failure\nof any attempted attacks. If the application shows the attacker a stack trace,\nit relinquishes information that makes the attacker's job significantly easier.\nFor example, a stack trace might show the attacker a malformed SQL query string,\nthe type of database being used, and the version of the application container.\nThis information enables the attacker to target known vulnerabilities in these components.</p>\n<p>The application configuration should specify a default error page in order to\nguarantee that the application will never leak error messages to an attacker.\nHandling standard HTTP error codes is useful and user-friendly in addition to\nbeing a good security practice, and a good configuration will also define a\nlast-chance error handler that catches any exception that could possibly be\nthrown by the application.</p>","compliant":"","non-compliant":"","related-to":"","types":[4]},"relationships":{}},{"id":67,"type":"vulnerabilities","attributes":{"uuid":"37e8ed81-f825-4e85-b5a1-a9c4df1e938b","name":"Command Injection Vulnerabilities in HTTP Requests","description":"<p>One or more API requests were found to be vulnerable to command injection vulnerabilities</p>","question":"Are there command injection vulnerabilities in HTTP request?","success-message":"No command injection vulnerabilities in HTTP request were found.","business-implication":"","intro":"<p>Command injection is an attack in which the attacker attempts execution of arbitrary commands\non the host operating system via a vulnerable application. This attack differs from Code Injection,\nin that code injection allows the attacker to add his own code that is then executed by the application.\nIn Code Injection, the attacker extends the default functionality of the application\nwithout the necessity of executing system commands.</p>\n<p>Command injection attacks are possible when an application passes unsafe user supplied data\n(forms, cookies, HTTP headers etc.) to a system shell. The attacker-supplied\noperating system commands are usually executed with the privileges of the vulnerable application.\nCommand injection attacks are possible largely due to insufficient input validation.</p>","compliant":"","non-compliant":"","related-to":"","types":[4]},"relationships":{}},{"id":74,"type":"vulnerabilities","attributes":{"uuid":"63f0b87f-3819-4f77-8ff0-d19c3f259d6d","name":"XML-external-entity Injection Vulnerabilities in HTTP Body","description":"<p>Our scanner detected occurrences of XML-external-entity injection vulnerabilities\nin HTTP body of API calls</p>","question":"Are there XML-external-entity injection vulnerabilities in HTTP body?","success-message":"No XML-external-entity injection vulnerabilities were found in HTTP body.","business-implication":"","intro":"<p>An XML External Entity Injection is a type of attack against an application that\nparses XML input. This attack occurs when XML input containing a reference to an\nexternal entity is processed by a weakly configured XML parser. This attack may\nlead to the disclosure of confidential data, denial of service, server side request\nforgery, port scanning from the perspective of the machine where the parser is\nlocated, and other system impacts.</p>","compliant":"","non-compliant":"","related-to":"","types":[4]},"relationships":{}},{"id":77,"type":"vulnerabilities","attributes":{"uuid":"2a70cba4-fc0f-4dbb-914f-6eea187d344f","name":"Cross Site Tracing Vulnerabilities","description":"<p>One or more API requests were found to be susceptible to Cross Site Tracing vulnerabilities</p>","question":"Are there Cross Site Tracing vulnerabilities present?","success-message":"No Cross Site Tracing vulnerabilities were found.","business-implication":"<p>The Cross-Site Tracing (XST) attack makes use of Cross-site Scripting (XSS)\nand the TRACE or TRACK HTTP methods. TRACE allows the client to see what is\nbeing received at the other end of the request chain and use that data for\ntesting or diagnostic information. The TRACK method works in the same way but\nis specific to Microsoft's IIS web server. XST could be used as a method to\nsteal user's cookies via Cross-site Scripting (XSS) even if the cookie has the\n<code>HttpOnly</code> flag set and/or exposes the user's Authorization header.</p>\n<p>Modern browsers now prevent TRACE requests being made via JavaScript, however,\nother ways of sending TRACE requests with browsers have been discovered, such as using Java.</p>","intro":"<p>A Cross-Site Tracing (XST) attack involves the use of Cross-site Scripting (XSS)\nand the TRACE or TRACK HTTP methods to be successfully leveraged in some\nscenarios to steal legitimate users' credentials. This attack technique was\ndiscovered by Jeremiah Grossman in 2003, in an attempt to bypass the HttpOnly\ntag that Microsoft introduced in Internet Explorer 6 SP1 to protect cookies from\nbeing accessed by JavaScript.</p>","compliant":"","non-compliant":"","related-to":"","types":[4]},"relationships":{}},{"id":89,"type":"vulnerabilities","attributes":{"uuid":"310004d1-6c71-47d6-81de-c7ab93069849","name":"Android Component Hijacking via Intent","description":"<p>An implicit intent is being created. This may leave to an intent hijacking\nattack where a malicious application registers for the same action and\ncategory and could be able to intercept the intent to compromise data or\nalter behaviour</p>","question":"Is any Android component vulnerable to Intent hijacking?","success-message":"Application has no vulnerable components for Intent hijacking","business-implication":"","intro":"<p>Android app can have four types of components:\n- Activity\n- Broadcast Receiver\n- Content Provider\n- Service App</p>\n<p>They have their own entry points and can be activated individually.\nThese components can be exposed to other apps for flexible code and data\nsharing. Android (mainly) uses Manifest XML file to define component exposure.\nIntents come into play here because they are the main mechanism for\ncommunication between components. Intents are used to start activities and\nservices, bind to services, and convey notifications to broadcast receivers.\nBy default, a component can only receive intents from other components\nin the same application, but it can be configured to accept intents from\noutside applications by setting the <code>android:exported</code> attribute in the\nmanifest.</p>\n<p>An intent can be classified as one of two types based on how it is addressed.</p>\n<ul>\n<li>Implicit Intent</li>\n<li>Explicit Intent</li>\n</ul>\n<p>There are two main ways that the security of intents can be compromised:</p>\n<ul>\n<li><strong>Intent interception</strong> involves a malicious app receiving an\n  intent that was not intended for it. This can cause a leak of sensitive\n  information, but more importantly, it can result in the malicious component\n  being activated instead of the legitimate component. For example, if a\n  malicious activity intercepted an intent then it would appear on the screen\n  instead of the legitimate activity.</li>\n<li><strong>Intent spoofing</strong> is an attack where a malicious application\n  induces undesired behavior by forging an intent.</li>\n</ul>","compliant":"<p>Android framework provides \"<em>PendingIntent</em>\" mechanism to safely perform the\nactions of an intent given by untrusted apps. In some situations, it can be a\ngood measure for this kind of vulnerabilities.</p>\n<pre><code>// Explicit intent to wrap\nIntent intent = new Intent(this, LoginActivity.class);\n\n// Create pending intent and wrap our intent\nPendingIntent pendingIntent = PendingIntent.getActivity(this, 1, intent, PendingIntent.FLAG_CANCEL_CURRENT);\ntry {\n    // Perform the operation associated with our pendingIntent\n    pendingIntent.send();\n} catch (PendingIntent.CanceledException e) {\n    e.printStackTrace();\n}\n</code></pre>","non-compliant":"<p>This application wants to create a user account in several trusted\napplications using one broadcast intent:</p>\n<pre><code>Intent intent = new Intent();\nintent.setAction(\"com.example.CreateUser\");\nintent.putExtra(\"Username\", uname_string);\nintent.putExtra(\"Password\", pw_string);\nsendBroadcast(intent);\n</code></pre>\n<p>This application assumes only the trusted applications will be listening\nfor the action. A malicious application can register for this action and\nintercept the user's login information, as below:</p>\n<pre><code>IntentFilter filter = new IntentFilter(\"com.example.CreateUser\");\nMyReceiver receiver = new MyReceiver();\nregisterReceiver(receiver, filter);\n</code></pre>\n<p>When a broadcast contains sensitive information, create a whitelist of\napplications that can receive the action using the application's manifest\nfile, or programmatically send the intent to each individual intended receiver.</p>","related-to":"<p>This vulnerability is related to:</p>\n<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/927.html\">CWE-927</a>: Use of Implicit Intent for Sensitive Communication</li>\n<li><a href=\"https://jvn.jp/en/jp/JVN31860555/\">JVN#31860555</a>  Twicca fails to restrict access permissions</li>\n</ul>","types":[1]},"relationships":{}},{"id":98,"type":"vulnerabilities","attributes":{"uuid":"4574b399-cf5a-40f2-bd54-179d09cc8abc","name":"Deprecated setPluginState in WebView","description":"<p><code>setPluginState</code> has security implication and deprecated by Android. It is unsafe to use in production.</p>","question":"Does the application uses setPluginState in WebView?","success-message":"The application does not uses setPluginState in WebView.","business-implication":"","intro":"<p>The mobile application uses a deprecated setPluginState method in WebView. The \"setPluginState\" method was deprecated in Android’s API level 18 because plugins will not be supported anymore in the future and should not be used. Example of plugins are embedded PDF reader, Flash plugin, etc.</p>","compliant":"<p><code>setPluginState</code> feature is deprecated, don't enable it.</p>","non-compliant":"<p>Following is an example of insecure implementation</p>\n<pre><code>WebSettings settings = webView.getSettings();\nsettings.setPluginsEnabled(true);\nsettings.setPluginState(WebSettings.PluginState.ON);\n</code></pre>","related-to":"<ul>\n<li><a href=\"https://developer.android.com/reference/android/webkit/WebView\">Webview docs</a></li>\n<li><a href=\"https://developer.android.com/reference/android/webkit/WebSettings\">WebSettings docs</a></li>\n</ul>","types":[1]},"relationships":{}},{"id":106,"type":"vulnerabilities","attributes":{"uuid":"713d34db-290e-4deb-bf84-4ee0de8c3d51","name":"HTTP Host Header Injection","description":"<p>Host header attack, also known as Host header injection, is a web attack where the attacker\n provides a false Host header to the web application.</p>","question":"Is the backend server vulnerable to Host header injection?","success-message":"The the host is not vulnerable to Host header injection attacks","business-implication":"","intro":"<p>A web server commonly hosts several web applications on the same IP address,\nreferring to each application via the virtual host.</p>\n<p>In an incoming HTTP request, web servers often dispatch the request to the\ntarget virtual host based on the value supplied in the Host header.\nWithout proper validation of the header value, the attacker can supply invalid\ninput to cause the web server to:</p>\n<ul>\n<li>dispatch requests to the first virtual host on the list</li>\n<li>cause a redirect to an attacker-controlled domain</li>\n<li>perform web cache poisoning</li>\n<li>manipulate password reset functionality</li>\n</ul>","compliant":"<p>Do not trust the HOST header since this is user control.\nIf you must use the host header as a mechanism for identifying the\nweb server's location, it’s highly advised to make use of a <strong>whitelist</strong> of allowed hostnames.</p>","non-compliant":"","related-to":"<ol>\n<li><a href=\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection\">OWASP Testing for Host Header Injection</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/HTTP_header_injection\">Wikipedia: HTTP header injection</a></li>\n</ol>","types":[4]},"relationships":{}},{"id":113,"type":"vulnerabilities","attributes":{"uuid":"41e2e64d-8138-4abb-a053-1bc58e0a0b72","name":"Network Security Misconfiguration","description":"<p>This technique allows the user to secure the communication in the application\nby specifying proper values to the flags which are present in the network security\nconfiguration file. If implemented correctly it can help in securing the application\nby communicating only on secure protocols like HTTPS. It can also be used to implement\ncertificate pinning by using the SHA-256 hashes of the public certificate.</p>","question":"Does the application has misconfigured Network Security Configuration?","success-message":"The application has properly configured network security configuration","business-implication":"<p>An attacker can gain sensitive information which can result in loss of confidential data.</p>","intro":"<p>The Network Security Configuration feature lets apps customize their network security\nsettings in a safe, declarative configuration file without modifying app code. These\nsettings can be configured for specific domains and for a specific app. The key\ncapabilities of this feature are as follows:</p>\n<ul>\n<li><strong>Custom trust anchors</strong>: Customize which Certificate Authorities (CA) are trusted for an app's secure connections. For example, trusting particular self-signed certificates or restricting the set of public CAs that the app trusts.</li>\n<li><strong>Debug-only overrides</strong>: Safely debug secure connections in an app without added risk to the installed base.</li>\n<li><strong>Cleartext traffic opt-out</strong>: Protect apps from accidental usage of cleartext traffic.</li>\n<li><strong>Certificate pinning</strong>: Restrict an app's secure connection to particular certificates.</li>\n</ul>","compliant":"<p>The following is a good network security configuration:</p>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;network-security-config&gt;\n    &lt;base-config cleartextTrafficPermitted=\"false\"&gt;\n        &lt;trust-anchors&gt;\n            &lt;certificates src=\"...\"/&gt;\n            ...\n        &lt;/trust-anchors&gt;\n    &lt;/base-config&gt;\n\n    &lt;domain-config cleartextTrafficPermitted=\"false\"&gt;\n        &lt;domain&gt;android.com&lt;/domain&gt;\n        ...\n        &lt;trust-anchors&gt;\n            &lt;certificates src=\"...\"/&gt;\n            ...\n        &lt;/trust-anchors&gt;\n        &lt;pin-set&gt;\n            &lt;pin digest=\"...\"&gt;...&lt;/pin&gt;\n            ...\n        &lt;/pin-set&gt;\n    &lt;/domain-config&gt;\n    ...\n&lt;/network-security-config&gt;\n</code></pre>","non-compliant":"<p>If you have set the base configuration or domain configuration with\ncleartextTrafficPermitted to True then it is a problem.\nIf the <code>src</code> is set to <code>\"user\"</code> then, a user can install his own certificate\nin the device and the app will use that instead of the pinned certificate.</p>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;network-security-config&gt;\n    &lt;base-config cleartextTrafficPermitted=\"true\"&gt;\n        &lt;trust-anchors&gt;\n            &lt;certificates src=\"system\" /&gt;\n            &lt;certificates src=\"user\" /&gt;\n        &lt;/trust-anchors&gt;\n    &lt;/base-config&gt;\n&lt;/network-security-config&gt;\n</code></pre>\n<p>Adding a debug-overrides can expose your debug certificate which can be used to\nperform MITM attack on your application.</p>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;network-security-config&gt;\n    &lt;debug-overrides&gt;\n        &lt;trust-anchors&gt;\n            &lt;certificates src=\"@raw/debug_cas\"/&gt;\n        &lt;/trust-anchors&gt;\n    &lt;/debug-overrides&gt;\n&lt;/network-security-config&gt;\n</code></pre>","related-to":"<ul>\n<li>Android Documentation: https://developer.android.com/training/articles/security-config</li>\n<li>Android Codelab for Network Security Configuration:\nhttps://developer.android.com/codelabs/android-network-security-config#3</li>\n</ul>","types":[1]},"relationships":{}},{"id":115,"type":"vulnerabilities","attributes":{"uuid":"37d3c0da-d7c8-4462-a0e6-559d46b68044","name":"Insecure Biometric Authentication","description":"<p>Biometric authentication allows the user to authenticate to an application using their\nbiometric data (fingerprint or face recognition).</p>","question":"Is the application’s authentication vulnerable to biometric bypass through Local Authentication API?","success-message":"The application does use proper Biometric authentication.","business-implication":"<p>In an event, if an attacker can bypass biometric authentication then an attacker can\nperform malicious activities which can result in compromising the victim's data.</p>","intro":"<p>The LAContext helper class is used for local authentication, it does not verify\nanything externally but relies on the iOS to present the relevant dialog and confirm\nauthentication. Once a new LAContext instance is set up, the <code>evaluatePolicy</code> method is\ncalled, giving iOS a chance to present the relevant dialog and perform the\nauthentication. Depending on the success or failure of the authentication itself, a\n<code>reply</code> block is invoked that includes a boolean indicating if it was successful or not.\nThis response can be bypassed as we can intercept the operating systems response to\nthe application and set the response as true, and original intended code block is\nexecuted, just like it would have under normal conditions.</p>\n<p>In order to implement biometric authentication in a secure manner, the keychain items\nshould be protected with access control flags such as <code>kSecAccessControlBiometryAny</code>\nthen a valid set of biometrics (either TouchID or FaceID) must be presented before the\nkey is released from the Secure Enclave to decrypt the keychain entry itself.</p>","compliant":"<p>Here is a sample implementation:</p>\n<p>To utilise Touch ID protection for Keychain items, create a security access control\nreference using the <code>SecAccessControlCreateWithFlags()</code> API. When using this API,\nspecify the user presence (<code>kSecAccessControlUserPresence</code>) policy and a protection\nclass of <code>kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly</code>. You can then use the\nreturned <code>SecAccessControlRef</code> in the attributes dictionary (key:\n<code>kSecAttrAccessControl</code>) when inserting the data.</p>\n<pre><code>#define HEX_SERVICE @\"HEX_EXAMPLE_SERVICE\"\n#define HEX_SERVICE_MSG @\"Authenticate to unlock the key\"\n\n    SecAccessControlRef sacRef;\n    CFErrorRef *err = nil;\n\n    /*\n    Important considerations.\n    Please read the docs regarding kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly.\n    TL;DR - If the user unsets their device passcode, these keychain items are destroyed.\n    You will need to add code to compensate for this, i.e to say that touch ID can only be used if the device has a passcode set.\n\n    Additionally, keychain entries with this flag will not be backed up/restored via iCloud.\n    */\n\n    //Gets our Security Access Control ref for user presence policy (requires user AuthN)\n    sacRef = SecAccessControlCreateWithFlags(kCFAllocatorDefault,\n                kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly,\n                kSecAccessControlBiometryAny,\n                kSecAccessControlUserPresence,\n                err);\n\n    NSDictionary *attributes = @{\n        //Sec class, in this case just a password\n        (__bridge id)kSecClass: (__bridge id)kSecClassGenericPassword,\n        //Our service UUID/Name\n        (__bridge id)kSecAttrService: HEX_SERVICE,\n        //The data to insert\n        (__bridge id)kSecValueData: [@\"sup3r_s3cur3_k3y\"\n                                        dataUsingEncoding:NSUTF8StringEncoding],\n        //Whether or not we want to prompt on insert\n        (__bridge id)kSecUseNoAuthenticationUI: @YES,\n        //Our security access control reference\n        (__bridge id)kSecAttrAccessControl: (__bridge_transfer id)sacRef\n    };\n\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        //Insert the data to the keychain, using our attributes dictionary\n        OSStatus status = SecItemAdd((__bridge CFDictionaryRef)attributes, nil);\n    });\n\n}\n</code></pre>\n<p>And now to obtain the data from the keychain, use the following:</p>\n<pre><code>/* Lets get our secret from the keychain.\n* User will be asked for Touch ID or device passcode if Touch ID not available\n* You could use LocalAuthentication's canEvaluatePolicy method to determine if this is a touch ID device first.\n*/\nNSDictionary *query = @{\n    (__bridge id)kSecClass: (__bridge id)kSecClassGenericPassword,\n    (__bridge id)kSecAttrService: HEX_SERVICE,\n    (__bridge id)kSecReturnData: @YES,\n    (__bridge id)kSecUseOperationPrompt: HEX_SERVICE_MSG\n};\n\ndispatch_async(dispatch_get_global_queue( DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    CFTypeRef dataTypeRef = NULL;\n\n    OSStatus status = SecItemCopyMatching((__bridge CFDictionaryRef)(query), &amp;dataTypeRef);\n    if (status == errSecSuccess)\n    {\n        NSData *resultData = ( __bridge_transfer NSData *)dataTypeRef;\n\n        NSString * result = [[NSString alloc]\n                                initWithData:resultData\n                                encoding:NSUTF8StringEncoding];\n\n        //Show alertview on main queue\n        dispatch_async(dispatch_get_main_queue(), ^{\n            NSLog(@\"Keychain entry: %@\", result);\n            UIAlertView *alert = [[UIAlertView alloc]\n                                    initWithTitle: @\"Thanks\"\n                                    message:[NSString stringWithFormat:\n                                                @\"The key is: %@\", result]\n                                    delegate:self\n                                    cancelButtonTitle:@\"OK\"\n                                    otherButtonTitles:nil];\n            [alert show];\n        });\n    }\n    else\n    {\n        //Normally would do better error handling\n        NSLog(@\"Something went wrong\");\n    }\n});\n</code></pre>","non-compliant":"<p>The vulnerable implementations usually included something similar to the code shown\nbelow:</p>\n<pre><code>LAContext *context = [[LAContext alloc] init];\nNSError *error = nil;\nNSString *reason = @\"Please authenticate using TouchID.\";\n\nif ([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&amp;error]) {\n[context evaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics\n    localizedReason:reason\n        reply:^(BOOL success, NSError *error) {\n            if (success) {\n                NSLog(@\"Auth was OK\");\n            }\n            else {\n                //You should do better handling of error here\n                NSLog(@\"Error received: %d\", error);\n            }\n    }];\n}\nelse {\nNSLog(@\"Can not evaluate Touch ID\");\n}\n</code></pre>","related-to":"<ul>\n<li><a href=\"https://developer.apple.com/documentation/localauthentication/logging_a_user_into_your_app_with_face_id_or_touch_id\">Logging a User into Your App with Face ID or Touch ID</a></li>\n<li><a href=\"https://github.com/sensepost/objection/wiki/Understanding-the-iOS-Biometrics-Bypass\">Understanding the iOS Biometrics Bypass</a></li>\n</ul>","types":[3]},"relationships":{}},{"id":116,"type":"vulnerabilities","attributes":{"uuid":"4b013f35-4d90-427d-a77b-2da731fc4cb4","name":"Root Detection","description":"<p>Since a rooted device is much more at risk of being compromised,\nit is important to know about it. Detecting whether the device is\nrooted or not is essential for further security measures.</p>","question":"Has the application implemented proper root detection?","success-message":"The application has properly implemented root detection.","business-implication":"<p>In the event, if an attacker can install a malicious application on\nthe device then an attacker can perform malicious activities which\ncan result in compromising the victim's data.</p>","intro":"<p>Root detection test case detects whether the application is running\non a rooted device or not. If it can then a malicious application\ncan access or modify the data of any application.</p>","compliant":"<pre><code>import android.content.Context;\nimport android.content.pm.ApplicationInfo;\nimport android.content.pm.PackageInfo;\nimport android.content.pm.PackageManager;\nimport android.util.Log;\nimport android.content.pm.PackageManager;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.InputStreamReader;\nimport java.util.List;\n\npublic class RootCheck {\n    private static Context mContext;\n    private static final String TAG = \"RootCheck\";\n    private String[] binaryPaths= {\n            \"/data/local/\",\n            \"/data/local/bin/\",\n            \"/data/local/xbin/\",\n            \"/sbin/\",\n            \"/su/bin/\",\n            \"/system/bin/\",\n            \"/system/bin/.ext/\",\n            \"/system/bin/failsafe/\",\n            \"/system/sd/xbin/\",\n            \"/system/usr/we-need-root/\",\n            \"/system/xbin/\",\n            \"/system/app/Superuser.apk\",\n            \"/cache\",\n            \"/data\",\n            \"/dev\"\n    };\n\n    private String[] dangerousPackages = {\n            \"com.devadvance.rootcloak\",\n            \"com.devadvance.rootcloakplus\",\n            \"com.koushikdutta.superuser\",\n            \"com.thirdparty.superuser\",\n            \"com.topjohnwu.magisk\",\n            \"org.lsposed.manager\",\n            \"com.devadvance.rootcloak2\"\n    };\n\n    RootCheck(Context ct) {\n        mContext = ct;\n    }\n\n    public String rootBeerCheck() {\n        if(DetectTestKeys() || checkSuExists() || checkForBusyBoxBinary() || checkForSuBinary() || checkPackages(mContext))\n            return \"DEVICE IS ROOTED!\";\n        else\n            return \"DEVICE IS NOT ROOTED\";\n    }\n\n    private boolean DetectTestKeys()  {\n        String buildTags = android.os.Build.TAGS;\n        return buildTags != null &amp;&amp; buildTags.contains(\"test-keys\");\n    }\n\n    private boolean checkForBinary(String filename) {\n        for (String path : binaryPaths) {\n            File f = new File(path, filename);\n            boolean fileExists = f.exists();\n            if (fileExists) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private boolean checkForSuBinary() {\n        return checkForBinary(\"su\");    //checking for su binary\n    }\n\n    private boolean checkForBusyBoxBinary() {\n        return checkForBinary(\"busybox\"); //checking for busybox\n    }\n\n    private boolean checkSuExists() {\n        Process process = null;\n        try {\n            process = Runtime.getRuntime().exec(new String[]\n                    {\"/system /xbin/which\", \"su\"}); //Checking if su binary exists\n            BufferedReader in = new BufferedReader(\n                    new InputStreamReader(process.getInputStream()));\n            String line = in.readLine();\n            process.destroy();\n            return line != null;\n        } catch (Exception e) {\n            if (process != null) {\n                process.destroy();\n            }\n            return false;\n        }\n    }\n\n    private boolean checkPackages(Context ctx)  {\n        PackageManager pm = ctx.getPackageManager();\n        for(String name:dangerousPackages){\n            if(isPackageInstalled(name,pm)){    //Checking if dangerous applications are installed\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private boolean isPackageInstalled(String packageName, PackageManager packageManager) {\n        try {\n            return packageManager.getApplicationInfo(packageName, 0).enabled;\n        } catch (PackageManager.NameNotFoundException e) {\n            return false;\n        }\n    }\n\n}\n</code></pre>","non-compliant":"","related-to":"<ul>\n<li>RootBear Library - Simple to use root checking Android library and sample app (https://github.com/scottyab/rootbeer)</li>\n</ul>","types":[2]},"relationships":{}}],"vulnerability":{"id":31300,"project":7943,"profile":7695,"name":"InsecureBankv2","executable_name":"com.android.insecurebankv2","file_format":0,"file_format_display":"APK","version":"1.0","version_code":"1","md5hash":"5ee4829065640f9c936ac861d1650ffc","sha1hash":"80b53f80a3c9e6bfd98311f5b26ccddcd1bf0a98","dynamic_status":0,"api_scan_progress":0,"device_token":"7c98dfc2-6a80-473c-8457-6feb14becf5f","manual":0,"is_static_done":true,"is_dynamic_done":true,"static_scan_progress":100,"api_scan_status":-1,"icon_url":"https://appknox-production-public.s3.amazonaws.com/dee793e4-b3c3-4d36-aee9-2f1be6a7e047.png","rating":"14.63","is_manual_done":false,"is_api_done":false,"risk_count_critical":0,"risk_count_high":1,"risk_count_medium":5,"risk_count_low":6,"risk_count_passed":39,"risk_count_unknown":31,"created_on":"2022-05-26T05:10:49.250646Z","min_os_version":"4.0.3","supported_cpu_architectures":[],"supported_device_types":[],"analyses":[{"id":1915106,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":["3_2","3_3","3_4"],"hipaa":["164_312_a_1"],"asvs":[],"cwe":["CWE_926"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_3","MSTG_6_4"],"created_on":"2022-05-26T05:10:51.354594Z","updated_on":"2022-05-26T05:11:15.017588Z","uuid":"f58af4d3-9a1e-4fe9-aa4d-4833e5104213","vulnerability":1,"attachments":[],"file":31300},{"id":1915107,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":["3_2","3_3","3_4"],"hipaa":["164_312_a_1"],"asvs":[],"cwe":["CWE_926"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_1"],"created_on":"2022-05-26T05:10:51.394005Z","updated_on":"2022-05-26T05:11:15.122196Z","uuid":"8831b5d5-6e41-4bbf-9606-863f1cafde10","vulnerability":2,"attachments":[],"file":31300},{"id":1915112,"analiser_version":0,"risk":3,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":3,"status":3,"findings":[{"title":null,"description":"Debug enabled within the app"}],"cvss_vector":"CVSS:3.0/AV:L/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:H","cvss_base":7.7,"cvss_version":3,"cvss_metrics_humanized":[{"key":"Attack Vector","value":"Local"},{"key":"Attack Complexity","value":"High"},{"key":"Privileges Required","value":"None"},{"key":"User Interaction","value":"Required"},{"key":"Scope","value":"Changed"},{"key":"Confidentiality Impact","value":"High"},{"key":"Integrity Impact","value":"High"},{"key":"Availability Impact","value":"High"}],"owasp":["M10_2016"],"pcidss":[],"hipaa":["164_312_a_1"],"asvs":[],"cwe":["CWE_489"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_7_2"],"created_on":"2022-05-26T05:10:51.596523Z","updated_on":"2022-05-26T05:11:15.229305Z","uuid":"e8827287-6e68-49f8-87a7-aadcd94e1a29","vulnerability":3,"attachments":[],"file":31300},{"id":1915056,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":["3_2","3_3","3_4"],"hipaa":[],"asvs":[],"cwe":["CWE_250"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_1"],"created_on":"2022-05-26T05:10:49.317098Z","updated_on":"2022-05-26T05:11:15.333776Z","uuid":"e1df90f2-1909-4578-b2b0-fd5dcb83be6e","vulnerability":4,"attachments":[],"file":31300},{"id":1915097,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M3_2016"],"pcidss":["4_1"],"hipaa":["164_312_e_1"],"asvs":[],"cwe":["CWE_296"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_5_3"],"created_on":"2022-05-26T05:10:50.987681Z","updated_on":"2022-05-26T05:11:25.205999Z","uuid":"b82e8e5d-dee3-4143-bf66-2a70c7fb054f","vulnerability":5,"attachments":[],"file":31300},{"id":1915096,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M3_2016"],"pcidss":["4_1"],"hipaa":["164_312_e_1"],"asvs":[],"cwe":["CWE_296"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_5_3"],"created_on":"2022-05-26T05:10:50.946375Z","updated_on":"2022-05-26T05:11:44.194566Z","uuid":"b356bd4b-37d3-4366-81e2-98f915d5c1a3","vulnerability":6,"attachments":[],"file":31300},{"id":1915125,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M3_2016"],"pcidss":["4_1"],"hipaa":["164_312_e_1"],"asvs":[],"cwe":["CWE_296"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_3_2","MSTG_3_3","MSTG_3_3"],"created_on":"2022-05-26T05:10:52.141539Z","updated_on":"2022-05-26T05:11:53.710434Z","uuid":"73216098-454c-4693-8215-5eb1374311b0","vulnerability":7,"attachments":[],"file":31300},{"id":1915098,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M3_2016"],"pcidss":["4_1"],"hipaa":["164_312_e_1"],"asvs":[],"cwe":["CWE_297"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_5_3"],"created_on":"2022-05-26T05:10:51.030015Z","updated_on":"2022-05-26T05:12:03.188896Z","uuid":"30836d6d-ca9f-4ea0-b931-eeab4d6f8b0e","vulnerability":8,"attachments":[],"file":31300},{"id":1915081,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M3_2016"],"pcidss":[],"hipaa":[],"asvs":[],"cwe":["CWE_749"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_6"],"created_on":"2022-05-26T05:10:50.341010Z","updated_on":"2022-05-26T05:12:12.684189Z","uuid":"414aa59b-5697-4b2a-a080-c07cbd88aed2","vulnerability":9,"attachments":[],"file":31300},{"id":1915080,"analiser_version":0,"risk":1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":1,"status":3,"findings":[{"title":null,"description":"android.permission.GET_ACCOUNTS"},{"title":null,"description":"android.permission.ACCESS_COARSE_LOCATION"},{"title":null,"description":"android.permission.READ_PROFILE"}],"cvss_vector":"CVSS:3.0/AV:L/AC:L/PR:H/UI:N/S:U/C:L/I:N/A:N","cvss_base":2.3,"cvss_version":3,"cvss_metrics_humanized":[{"key":"Attack Vector","value":"Local"},{"key":"Attack Complexity","value":"Low"},{"key":"Privileges Required","value":"High"},{"key":"User Interaction","value":"Not Required"},{"key":"Scope","value":"Unchanged"},{"key":"Confidentiality Impact","value":"Low"},{"key":"Integrity Impact","value":"None"},{"key":"Availability Impact","value":"None"}],"owasp":["M1_2016","M10_2016"],"pcidss":[],"hipaa":[],"asvs":[],"cwe":["CWE_250"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_1"],"created_on":"2022-05-26T05:10:50.300748Z","updated_on":"2022-05-26T05:12:20.485760Z","uuid":"a5d6973e-d3ff-4171-9741-bee767a33fbe","vulnerability":10,"attachments":[],"file":31300},{"id":1915082,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M7_2016"],"pcidss":[],"hipaa":[],"asvs":[],"cwe":["CWE_749"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_7"],"created_on":"2022-05-26T05:10:50.381350Z","updated_on":"2022-05-26T05:12:20.602591Z","uuid":"4db29dca-6295-4de3-80d1-5eeca698ba06","vulnerability":11,"attachments":[],"file":31300},{"id":1915099,"analiser_version":0,"risk":2,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":2,"status":3,"findings":[{"title":null,"description":"Reference: android.content.SharedPreferences.Editor.putString\nKey: serverip\nValue: 10.0.2.2"},{"title":null,"description":"Reference: android.content.SharedPreferences.Editor.putString\nKey: serverport\nValue: 8888"}],"cvss_vector":"CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:N","cvss_base":6.1,"cvss_version":3,"cvss_metrics_humanized":[{"key":"Attack Vector","value":"Local"},{"key":"Attack Complexity","value":"Low"},{"key":"Privileges Required","value":"Low"},{"key":"User Interaction","value":"Not Required"},{"key":"Scope","value":"Unchanged"},{"key":"Confidentiality Impact","value":"High"},{"key":"Integrity Impact","value":"Low"},{"key":"Availability Impact","value":"None"}],"owasp":["M2_2016"],"pcidss":["3_2","3_3","3_4"],"hipaa":["164_312_a_1"],"asvs":[],"cwe":["CWE_922"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_2_1"],"created_on":"2022-05-26T05:10:51.069028Z","updated_on":"2022-05-26T05:17:35.784333Z","uuid":"0772a59f-aa27-4bde-a0d2-b82966450152","vulnerability":14,"attachments":[],"file":31300},{"id":1915066,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M3_2016"],"pcidss":["4_1"],"hipaa":["164_312_e_1"],"asvs":[],"cwe":["CWE_319"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_5_1"],"created_on":"2022-05-26T05:10:49.720885Z","updated_on":"2022-05-26T05:17:35.873255Z","uuid":"d2eaf361-3cd9-471d-b7d5-44daa500f851","vulnerability":15,"attachments":[],"file":31300},{"id":1915073,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M5_2016"],"pcidss":["3_5","3_6"],"hipaa":["164_312_a_1"],"asvs":[],"cwe":["CWE_327"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_3_2","MSTG_3_3","MSTG_3_4"],"created_on":"2022-05-26T05:10:50.010763Z","updated_on":"2022-05-26T05:17:35.960458Z","uuid":"bb243b2b-ce10-4121-bd41-c910b63d23da","vulnerability":16,"attachments":[],"file":31300},{"id":1915086,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M2_2016"],"pcidss":["3_2","3_3","3_4"],"hipaa":["164_312_a_1"],"asvs":[],"cwe":["CWE_779"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_2_3"],"created_on":"2022-05-26T05:10:50.535425Z","updated_on":"2022-05-26T05:17:36.046312Z","uuid":"d4a9c5b3-87a8-4d7b-8471-773bfda232fa","vulnerability":17,"attachments":[],"file":31300},{"id":1915058,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":["7_1","7_2"],"hipaa":[],"asvs":["ASVS_1_11_2","ASVS_1_11_3"],"cwe":["CWE_840"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:49.400788Z","updated_on":"2022-05-26T05:10:49.400817Z","uuid":"a8fcc3b3-8f6f-4994-b7ac-7ec67db3364a","vulnerability":18,"attachments":[],"file":31300},{"id":1915072,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016","M7_2016"],"pcidss":[],"hipaa":[],"asvs":[],"cwe":["CWE_749"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_6"],"created_on":"2022-05-26T05:10:49.969975Z","updated_on":"2022-05-26T05:12:21.606338Z","uuid":"9bb46e5a-e785-47a2-aace-c92498cb6a18","vulnerability":29,"attachments":[],"file":31300},{"id":1915100,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":["4_1"],"hipaa":["164_312_e_1"],"asvs":[],"cwe":["CWE_601"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_7_5"],"created_on":"2022-05-26T05:10:51.109054Z","updated_on":"2022-05-26T05:12:21.725328Z","uuid":"9350acb9-0695-4d4f-89e6-0a990e6e4fa9","vulnerability":30,"attachments":[],"file":31300},{"id":1915113,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":["4_1"],"hipaa":["164_312_e_1"],"asvs":[],"cwe":["CWE_601"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_7_5"],"created_on":"2022-05-26T05:10:51.635872Z","updated_on":"2022-05-26T05:12:21.840679Z","uuid":"391e8d8e-ca47-4686-82a5-8f1a7f506663","vulnerability":31,"attachments":[],"file":31300},{"id":1915083,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":["4_1"],"hipaa":["164_312_e_1"],"asvs":[],"cwe":["CWE_185"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_7_5"],"created_on":"2022-05-26T05:10:50.419451Z","updated_on":"2022-05-26T05:12:21.966769Z","uuid":"66835eea-623d-437d-810a-206c10c81678","vulnerability":32,"attachments":[],"file":31300},{"id":1915103,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":["4_1"],"hipaa":["164_312_e_1"],"asvs":[],"cwe":["CWE_185"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_2"],"created_on":"2022-05-26T05:10:51.234920Z","updated_on":"2022-05-26T05:12:22.085925Z","uuid":"0c670e83-9768-498a-aabc-8da917ceb952","vulnerability":33,"attachments":[],"file":31300},{"id":1915101,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":[],"hipaa":[],"asvs":[],"cwe":["CWE_20"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_7_5"],"created_on":"2022-05-26T05:10:51.150303Z","updated_on":"2022-05-26T05:12:22.204657Z","uuid":"4b01c7e6-9207-48dc-80d7-5ff7f69ecd95","vulnerability":34,"attachments":[],"file":31300},{"id":1915084,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M10_2016"],"pcidss":["3_2","3_3","3_4"],"hipaa":[],"asvs":[],"cwe":["CWE_779","CWE_532"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_2_3"],"created_on":"2022-05-26T05:10:50.457507Z","updated_on":"2022-05-26T05:12:22.326942Z","uuid":"316c3bc6-a1a3-473a-948b-34da690ca481","vulnerability":35,"attachments":[],"file":31300},{"id":1915077,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M3_2016"],"pcidss":["4_1"],"hipaa":["164_312_e_1"],"asvs":[],"cwe":["CWE_185"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_2"],"created_on":"2022-05-26T05:10:50.177886Z","updated_on":"2022-05-26T05:12:22.442217Z","uuid":"1d2ea9c0-acd9-4e10-91fa-440f30de5323","vulnerability":36,"attachments":[],"file":31300},{"id":1915115,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":["1_1","1_2","1_3"],"hipaa":[],"asvs":[],"cwe":["CWE_16"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_7_5"],"created_on":"2022-05-26T05:10:51.719628Z","updated_on":"2022-05-26T05:12:22.585888Z","uuid":"b43603a7-ab30-4ba1-95c3-8296f27da5b3","vulnerability":37,"attachments":[],"file":31300},{"id":1915064,"analiser_version":0,"risk":1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":1,"status":3,"findings":[{"title":null,"description":"Unprotected activity: com.android.insecurebankv2.PostLogin"},{"title":null,"description":"Unprotected activity: com.android.insecurebankv2.DoTransfer"},{"title":null,"description":"Unprotected activity: com.android.insecurebankv2.ViewStatement"},{"title":null,"description":"Unprotected activity: com.android.insecurebankv2.ChangePassword"}],"cvss_vector":"CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N","cvss_base":3.3,"cvss_version":3,"cvss_metrics_humanized":[{"key":"Attack Vector","value":"Local"},{"key":"Attack Complexity","value":"Low"},{"key":"Privileges Required","value":"Low"},{"key":"User Interaction","value":"Not Required"},{"key":"Scope","value":"Unchanged"},{"key":"Confidentiality Impact","value":"Low"},{"key":"Integrity Impact","value":"None"},{"key":"Availability Impact","value":"None"}],"owasp":["M1_2016"],"pcidss":["3_2","3_3","3_4"],"hipaa":["164_312_a_1"],"asvs":[],"cwe":["CWE_926"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_3","MSTG_6_4"],"created_on":"2022-05-26T05:10:49.639913Z","updated_on":"2022-05-26T05:12:22.702422Z","uuid":"47b8bd4e-369e-454d-b299-1746ba8ce89e","vulnerability":38,"attachments":[],"file":31300},{"id":1915067,"analiser_version":0,"risk":1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":1,"status":3,"findings":[{"title":null,"description":"Unprotected receiver: com.android.insecurebankv2.MyBroadCastReceiver"}],"cvss_vector":"CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N","cvss_base":3.3,"cvss_version":3,"cvss_metrics_humanized":[{"key":"Attack Vector","value":"Local"},{"key":"Attack Complexity","value":"Low"},{"key":"Privileges Required","value":"Low"},{"key":"User Interaction","value":"Not Required"},{"key":"Scope","value":"Unchanged"},{"key":"Confidentiality Impact","value":"Low"},{"key":"Integrity Impact","value":"None"},{"key":"Availability Impact","value":"None"}],"owasp":["M1_2016"],"pcidss":["3_2","3_3","3_4"],"hipaa":["164_312_a_1"],"asvs":[],"cwe":["CWE_926"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_3","MSTG_6_4"],"created_on":"2022-05-26T05:10:49.760238Z","updated_on":"2022-05-26T05:12:22.808259Z","uuid":"75cdef5b-2f58-4646-af1f-ea67682d4eb8","vulnerability":39,"attachments":[],"file":31300},{"id":1915076,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":["3_2","3_3","3_4"],"hipaa":["164_312_a_1"],"asvs":[],"cwe":["CWE_926"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_3","MSTG_6_4"],"created_on":"2022-05-26T05:10:50.135580Z","updated_on":"2022-05-26T05:12:22.909645Z","uuid":"072f8f5f-1a8b-4e12-9572-ea682b935f7b","vulnerability":40,"attachments":[],"file":31300},{"id":1915116,"analiser_version":0,"risk":1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":1,"status":3,"findings":[{"title":null,"description":"Unprotected provider: com.android.insecurebankv2.TrackUserContentProvider"}],"cvss_vector":"CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N","cvss_base":3.3,"cvss_version":3,"cvss_metrics_humanized":[{"key":"Attack Vector","value":"Local"},{"key":"Attack Complexity","value":"Low"},{"key":"Privileges Required","value":"Low"},{"key":"User Interaction","value":"Not Required"},{"key":"Scope","value":"Unchanged"},{"key":"Confidentiality Impact","value":"Low"},{"key":"Integrity Impact","value":"None"},{"key":"Availability Impact","value":"None"}],"owasp":["M1_2016"],"pcidss":["3_2","3_3","3_4"],"hipaa":["164_312_a_1"],"asvs":[],"cwe":["CWE_926"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_3","MSTG_6_4"],"created_on":"2022-05-26T05:10:51.760251Z","updated_on":"2022-05-26T05:12:23.018149Z","uuid":"8c701046-9cb3-4ee7-8073-e103b36f4e99","vulnerability":41,"attachments":[],"file":31300},{"id":1915062,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":["3_2","3_3","3_4"],"hipaa":["164_312_a_1"],"asvs":[],"cwe":["CWE_926"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_3","MSTG_6_4"],"created_on":"2022-05-26T05:10:49.564602Z","updated_on":"2022-05-26T05:12:23.120273Z","uuid":"20858a10-f3c9-4a9d-bb41-fb99325be0b6","vulnerability":42,"attachments":[],"file":31300},{"id":1915087,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":["3_2","3_3","3_4"],"hipaa":["164_312_a_1"],"asvs":[],"cwe":["CWE_926"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_3","MSTG_6_4"],"created_on":"2022-05-26T05:10:50.581833Z","updated_on":"2022-05-26T05:12:23.227434Z","uuid":"1d9c2217-5f1d-423a-ba1c-8f08429a42c2","vulnerability":43,"attachments":[],"file":31300},{"id":1915119,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":["3_2","3_3","3_4"],"hipaa":["164_312_a_1"],"asvs":[],"cwe":["CWE_926"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_3","MSTG_6_4"],"created_on":"2022-05-26T05:10:51.882438Z","updated_on":"2022-05-26T05:12:23.332090Z","uuid":"09d872cb-1931-4973-832e-c2878295682b","vulnerability":44,"attachments":[],"file":31300},{"id":1915118,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":["3_2","3_3","3_4"],"hipaa":["164_312_a_1"],"asvs":[],"cwe":["CWE_926"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_3","MSTG_6_4"],"created_on":"2022-05-26T05:10:51.842279Z","updated_on":"2022-05-26T05:12:23.438923Z","uuid":"057ce534-0326-4680-8784-91b789fce09d","vulnerability":45,"attachments":[],"file":31300},{"id":1915069,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":["3_2","3_3","3_4"],"hipaa":["164_312_a_1"],"asvs":[],"cwe":["CWE_23"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_2"],"created_on":"2022-05-26T05:10:49.841185Z","updated_on":"2022-05-26T05:12:23.635143Z","uuid":"51a52d27-1340-498e-bcbd-4c3490188134","vulnerability":46,"attachments":[],"file":31300},{"id":1915088,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":[],"hipaa":[],"asvs":[],"cwe":["CWE_749"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_5"],"created_on":"2022-05-26T05:10:50.620344Z","updated_on":"2022-05-26T05:17:36.137374Z","uuid":"ba6ed324-b198-4bae-a938-1a33a91d0d44","vulnerability":55,"attachments":[],"file":31300},{"id":1915075,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M5_2016"],"pcidss":["4_1","4_2"],"hipaa":[],"asvs":[],"cwe":["CWE_916"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_3_2","MSTG_3_3","MSTG_3_4"],"created_on":"2022-05-26T05:10:50.094049Z","updated_on":"2022-05-26T05:17:36.227938Z","uuid":"fccb6b11-71d7-490a-9acd-9f3dcc24e504","vulnerability":57,"attachments":[],"file":31300},{"id":1915126,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M4_2016","M6_2016"],"pcidss":["7_1","7_2"],"hipaa":["164_312_a_1","164_312_d"],"asvs":[],"cwe":["CWE_288"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_4_9"],"created_on":"2022-05-26T05:10:52.182349Z","updated_on":"2022-05-26T05:10:52.182372Z","uuid":"12b3a8e0-9352-44e4-baeb-5d232db35a53","vulnerability":58,"attachments":[],"file":31300},{"id":1915079,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M6_2016"],"pcidss":["3_2","3_3","3_4","7_1","7_2"],"hipaa":["164_312_d"],"asvs":["ASVS_4_2_1"],"cwe":["CWE_639","CWE_862","CWE_863"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:50.259481Z","updated_on":"2022-05-26T05:10:50.259505Z","uuid":"1dc1447a-e1dc-49a6-a564-b0a09ad02457","vulnerability":60,"attachments":[],"file":31300},{"id":1915057,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A6_2013"],"pcidss":["6_5"],"hipaa":["164_312_c_1","164_312_a_1"],"asvs":["ASVS_13_1_3"],"cwe":["CWE_16"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:49.358384Z","updated_on":"2022-05-26T05:10:49.358414Z","uuid":"50ba727a-fb1c-4edb-b624-2b65d9f4bf36","vulnerability":65,"attachments":[],"file":31300},{"id":1915074,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A1_2013"],"pcidss":["6_5"],"hipaa":["164_312_c_1","164_312_a_1"],"asvs":["ASVS_14_1_2"],"cwe":["CWE_120","CWE_134"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:50.053255Z","updated_on":"2022-05-26T05:10:50.053280Z","uuid":"d2a0943d-f14a-4075-9483-2682cc38db18","vulnerability":66,"attachments":[],"file":31300},{"id":1915090,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A1_2013"],"pcidss":["6_5"],"hipaa":["164_312_c_1","164_312_a_1"],"asvs":["ASVS_5_3_8"],"cwe":["CWE_120","CWE_134"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:50.701121Z","updated_on":"2022-05-26T05:10:50.701143Z","uuid":"b8744f9a-36d3-4d36-bbca-e389b8824d26","vulnerability":67,"attachments":[],"file":31300},{"id":1915093,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A1_2013"],"pcidss":["6_5"],"hipaa":["164_312_c_1","164_312_a_1"],"asvs":["ASVS_5_4_3"],"cwe":["CWE_190"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:50.826451Z","updated_on":"2022-05-26T05:10:50.826479Z","uuid":"9f068158-cf20-430f-8707-f16b06d47e4f","vulnerability":68,"attachments":[],"file":31300},{"id":1915127,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A1_2013"],"pcidss":["6_5"],"hipaa":["164_312_c_1","164_312_a_1"],"asvs":["ASVS_5_3_6"],"cwe":["CWE_20"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:52.221574Z","updated_on":"2022-05-26T05:10:52.221596Z","uuid":"06364d83-de33-48a7-ab0f-b63f564f72d4","vulnerability":69,"attachments":[],"file":31300},{"id":1915059,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A1_2013"],"pcidss":["6_5"],"hipaa":["164_312_c_1","164_312_a_1"],"asvs":["ASVS_5_3_7"],"cwe":["CWE_90"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:49.441018Z","updated_on":"2022-05-26T05:10:49.441040Z","uuid":"ae3b2a51-ccb9-4599-99e0-04afeef946ed","vulnerability":70,"attachments":[],"file":31300},{"id":1915092,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A1_2013"],"pcidss":["6_5"],"hipaa":["164_312_c_1","164_312_a_1"],"asvs":["ASVS_11_1_4"],"cwe":["CWE_400","CWE_185"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:50.782267Z","updated_on":"2022-05-26T05:10:50.782289Z","uuid":"b1b32e6d-0935-456e-90c4-4d4274553b38","vulnerability":71,"attachments":[],"file":31300},{"id":1915104,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A1_2013"],"pcidss":["3_2","3_3","3_4","6_5"],"hipaa":["164_312_a_1","164_312_d"],"asvs":["ASVS_5_3_5"],"cwe":["CWE_89"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:51.276519Z","updated_on":"2022-05-26T05:10:51.276553Z","uuid":"81e508d7-c690-43d5-932c-0077ab2068f5","vulnerability":72,"attachments":[],"file":31300},{"id":1915094,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A1_2013"],"pcidss":["6_5"],"hipaa":["164_312_c_1","164_312_a_1"],"asvs":["ASVS_5_1_3","ASVS_5_1_4"],"cwe":["CWE_20"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:50.869149Z","updated_on":"2022-05-26T05:10:50.869171Z","uuid":"f21852b8-8a67-45ac-9625-40bcfd5a4292","vulnerability":73,"attachments":[],"file":31300},{"id":1915091,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A1_2013"],"pcidss":["6_5"],"hipaa":["164_312_c_1","164_312_a_1"],"asvs":["ASVS_5_5_2"],"cwe":["CWE_611"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:50.741749Z","updated_on":"2022-05-26T05:10:50.741771Z","uuid":"25916761-d46f-4614-accb-faab8c017102","vulnerability":74,"attachments":[],"file":31300},{"id":1915095,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A7_2013"],"pcidss":["6_5"],"hipaa":["164_312_a_1","164_312_d"],"asvs":["ASVS_5_3_6"],"cwe":["CWE_79"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:50.907109Z","updated_on":"2022-05-26T05:10:50.907130Z","uuid":"c85bebcb-b64b-4677-8e20-2e58314315ef","vulnerability":75,"attachments":[],"file":31300},{"id":1915085,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A6_2013"],"pcidss":["6_5"],"hipaa":["164_312_c_1","164_312_a_1"],"asvs":["ASVS_14_5_3"],"cwe":["CWE_942"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:50.496253Z","updated_on":"2022-05-26T05:10:50.496273Z","uuid":"7825c836-7d90-4957-8a6c-e1d9a9350153","vulnerability":76,"attachments":[],"file":31300},{"id":1915109,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A6_2013","A7_2013"],"pcidss":["6_5"],"hipaa":["164_312_c_1","164_312_a_1"],"asvs":["ASVS_14_5_1","ASVS_5_3_6"],"cwe":["CWE_79"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:51.475700Z","updated_on":"2022-05-26T05:10:51.475739Z","uuid":"2b667c1e-bb6d-4357-a160-964a24af9b70","vulnerability":77,"attachments":[],"file":31300},{"id":1915117,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A3_2013","A6_2013"],"pcidss":["4_1"],"hipaa":["164_312_e_1"],"asvs":["ASVS_1_9_1"],"cwe":["CWE_319"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:51.800826Z","updated_on":"2022-05-26T05:10:51.800848Z","uuid":"3bc7e8d1-83dd-4701-b809-0b0960e20c94","vulnerability":78,"attachments":[],"file":31300},{"id":1915071,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M3_2016"],"pcidss":["4_1"],"hipaa":[],"asvs":[],"cwe":["CWE_319"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_5_1"],"created_on":"2022-05-26T05:10:49.928437Z","updated_on":"2022-05-26T05:12:34.619445Z","uuid":"f765b44c-daa1-45d0-ab89-82568de6f54a","vulnerability":82,"attachments":[],"file":31300},{"id":1915108,"analiser_version":0,"risk":2,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":2,"status":3,"findings":[{"title":null,"description":"SSL Pinning is not implemented in the Application."}],"cvss_vector":"CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:L/A:N","cvss_base":5.9,"cvss_version":3,"cvss_metrics_humanized":[{"key":"Attack Vector","value":"Network"},{"key":"Attack Complexity","value":"High"},{"key":"Privileges Required","value":"None"},{"key":"User Interaction","value":"Required"},{"key":"Scope","value":"Unchanged"},{"key":"Confidentiality Impact","value":"High"},{"key":"Integrity Impact","value":"Low"},{"key":"Availability Impact","value":"None"}],"owasp":["M3_2016"],"pcidss":["4_1"],"hipaa":[],"asvs":[],"cwe":["CWE_295"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_5_3"],"created_on":"2022-05-26T05:10:51.435642Z","updated_on":"2022-05-26T05:12:34.794177Z","uuid":"e78b8255-1515-4717-b54d-dccf4ff8075c","vulnerability":83,"attachments":[],"file":31300},{"id":1915130,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016","M7_2016"],"pcidss":[],"hipaa":[],"asvs":[],"cwe":["CWE_200"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_2_4"],"created_on":"2022-05-26T05:10:52.348834Z","updated_on":"2022-05-26T05:12:34.906052Z","uuid":"b2bc2490-d5ff-4f25-b673-3fcf4c06fbff","vulnerability":84,"attachments":[],"file":31300},{"id":1915078,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":[],"hipaa":[],"asvs":[],"cwe":["CWE_470"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_2"],"created_on":"2022-05-26T05:10:50.218318Z","updated_on":"2022-05-26T05:12:35.441659Z","uuid":"fae29285-1714-4dd9-811b-68bfa4d640d3","vulnerability":85,"attachments":[],"file":31300},{"id":1915124,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":["9_7"],"hipaa":[],"asvs":[],"cwe":["CWE_749"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_6"],"created_on":"2022-05-26T05:10:52.091552Z","updated_on":"2022-05-26T05:12:35.581892Z","uuid":"b1dac2e1-d0f4-41e2-92af-8971abc3ed3f","vulnerability":86,"attachments":[],"file":31300},{"id":1915114,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A6_2013"],"pcidss":[],"hipaa":[],"asvs":["ASVS_13_1_3","ASVS_13_1_2"],"cwe":["CWE_16"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:51.677937Z","updated_on":"2022-05-26T05:10:51.677960Z","uuid":"1282b3e3-eb43-4a3c-b38d-e592d865142a","vulnerability":87,"attachments":[],"file":31300},{"id":1915089,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":[],"hipaa":[],"asvs":[],"cwe":["CWE_925"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_2"],"created_on":"2022-05-26T05:10:50.659827Z","updated_on":"2022-05-26T05:12:35.871952Z","uuid":"d8d00853-6d50-4b2c-b7ee-235174aabf01","vulnerability":88,"attachments":[],"file":31300},{"id":1915131,"analiser_version":0,"risk":2,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":2,"status":3,"findings":[{"title":null,"description":"Intent hijacking is possible via BroadcastReceiver through Lcom/android/insecurebankv2/ChangePassword;->broadcastChangepasswordSMS"}],"cvss_vector":"CVSS:3.0/AV:L/AC:H/PR:N/UI:R/S:U/C:H/I:L/A:N","cvss_base":5.3,"cvss_version":3,"cvss_metrics_humanized":[{"key":"Attack Vector","value":"Local"},{"key":"Attack Complexity","value":"High"},{"key":"Privileges Required","value":"None"},{"key":"User Interaction","value":"Required"},{"key":"Scope","value":"Unchanged"},{"key":"Confidentiality Impact","value":"High"},{"key":"Integrity Impact","value":"Low"},{"key":"Availability Impact","value":"None"}],"owasp":["M1_2016"],"pcidss":[],"hipaa":[],"asvs":[],"cwe":["CWE_16"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_2"],"created_on":"2022-05-26T05:10:52.390368Z","updated_on":"2022-05-26T05:12:36.211187Z","uuid":"6f8c6fc3-4c3d-4481-adc0-0c50cc309b68","vulnerability":89,"attachments":[],"file":31300},{"id":1915105,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M2_2016"],"pcidss":["3_2","3_3","3_4"],"hipaa":["164_312_a_1"],"asvs":[],"cwe":["CWE_922"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_2_1"],"created_on":"2022-05-26T05:10:51.315844Z","updated_on":"2022-05-26T05:17:36.318997Z","uuid":"f2f15f67-910e-441f-ae2d-54c14e7f85a8","vulnerability":90,"attachments":[],"file":31300},{"id":1915102,"analiser_version":0,"risk":2,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":2,"status":3,"findings":[{"title":null,"description":"The App does not protect sensitive screens from being displayed in screencasts initiated by third-party Apps"}],"cvss_vector":"CVSS:3.0/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N","cvss_base":6.8,"cvss_version":3,"cvss_metrics_humanized":[{"key":"Attack Vector","value":"Local"},{"key":"Attack Complexity","value":"Low"},{"key":"Privileges Required","value":"None"},{"key":"User Interaction","value":"Not Required"},{"key":"Scope","value":"Unchanged"},{"key":"Confidentiality Impact","value":"High"},{"key":"Integrity Impact","value":"Low"},{"key":"Availability Impact","value":"None"}],"owasp":["M1_2016"],"pcidss":["3_1","3_2"],"hipaa":[],"asvs":[],"cwe":["CWE_200"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_2_9"],"created_on":"2022-05-26T05:10:51.194194Z","updated_on":"2022-05-26T05:12:36.333784Z","uuid":"8505639b-d994-4263-9c1d-a7099882d003","vulnerability":92,"attachments":[],"file":31300},{"id":1915128,"analiser_version":0,"risk":2,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":2,"status":3,"findings":[{"title":null,"description":"execSQL is used in Lcom/android/insecurebankv2/TrackUserContentProvider$DatabaseHelper;->onCreate"},{"title":null,"description":"execSQL is used in Lcom/android/insecurebankv2/TrackUserContentProvider$DatabaseHelper;->onUpgrade"}],"cvss_vector":"CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L","cvss_base":5.3,"cvss_version":3,"cvss_metrics_humanized":[{"key":"Attack Vector","value":"Local"},{"key":"Attack Complexity","value":"Low"},{"key":"Privileges Required","value":"Low"},{"key":"User Interaction","value":"Not Required"},{"key":"Scope","value":"Unchanged"},{"key":"Confidentiality Impact","value":"Low"},{"key":"Integrity Impact","value":"Low"},{"key":"Availability Impact","value":"Low"}],"owasp":["M7_2016"],"pcidss":[],"hipaa":[],"asvs":[],"cwe":["CWE_89"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_2"],"created_on":"2022-05-26T05:10:52.265499Z","updated_on":"2022-05-26T05:12:36.454421Z","uuid":"b887010f-168c-4e21-8c97-24c34cd69031","vulnerability":93,"attachments":[],"file":31300},{"id":1915061,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M7_2016"],"pcidss":[],"hipaa":[],"asvs":[],"cwe":["CWE_942"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_6"],"created_on":"2022-05-26T05:10:49.521010Z","updated_on":"2022-05-26T05:12:36.569185Z","uuid":"846f3a20-c875-478f-81c7-489257059bf4","vulnerability":94,"attachments":[],"file":31300},{"id":1915063,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M7_2016"],"pcidss":[],"hipaa":[],"asvs":[],"cwe":["CWE_502"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_6_8"],"created_on":"2022-05-26T05:10:49.602246Z","updated_on":"2022-05-26T05:12:36.685287Z","uuid":"9b32babb-7190-4d9e-8a8d-1a69e895dd79","vulnerability":95,"attachments":[],"file":31300},{"id":1915060,"analiser_version":0,"risk":1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":1,"status":3,"findings":[{"title":null,"description":"`android:allowBackup=true` is found in AndroidManifest.xml"}],"cvss_vector":"CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N","cvss_base":3.3,"cvss_version":3,"cvss_metrics_humanized":[{"key":"Attack Vector","value":"Local"},{"key":"Attack Complexity","value":"Low"},{"key":"Privileges Required","value":"Low"},{"key":"User Interaction","value":"Not Required"},{"key":"Scope","value":"Unchanged"},{"key":"Confidentiality Impact","value":"Low"},{"key":"Integrity Impact","value":"None"},{"key":"Availability Impact","value":"None"}],"owasp":["M2_2016"],"pcidss":[],"hipaa":[],"asvs":[],"cwe":["CWE_16"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_2_8"],"created_on":"2022-05-26T05:10:49.481047Z","updated_on":"2022-05-26T05:12:36.797380Z","uuid":"6e92f5b4-ed93-418c-bc2b-1071b9b764a2","vulnerability":96,"attachments":[],"file":31300},{"id":1915129,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M1_2016"],"pcidss":["6_2"],"hipaa":[],"asvs":[],"cwe":["CWE_477"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_7_5"],"created_on":"2022-05-26T05:10:52.308241Z","updated_on":"2022-05-26T05:12:36.917089Z","uuid":"7bb66463-32b0-440d-8b71-4841f1dcc8d5","vulnerability":98,"attachments":[],"file":31300},{"id":1915120,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M4_2016","M6_2016"],"pcidss":["3_1","3_2","3_3"],"hipaa":[],"asvs":[],"cwe":["CWE_613"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_4_2"],"created_on":"2022-05-26T05:10:51.924316Z","updated_on":"2022-05-26T05:10:51.924338Z","uuid":"3d3f334c-0a87-427f-af03-bcb74ffad120","vulnerability":99,"attachments":[],"file":31300},{"id":1915065,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A3_2013"],"pcidss":[],"hipaa":[],"asvs":["ASVS_3_4_1","ASVS_3_4_2","ASVS_3_4_3"],"cwe":["CWE_1004","CWE_614"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:49.679968Z","updated_on":"2022-05-26T05:10:49.679992Z","uuid":"cc696677-4dfb-4798-9f9e-f13b2a2531af","vulnerability":101,"attachments":[],"file":31300},{"id":1915068,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A3_2013"],"pcidss":["3_2","3_3","3_4"],"hipaa":[],"asvs":["ASVS_13_1_3","ASVS_13_1_2"],"cwe":["CWE_202","CWE_200"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:49.800122Z","updated_on":"2022-05-26T05:10:49.800145Z","uuid":"2d21c5aa-ee90-4743-a619-f9db245d724d","vulnerability":102,"attachments":[],"file":31300},{"id":1915121,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A6_2013"],"pcidss":["3_2","3_3","3_4"],"hipaa":[],"asvs":["ASVS_13_1_3"],"cwe":["CWE_209"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:51.966494Z","updated_on":"2022-05-26T05:10:51.966516Z","uuid":"14008256-4e71-44be-ae45-0928c33b7086","vulnerability":103,"attachments":[],"file":31300},{"id":1915134,"analiser_version":0,"risk":1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":1,"status":3,"findings":[{"title":null,"description":"Application is vulnerable to reverse engineering without any obfuscation"}],"cvss_vector":"CVSS:3.0/AV:L/AC:L/PR:H/UI:N/S:U/C:L/I:N/A:N","cvss_base":2.3,"cvss_version":3,"cvss_metrics_humanized":[{"key":"Attack Vector","value":"Local"},{"key":"Attack Complexity","value":"Low"},{"key":"Privileges Required","value":"High"},{"key":"User Interaction","value":"Not Required"},{"key":"Scope","value":"Unchanged"},{"key":"Confidentiality Impact","value":"Low"},{"key":"Integrity Impact","value":"None"},{"key":"Availability Impact","value":"None"}],"owasp":["M9_2016"],"pcidss":["3_2","3_3","3_4"],"hipaa":[],"asvs":[],"cwe":["CWE_693"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_8_9"],"created_on":"2022-05-26T05:10:52.513560Z","updated_on":"2022-05-26T05:12:37.686449Z","uuid":"eb97ec75-a305-4147-9ad0-4f4488ae4d4a","vulnerability":104,"attachments":[],"file":31300},{"id":1915122,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A6_2013"],"pcidss":["6_5"],"hipaa":[],"asvs":["ASVS_14_5_1"],"cwe":["CWE_16"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:52.008815Z","updated_on":"2022-05-26T05:10:52.008837Z","uuid":"77c60ce3-4248-4ea7-9c43-1183fe6ac72a","vulnerability":105,"attachments":[],"file":31300},{"id":1915123,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A1_2013"],"pcidss":["6_5","6_6"],"hipaa":[],"asvs":["ASVS_14_5_2","ASVS_14_5_4"],"cwe":["CWE_20"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:52.050980Z","updated_on":"2022-05-26T05:10:52.051006Z","uuid":"a9d2f717-deaf-45e6-96cf-46f2545b09fc","vulnerability":106,"attachments":[],"file":31300},{"id":1915070,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A1_2013"],"pcidss":["6_6"],"hipaa":[],"asvs":["ASVS_9_1_1","ASVS_9_1_2","ASVS_9_1_3"],"cwe":["CWE_326"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:49.884273Z","updated_on":"2022-05-26T05:10:49.884297Z","uuid":"cc6ef09f-636a-40f4-8995-3475891d64a2","vulnerability":107,"attachments":[],"file":31300},{"id":1915132,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A6_2013"],"pcidss":["4_1","6_6"],"hipaa":[],"asvs":["ASVS_9_1_1","ASVS_9_1_2","ASVS_9_1_3"],"cwe":["CWE_757"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:52.432081Z","updated_on":"2022-05-26T05:10:52.432104Z","uuid":"ca4a26f9-96b9-4106-912c-17535ccbdbd5","vulnerability":108,"attachments":[],"file":31300},{"id":1915136,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A6_2013"],"pcidss":["6_6"],"hipaa":[],"asvs":["ASVS_9_1_1","ASVS_9_1_2","ASVS_9_1_3"],"cwe":["CWE_126"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:52.591585Z","updated_on":"2022-05-26T05:10:52.591608Z","uuid":"5043e1f4-feff-41cb-8f95-46f7586ca162","vulnerability":109,"attachments":[],"file":31300},{"id":1915110,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A6_2013"],"pcidss":["4_1","6_6"],"hipaa":[],"asvs":["ASVS_9_1_1","ASVS_9_1_2","ASVS_9_1_3"],"cwe":["CWE_310"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:51.516054Z","updated_on":"2022-05-26T05:10:51.516077Z","uuid":"e3ee666f-616a-4ea8-bade-704683a87a39","vulnerability":110,"attachments":[],"file":31300},{"id":1915111,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A6_2013"],"pcidss":["4_1","6_6"],"hipaa":[],"asvs":["ASVS_9_1_1","ASVS_9_1_2","ASVS_9_1_3"],"cwe":["CWE_310"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:51.556985Z","updated_on":"2022-05-26T05:10:51.557008Z","uuid":"ea8fe90e-3fc9-4987-8254-3b8020e8dffb","vulnerability":111,"attachments":[],"file":31300},{"id":1915133,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["A6_2013"],"pcidss":["4_1","6_6"],"hipaa":[],"asvs":["ASVS_9_1_1","ASVS_9_1_2","ASVS_9_1_3"],"cwe":["CWE_757"],"gdpr":["gdpr_25","gdpr_32"],"mstg":[],"created_on":"2022-05-26T05:10:52.472506Z","updated_on":"2022-05-26T05:10:52.472527Z","uuid":"16682d68-d97b-455a-89a4-832df2ac4086","vulnerability":112,"attachments":[],"file":31300},{"id":1915135,"analiser_version":0,"risk":0,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":0,"status":3,"findings":[],"cvss_vector":"","cvss_base":0.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M3_2016"],"pcidss":["4_1"],"hipaa":[],"asvs":[],"cwe":["CWE_16"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_5_1"],"created_on":"2022-05-26T05:10:52.552547Z","updated_on":"2022-05-26T05:12:37.805187Z","uuid":"4f9688c1-6f31-40f6-bf24-9beb8cb87370","vulnerability":113,"attachments":[],"file":31300},{"id":1915137,"analiser_version":0,"risk":-1,"overridden_risk":null,"overridden_risk_comment":null,"computed_risk":-1,"status":1,"findings":[],"cvss_vector":"","cvss_base":-1.0,"cvss_version":3,"cvss_metrics_humanized":[],"owasp":["M4_2016","M6_2016"],"pcidss":["8_2","8_3","8_6","8_7"],"hipaa":[],"asvs":[],"cwe":["CWE_1299"],"gdpr":["gdpr_25","gdpr_32"],"mstg":["MSTG_4_8"],"created_on":"2022-05-26T05:10:52.630586Z","updated_on":"2022-05-26T05:10:52.630605Z","uuid":"231af9db-8391-4cae-9a35-f172ebff54d9","vulnerability":114,"attachments":[],"file":31300}],"tags":[],"is_active":true,"can_run_automated_dynamicscan":false,"can_generate_report":false}}